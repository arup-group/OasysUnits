//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace OasysUnits.NumberExtensions.NumberToMassFlow
{
    /// <summary>
    /// A number to MassFlow Extensions
    /// </summary>
    public static class NumberToMassFlowExtensions
    {
        /// <inheritdoc cref="MassFlow.FromCentigramsPerDay(OasysUnits.QuantityValue)" />
        public static MassFlow CentigramsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromCentigramsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromCentigramsPerSecond(OasysUnits.QuantityValue)" />
        public static MassFlow CentigramsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromCentigramsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromDecagramsPerDay(OasysUnits.QuantityValue)" />
        public static MassFlow DecagramsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromDecagramsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromDecagramsPerSecond(OasysUnits.QuantityValue)" />
        public static MassFlow DecagramsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromDecagramsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromDecigramsPerDay(OasysUnits.QuantityValue)" />
        public static MassFlow DecigramsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromDecigramsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromDecigramsPerSecond(OasysUnits.QuantityValue)" />
        public static MassFlow DecigramsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromDecigramsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromGramsPerDay(OasysUnits.QuantityValue)" />
        public static MassFlow GramsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromGramsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromGramsPerHour(OasysUnits.QuantityValue)" />
        public static MassFlow GramsPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromGramsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromGramsPerSecond(OasysUnits.QuantityValue)" />
        public static MassFlow GramsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromGramsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromHectogramsPerDay(OasysUnits.QuantityValue)" />
        public static MassFlow HectogramsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromHectogramsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromHectogramsPerSecond(OasysUnits.QuantityValue)" />
        public static MassFlow HectogramsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromHectogramsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromKilogramsPerDay(OasysUnits.QuantityValue)" />
        public static MassFlow KilogramsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromKilogramsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromKilogramsPerHour(OasysUnits.QuantityValue)" />
        public static MassFlow KilogramsPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromKilogramsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromKilogramsPerMinute(OasysUnits.QuantityValue)" />
        public static MassFlow KilogramsPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromKilogramsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromKilogramsPerSecond(OasysUnits.QuantityValue)" />
        public static MassFlow KilogramsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromKilogramsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromMegagramsPerDay(OasysUnits.QuantityValue)" />
        public static MassFlow MegagramsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromMegagramsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromMegapoundsPerDay(OasysUnits.QuantityValue)" />
        public static MassFlow MegapoundsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromMegapoundsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromMegapoundsPerHour(OasysUnits.QuantityValue)" />
        public static MassFlow MegapoundsPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromMegapoundsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromMegapoundsPerMinute(OasysUnits.QuantityValue)" />
        public static MassFlow MegapoundsPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromMegapoundsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromMegapoundsPerSecond(OasysUnits.QuantityValue)" />
        public static MassFlow MegapoundsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromMegapoundsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromMicrogramsPerDay(OasysUnits.QuantityValue)" />
        public static MassFlow MicrogramsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromMicrogramsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromMicrogramsPerSecond(OasysUnits.QuantityValue)" />
        public static MassFlow MicrogramsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromMicrogramsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromMilligramsPerDay(OasysUnits.QuantityValue)" />
        public static MassFlow MilligramsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromMilligramsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromMilligramsPerSecond(OasysUnits.QuantityValue)" />
        public static MassFlow MilligramsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromMilligramsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromNanogramsPerDay(OasysUnits.QuantityValue)" />
        public static MassFlow NanogramsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromNanogramsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromNanogramsPerSecond(OasysUnits.QuantityValue)" />
        public static MassFlow NanogramsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromNanogramsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromPoundsPerDay(OasysUnits.QuantityValue)" />
        public static MassFlow PoundsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromPoundsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromPoundsPerHour(OasysUnits.QuantityValue)" />
        public static MassFlow PoundsPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromPoundsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromPoundsPerMinute(OasysUnits.QuantityValue)" />
        public static MassFlow PoundsPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromPoundsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromPoundsPerSecond(OasysUnits.QuantityValue)" />
        public static MassFlow PoundsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromPoundsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromShortTonsPerHour(OasysUnits.QuantityValue)" />
        public static MassFlow ShortTonsPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromShortTonsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromTonnesPerDay(OasysUnits.QuantityValue)" />
        public static MassFlow TonnesPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromTonnesPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="MassFlow.FromTonnesPerHour(OasysUnits.QuantityValue)" />
        public static MassFlow TonnesPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MassFlow.FromTonnesPerHour(Convert.ToDouble(value));

    }
}
