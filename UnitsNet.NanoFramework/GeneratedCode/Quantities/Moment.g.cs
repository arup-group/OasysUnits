//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using OasysUnits.Units;

namespace OasysUnits
{
    /// <inheritdoc />
    /// <summary>
    ///     .
    /// </summary>
    public struct  Moment
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly MomentUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public MomentUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Moment(double value, MomentUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static MomentUnit BaseUnit { get; } = MomentUnit.NewtonMeter;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static Moment MaxValue { get; } = new Moment(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static Moment MinValue { get; } = new Moment(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Moment Zero { get; } = new Moment(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.KilogramForceCentimeter"/>
        /// </summary>
        public double KilogramForceCentimeters => As(MomentUnit.KilogramForceCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.KilogramForceMeter"/>
        /// </summary>
        public double KilogramForceMeters => As(MomentUnit.KilogramForceMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.KilogramForceMillimeter"/>
        /// </summary>
        public double KilogramForceMillimeters => As(MomentUnit.KilogramForceMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.KilonewtonCentimeter"/>
        /// </summary>
        public double KilonewtonCentimeters => As(MomentUnit.KilonewtonCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.KilonewtonMeter"/>
        /// </summary>
        public double KilonewtonMeters => As(MomentUnit.KilonewtonMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.KilonewtonMillimeter"/>
        /// </summary>
        public double KilonewtonMillimeters => As(MomentUnit.KilonewtonMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.KilopoundForceFoot"/>
        /// </summary>
        public double KilopoundForceFeet => As(MomentUnit.KilopoundForceFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.KilopoundForceInch"/>
        /// </summary>
        public double KilopoundForceInches => As(MomentUnit.KilopoundForceInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.MeganewtonCentimeter"/>
        /// </summary>
        public double MeganewtonCentimeters => As(MomentUnit.MeganewtonCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.MeganewtonMeter"/>
        /// </summary>
        public double MeganewtonMeters => As(MomentUnit.MeganewtonMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.MeganewtonMillimeter"/>
        /// </summary>
        public double MeganewtonMillimeters => As(MomentUnit.MeganewtonMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.MegapoundForceFoot"/>
        /// </summary>
        public double MegapoundForceFeet => As(MomentUnit.MegapoundForceFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.MegapoundForceInch"/>
        /// </summary>
        public double MegapoundForceInches => As(MomentUnit.MegapoundForceInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.NewtonCentimeter"/>
        /// </summary>
        public double NewtonCentimeters => As(MomentUnit.NewtonCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.NewtonMeter"/>
        /// </summary>
        public double NewtonMeters => As(MomentUnit.NewtonMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.NewtonMillimeter"/>
        /// </summary>
        public double NewtonMillimeters => As(MomentUnit.NewtonMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.PoundalFoot"/>
        /// </summary>
        public double PoundalFeet => As(MomentUnit.PoundalFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.PoundForceFoot"/>
        /// </summary>
        public double PoundForceFeet => As(MomentUnit.PoundForceFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.PoundForceInch"/>
        /// </summary>
        public double PoundForceInches => As(MomentUnit.PoundForceInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.TonneForceCentimeter"/>
        /// </summary>
        public double TonneForceCentimeters => As(MomentUnit.TonneForceCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.TonneForceMeter"/>
        /// </summary>
        public double TonneForceMeters => As(MomentUnit.TonneForceMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentUnit.TonneForceMillimeter"/>
        /// </summary>
        public double TonneForceMillimeters => As(MomentUnit.TonneForceMillimeter);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.KilogramForceCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromKilogramForceCentimeters(double kilogramforcecentimeters) => new Moment(kilogramforcecentimeters, MomentUnit.KilogramForceCentimeter);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.KilogramForceMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromKilogramForceMeters(double kilogramforcemeters) => new Moment(kilogramforcemeters, MomentUnit.KilogramForceMeter);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.KilogramForceMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromKilogramForceMillimeters(double kilogramforcemillimeters) => new Moment(kilogramforcemillimeters, MomentUnit.KilogramForceMillimeter);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.KilonewtonCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromKilonewtonCentimeters(double kilonewtoncentimeters) => new Moment(kilonewtoncentimeters, MomentUnit.KilonewtonCentimeter);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.KilonewtonMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromKilonewtonMeters(double kilonewtonmeters) => new Moment(kilonewtonmeters, MomentUnit.KilonewtonMeter);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.KilonewtonMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromKilonewtonMillimeters(double kilonewtonmillimeters) => new Moment(kilonewtonmillimeters, MomentUnit.KilonewtonMillimeter);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.KilopoundForceFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromKilopoundForceFeet(double kilopoundforcefeet) => new Moment(kilopoundforcefeet, MomentUnit.KilopoundForceFoot);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.KilopoundForceInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromKilopoundForceInches(double kilopoundforceinches) => new Moment(kilopoundforceinches, MomentUnit.KilopoundForceInch);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.MeganewtonCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromMeganewtonCentimeters(double meganewtoncentimeters) => new Moment(meganewtoncentimeters, MomentUnit.MeganewtonCentimeter);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.MeganewtonMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromMeganewtonMeters(double meganewtonmeters) => new Moment(meganewtonmeters, MomentUnit.MeganewtonMeter);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.MeganewtonMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromMeganewtonMillimeters(double meganewtonmillimeters) => new Moment(meganewtonmillimeters, MomentUnit.MeganewtonMillimeter);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.MegapoundForceFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromMegapoundForceFeet(double megapoundforcefeet) => new Moment(megapoundforcefeet, MomentUnit.MegapoundForceFoot);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.MegapoundForceInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromMegapoundForceInches(double megapoundforceinches) => new Moment(megapoundforceinches, MomentUnit.MegapoundForceInch);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.NewtonCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromNewtonCentimeters(double newtoncentimeters) => new Moment(newtoncentimeters, MomentUnit.NewtonCentimeter);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.NewtonMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromNewtonMeters(double newtonmeters) => new Moment(newtonmeters, MomentUnit.NewtonMeter);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.NewtonMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromNewtonMillimeters(double newtonmillimeters) => new Moment(newtonmillimeters, MomentUnit.NewtonMillimeter);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.PoundalFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromPoundalFeet(double poundalfeet) => new Moment(poundalfeet, MomentUnit.PoundalFoot);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.PoundForceFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromPoundForceFeet(double poundforcefeet) => new Moment(poundforcefeet, MomentUnit.PoundForceFoot);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.PoundForceInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromPoundForceInches(double poundforceinches) => new Moment(poundforceinches, MomentUnit.PoundForceInch);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.TonneForceCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromTonneForceCentimeters(double tonneforcecentimeters) => new Moment(tonneforcecentimeters, MomentUnit.TonneForceCentimeter);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.TonneForceMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromTonneForceMeters(double tonneforcemeters) => new Moment(tonneforcemeters, MomentUnit.TonneForceMeter);

        /// <summary>
        ///     Creates a <see cref="Moment"/> from <see cref="MomentUnit.TonneForceMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Moment FromTonneForceMillimeters(double tonneforcemillimeters) => new Moment(tonneforcemillimeters, MomentUnit.TonneForceMillimeter);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MomentUnit" /> to <see cref="Moment" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Moment unit value.</returns>
        public static Moment From(double value, MomentUnit fromUnit)
        {
            return new Moment(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(MomentUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public Moment ToUnit(MomentUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Moment(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            return Unit switch
            {
                MomentUnit.KilogramForceCentimeter => _value*0.0980665019960652,
                MomentUnit.KilogramForceMeter => _value*9.80665019960652,
                MomentUnit.KilogramForceMillimeter => _value*0.00980665019960652,
                MomentUnit.KilonewtonCentimeter => (_value*0.01) * 1e3d,
                MomentUnit.KilonewtonMeter => (_value) * 1e3d,
                MomentUnit.KilonewtonMillimeter => (_value*0.001) * 1e3d,
                MomentUnit.KilopoundForceFoot => (_value*1.3558179483314) * 1e3d,
                MomentUnit.KilopoundForceInch => (_value*1.129848290276167e-1) * 1e3d,
                MomentUnit.MeganewtonCentimeter => (_value*0.01) * 1e6d,
                MomentUnit.MeganewtonMeter => (_value) * 1e6d,
                MomentUnit.MeganewtonMillimeter => (_value*0.001) * 1e6d,
                MomentUnit.MegapoundForceFoot => (_value*1.3558179483314) * 1e6d,
                MomentUnit.MegapoundForceInch => (_value*1.129848290276167e-1) * 1e6d,
                MomentUnit.NewtonCentimeter => _value*0.01,
                MomentUnit.NewtonMeter => _value,
                MomentUnit.NewtonMillimeter => _value*0.001,
                MomentUnit.PoundalFoot => _value*4.21401100938048e-2,
                MomentUnit.PoundForceFoot => _value*1.3558179483314,
                MomentUnit.PoundForceInch => _value*1.129848290276167e-1,
                MomentUnit.TonneForceCentimeter => _value*98.0665019960652,
                MomentUnit.TonneForceMeter => _value*9806.65019960653,
                MomentUnit.TonneForceMillimeter => _value*9.80665019960652,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private double GetValueAs(MomentUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                MomentUnit.KilogramForceCentimeter => baseUnitValue*10.1971619222242,
                MomentUnit.KilogramForceMeter => baseUnitValue*0.101971619222242,
                MomentUnit.KilogramForceMillimeter => baseUnitValue*101.971619222242,
                MomentUnit.KilonewtonCentimeter => (baseUnitValue*100) / 1e3d,
                MomentUnit.KilonewtonMeter => (baseUnitValue) / 1e3d,
                MomentUnit.KilonewtonMillimeter => (baseUnitValue*1000) / 1e3d,
                MomentUnit.KilopoundForceFoot => (baseUnitValue/1.3558179483314) / 1e3d,
                MomentUnit.KilopoundForceInch => (baseUnitValue/1.129848290276167e-1) / 1e3d,
                MomentUnit.MeganewtonCentimeter => (baseUnitValue*100) / 1e6d,
                MomentUnit.MeganewtonMeter => (baseUnitValue) / 1e6d,
                MomentUnit.MeganewtonMillimeter => (baseUnitValue*1000) / 1e6d,
                MomentUnit.MegapoundForceFoot => (baseUnitValue/1.3558179483314) / 1e6d,
                MomentUnit.MegapoundForceInch => (baseUnitValue/1.129848290276167e-1) / 1e6d,
                MomentUnit.NewtonCentimeter => baseUnitValue*100,
                MomentUnit.NewtonMeter => baseUnitValue,
                MomentUnit.NewtonMillimeter => baseUnitValue*1000,
                MomentUnit.PoundalFoot => baseUnitValue/4.21401100938048e-2,
                MomentUnit.PoundForceFoot => baseUnitValue/1.3558179483314,
                MomentUnit.PoundForceInch => baseUnitValue/1.129848290276167e-1,
                MomentUnit.TonneForceCentimeter => baseUnitValue*0.0101971619222242,
                MomentUnit.TonneForceMeter => baseUnitValue*0.000101971619222242,
                MomentUnit.TonneForceMillimeter => baseUnitValue*0.101971619222242,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion
    }
}

