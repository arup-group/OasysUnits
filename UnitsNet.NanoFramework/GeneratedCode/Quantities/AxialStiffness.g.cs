//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using OasysUnits.Units;

namespace OasysUnits
{
    /// <inheritdoc />
    /// <summary>
    ///     .
    /// </summary>
    public struct  AxialStiffness
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly AxialStiffnessUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public AxialStiffnessUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public AxialStiffness(double value, AxialStiffnessUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static AxialStiffnessUnit BaseUnit { get; } = AxialStiffnessUnit.Newton;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static AxialStiffness MaxValue { get; } = new AxialStiffness(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static AxialStiffness MinValue { get; } = new AxialStiffness(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static AxialStiffness Zero { get; } = new AxialStiffness(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AxialStiffnessUnit.Decanewton"/>
        /// </summary>
        public double Decanewtons => As(AxialStiffnessUnit.Decanewton);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AxialStiffnessUnit.Dyn"/>
        /// </summary>
        public double Dyne => As(AxialStiffnessUnit.Dyn);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AxialStiffnessUnit.KilogramForce"/>
        /// </summary>
        public double KilogramsForce => As(AxialStiffnessUnit.KilogramForce);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AxialStiffnessUnit.Kilonewton"/>
        /// </summary>
        public double Kilonewtons => As(AxialStiffnessUnit.Kilonewton);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AxialStiffnessUnit.KiloPond"/>
        /// </summary>
        public double KiloPonds => As(AxialStiffnessUnit.KiloPond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AxialStiffnessUnit.KilopoundForce"/>
        /// </summary>
        public double KilopoundsForce => As(AxialStiffnessUnit.KilopoundForce);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AxialStiffnessUnit.Meganewton"/>
        /// </summary>
        public double Meganewtons => As(AxialStiffnessUnit.Meganewton);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AxialStiffnessUnit.Micronewton"/>
        /// </summary>
        public double Micronewtons => As(AxialStiffnessUnit.Micronewton);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AxialStiffnessUnit.Millinewton"/>
        /// </summary>
        public double Millinewtons => As(AxialStiffnessUnit.Millinewton);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AxialStiffnessUnit.Newton"/>
        /// </summary>
        public double Newtons => As(AxialStiffnessUnit.Newton);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AxialStiffnessUnit.OunceForce"/>
        /// </summary>
        public double OunceForce => As(AxialStiffnessUnit.OunceForce);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AxialStiffnessUnit.Poundal"/>
        /// </summary>
        public double Poundals => As(AxialStiffnessUnit.Poundal);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AxialStiffnessUnit.PoundForce"/>
        /// </summary>
        public double PoundsForce => As(AxialStiffnessUnit.PoundForce);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AxialStiffnessUnit.ShortTonForce"/>
        /// </summary>
        public double ShortTonsForce => As(AxialStiffnessUnit.ShortTonForce);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AxialStiffnessUnit.TonneForce"/>
        /// </summary>
        public double TonnesForce => As(AxialStiffnessUnit.TonneForce);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="AxialStiffness"/> from <see cref="AxialStiffnessUnit.Decanewton"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AxialStiffness FromDecanewtons(double decanewtons) => new AxialStiffness(decanewtons, AxialStiffnessUnit.Decanewton);

        /// <summary>
        ///     Creates a <see cref="AxialStiffness"/> from <see cref="AxialStiffnessUnit.Dyn"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AxialStiffness FromDyne(double dyne) => new AxialStiffness(dyne, AxialStiffnessUnit.Dyn);

        /// <summary>
        ///     Creates a <see cref="AxialStiffness"/> from <see cref="AxialStiffnessUnit.KilogramForce"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AxialStiffness FromKilogramsForce(double kilogramsforce) => new AxialStiffness(kilogramsforce, AxialStiffnessUnit.KilogramForce);

        /// <summary>
        ///     Creates a <see cref="AxialStiffness"/> from <see cref="AxialStiffnessUnit.Kilonewton"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AxialStiffness FromKilonewtons(double kilonewtons) => new AxialStiffness(kilonewtons, AxialStiffnessUnit.Kilonewton);

        /// <summary>
        ///     Creates a <see cref="AxialStiffness"/> from <see cref="AxialStiffnessUnit.KiloPond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AxialStiffness FromKiloPonds(double kiloponds) => new AxialStiffness(kiloponds, AxialStiffnessUnit.KiloPond);

        /// <summary>
        ///     Creates a <see cref="AxialStiffness"/> from <see cref="AxialStiffnessUnit.KilopoundForce"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AxialStiffness FromKilopoundsForce(double kilopoundsforce) => new AxialStiffness(kilopoundsforce, AxialStiffnessUnit.KilopoundForce);

        /// <summary>
        ///     Creates a <see cref="AxialStiffness"/> from <see cref="AxialStiffnessUnit.Meganewton"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AxialStiffness FromMeganewtons(double meganewtons) => new AxialStiffness(meganewtons, AxialStiffnessUnit.Meganewton);

        /// <summary>
        ///     Creates a <see cref="AxialStiffness"/> from <see cref="AxialStiffnessUnit.Micronewton"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AxialStiffness FromMicronewtons(double micronewtons) => new AxialStiffness(micronewtons, AxialStiffnessUnit.Micronewton);

        /// <summary>
        ///     Creates a <see cref="AxialStiffness"/> from <see cref="AxialStiffnessUnit.Millinewton"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AxialStiffness FromMillinewtons(double millinewtons) => new AxialStiffness(millinewtons, AxialStiffnessUnit.Millinewton);

        /// <summary>
        ///     Creates a <see cref="AxialStiffness"/> from <see cref="AxialStiffnessUnit.Newton"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AxialStiffness FromNewtons(double newtons) => new AxialStiffness(newtons, AxialStiffnessUnit.Newton);

        /// <summary>
        ///     Creates a <see cref="AxialStiffness"/> from <see cref="AxialStiffnessUnit.OunceForce"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AxialStiffness FromOunceForce(double ounceforce) => new AxialStiffness(ounceforce, AxialStiffnessUnit.OunceForce);

        /// <summary>
        ///     Creates a <see cref="AxialStiffness"/> from <see cref="AxialStiffnessUnit.Poundal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AxialStiffness FromPoundals(double poundals) => new AxialStiffness(poundals, AxialStiffnessUnit.Poundal);

        /// <summary>
        ///     Creates a <see cref="AxialStiffness"/> from <see cref="AxialStiffnessUnit.PoundForce"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AxialStiffness FromPoundsForce(double poundsforce) => new AxialStiffness(poundsforce, AxialStiffnessUnit.PoundForce);

        /// <summary>
        ///     Creates a <see cref="AxialStiffness"/> from <see cref="AxialStiffnessUnit.ShortTonForce"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AxialStiffness FromShortTonsForce(double shorttonsforce) => new AxialStiffness(shorttonsforce, AxialStiffnessUnit.ShortTonForce);

        /// <summary>
        ///     Creates a <see cref="AxialStiffness"/> from <see cref="AxialStiffnessUnit.TonneForce"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static AxialStiffness FromTonnesForce(double tonnesforce) => new AxialStiffness(tonnesforce, AxialStiffnessUnit.TonneForce);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="AxialStiffnessUnit" /> to <see cref="AxialStiffness" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>AxialStiffness unit value.</returns>
        public static AxialStiffness From(double value, AxialStiffnessUnit fromUnit)
        {
            return new AxialStiffness(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(AxialStiffnessUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public AxialStiffness ToUnit(AxialStiffnessUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new AxialStiffness(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            return Unit switch
            {
                AxialStiffnessUnit.Decanewton => (_value) * 1e1d,
                AxialStiffnessUnit.Dyn => _value/1e5,
                AxialStiffnessUnit.KilogramForce => _value*9.80665002864,
                AxialStiffnessUnit.Kilonewton => (_value) * 1e3d,
                AxialStiffnessUnit.KiloPond => _value*9.80665002864,
                AxialStiffnessUnit.KilopoundForce => _value*4448.2216152605095551842641431421,
                AxialStiffnessUnit.Meganewton => (_value) * 1e6d,
                AxialStiffnessUnit.Micronewton => (_value) * 1e-6d,
                AxialStiffnessUnit.Millinewton => (_value) * 1e-3d,
                AxialStiffnessUnit.Newton => _value,
                AxialStiffnessUnit.OunceForce => _value*2.780138509537812e-1,
                AxialStiffnessUnit.Poundal => _value*0.13825502798973041652092282466083,
                AxialStiffnessUnit.PoundForce => _value*4.4482216152605095551842641431421,
                AxialStiffnessUnit.ShortTonForce => _value*8.896443230521e3,
                AxialStiffnessUnit.TonneForce => _value*9.80665002864e3,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private double GetValueAs(AxialStiffnessUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                AxialStiffnessUnit.Decanewton => (baseUnitValue) / 1e1d,
                AxialStiffnessUnit.Dyn => baseUnitValue*1e5,
                AxialStiffnessUnit.KilogramForce => baseUnitValue/9.80665002864,
                AxialStiffnessUnit.Kilonewton => (baseUnitValue) / 1e3d,
                AxialStiffnessUnit.KiloPond => baseUnitValue/9.80665002864,
                AxialStiffnessUnit.KilopoundForce => baseUnitValue/4448.2216152605095551842641431421,
                AxialStiffnessUnit.Meganewton => (baseUnitValue) / 1e6d,
                AxialStiffnessUnit.Micronewton => (baseUnitValue) / 1e-6d,
                AxialStiffnessUnit.Millinewton => (baseUnitValue) / 1e-3d,
                AxialStiffnessUnit.Newton => baseUnitValue,
                AxialStiffnessUnit.OunceForce => baseUnitValue/2.780138509537812e-1,
                AxialStiffnessUnit.Poundal => baseUnitValue/0.13825502798973041652092282466083,
                AxialStiffnessUnit.PoundForce => baseUnitValue/4.4482216152605095551842641431421,
                AxialStiffnessUnit.ShortTonForce => baseUnitValue/8.896443230521e3,
                AxialStiffnessUnit.TonneForce => baseUnitValue/9.80665002864e3,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion
    }
}

