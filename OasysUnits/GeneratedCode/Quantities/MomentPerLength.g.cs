//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using OasysUnits.InternalHelpers;
using OasysUnits.Units;

#nullable enable

// ReSharper disable once CheckNamespace

namespace OasysUnits
{
    /// <inheritdoc />
    /// <summary>
    ///     The magnitude of moment per unit length.
    /// </summary>
    [DataContract]
    public readonly partial struct MomentPerLength :
        IArithmeticQuantity<MomentPerLength, MomentPerLengthUnit, double>,
        IComparable,
        IComparable<MomentPerLength>,
        IConvertible,
        IEquatable<MomentPerLength>,
        IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 0)]
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 1)]
        private readonly MomentPerLengthUnit? _unit;

        static MomentPerLength()
        {
            BaseDimensions = new BaseDimensions(1, 1, -2, 0, 0, 0, 0);
            BaseUnit = MomentPerLengthUnit.NewtonMeterPerMeter;
            Units = Enum.GetValues(typeof(MomentPerLengthUnit)).Cast<MomentPerLengthUnit>().ToArray();
            Zero = new MomentPerLength(0, BaseUnit);
            Info = new QuantityInfo<MomentPerLengthUnit>("MomentPerLength",
                new UnitInfo<MomentPerLengthUnit>[]
                {
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter, "KilogramForceCentimetersPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.KilogramForceMeterPerCentimeter, "KilogramForceMetersPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.KilogramForceMeterPerMeter, "KilogramForceMetersPerMeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.KilogramForceMeterPerMillimeter, "KilogramForceMetersPerMillimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter, "KilogramForceMillimetersPerMillimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter, "KilonewtonCentimetersPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.KilonewtonMeterPerCentimeter, "KilonewtonMetersPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.KilonewtonMeterPerMeter, "KilonewtonMetersPerMeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.KilonewtonMeterPerMillimeter, "KilonewtonMetersPerMillimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter, "KilonewtonMillimetersPerMillimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.KilopoundForceFootPerFoot, "KilopoundForceFeetPerFoot", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.KilopoundForceFootPerInch, "KilopoundForceFeetPerInch", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.KilopoundForceInchPerInch, "KilopoundForceInchesPerInch", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter, "MeganewtonCentimetersPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.MeganewtonMeterPerCentimeter, "MeganewtonMetersPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.MeganewtonMeterPerMeter, "MeganewtonMetersPerMeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.MeganewtonMeterPerMillimeter, "MeganewtonMetersPerMillimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter, "MeganewtonMillimetersPerMillimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.NewtonCentimeterPerCentimeter, "NewtonCentimetersPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.NewtonMeterPerCentimeter, "NewtonMetersPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.NewtonMeterPerMeter, "NewtonMetersPerMeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.NewtonMeterPerMillimeter, "NewtonMetersPerMillimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.NewtonMillimeterPerMillimeter, "NewtonMillimetersPerMillimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.PoundForceFootPerFoot, "PoundForceFeetPerFoot", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.PoundForceFootPerInch, "PoundForceFeetPerInch", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.PoundForceFootPerYard, "PoundForceFeetPerYard", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.PoundForceInchPerInch, "PoundForceInchesPerInch", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.TonneForceCentimeterPerCentimeter, "TonneForceCentimetersPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.TonneForceMeterPerCentimeter, "TonneForceMetersPerCentimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.TonneForceMeterPerMeter, "TonneForceMetersPerMeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.TonneForceMeterPerMillimeter, "TonneForceMetersPerMillimeter", BaseUnits.Undefined),
                    new UnitInfo<MomentPerLengthUnit>(MomentPerLengthUnit.TonneForceMillimeterPerMillimeter, "TonneForceMillimetersPerMillimeter", BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions);

            DefaultConversionFunctions = new UnitConverter();
            RegisterDefaultConversions(DefaultConversionFunctions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public MomentPerLength(double value, MomentPerLengthUnit unit)
        {
            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public MomentPerLength(double value, UnitSystem unitSystem)
        {
            if (unitSystem is null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="MomentPerLength" /> instances.
        /// </summary>
        public static UnitConverter DefaultConversionFunctions { get; }

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<MomentPerLengthUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of MomentPerLength, which is NewtonMeterPerMeter. All conversions go via this value.
        /// </summary>
        public static MomentPerLengthUnit BaseUnit { get; }

        /// <summary>
        ///     All units of measurement for the MomentPerLength quantity.
        /// </summary>
        public static MomentPerLengthUnit[] Units { get; }

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit NewtonMeterPerMeter.
        /// </summary>
        public static MomentPerLength Zero { get; }

        /// <inheritdoc cref="Zero"/>
        public static MomentPerLength AdditiveIdentity => Zero;

        #endregion
 
        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        QuantityValue IQuantity.Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public MomentPerLengthUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<MomentPerLengthUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => MomentPerLength.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter"/>
        /// </summary>
        public double KilogramForceCentimetersPerCentimeter => As(MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.KilogramForceMeterPerCentimeter"/>
        /// </summary>
        public double KilogramForceMetersPerCentimeter => As(MomentPerLengthUnit.KilogramForceMeterPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.KilogramForceMeterPerMeter"/>
        /// </summary>
        public double KilogramForceMetersPerMeter => As(MomentPerLengthUnit.KilogramForceMeterPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.KilogramForceMeterPerMillimeter"/>
        /// </summary>
        public double KilogramForceMetersPerMillimeter => As(MomentPerLengthUnit.KilogramForceMeterPerMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter"/>
        /// </summary>
        public double KilogramForceMillimetersPerMillimeter => As(MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter"/>
        /// </summary>
        public double KilonewtonCentimetersPerCentimeter => As(MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.KilonewtonMeterPerCentimeter"/>
        /// </summary>
        public double KilonewtonMetersPerCentimeter => As(MomentPerLengthUnit.KilonewtonMeterPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.KilonewtonMeterPerMeter"/>
        /// </summary>
        public double KilonewtonMetersPerMeter => As(MomentPerLengthUnit.KilonewtonMeterPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.KilonewtonMeterPerMillimeter"/>
        /// </summary>
        public double KilonewtonMetersPerMillimeter => As(MomentPerLengthUnit.KilonewtonMeterPerMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter"/>
        /// </summary>
        public double KilonewtonMillimetersPerMillimeter => As(MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.KilopoundForceFootPerFoot"/>
        /// </summary>
        public double KilopoundForceFeetPerFoot => As(MomentPerLengthUnit.KilopoundForceFootPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.KilopoundForceFootPerInch"/>
        /// </summary>
        public double KilopoundForceFeetPerInch => As(MomentPerLengthUnit.KilopoundForceFootPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.KilopoundForceInchPerInch"/>
        /// </summary>
        public double KilopoundForceInchesPerInch => As(MomentPerLengthUnit.KilopoundForceInchPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter"/>
        /// </summary>
        public double MeganewtonCentimetersPerCentimeter => As(MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.MeganewtonMeterPerCentimeter"/>
        /// </summary>
        public double MeganewtonMetersPerCentimeter => As(MomentPerLengthUnit.MeganewtonMeterPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.MeganewtonMeterPerMeter"/>
        /// </summary>
        public double MeganewtonMetersPerMeter => As(MomentPerLengthUnit.MeganewtonMeterPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.MeganewtonMeterPerMillimeter"/>
        /// </summary>
        public double MeganewtonMetersPerMillimeter => As(MomentPerLengthUnit.MeganewtonMeterPerMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter"/>
        /// </summary>
        public double MeganewtonMillimetersPerMillimeter => As(MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.NewtonCentimeterPerCentimeter"/>
        /// </summary>
        public double NewtonCentimetersPerCentimeter => As(MomentPerLengthUnit.NewtonCentimeterPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.NewtonMeterPerCentimeter"/>
        /// </summary>
        public double NewtonMetersPerCentimeter => As(MomentPerLengthUnit.NewtonMeterPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.NewtonMeterPerMeter"/>
        /// </summary>
        public double NewtonMetersPerMeter => As(MomentPerLengthUnit.NewtonMeterPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.NewtonMeterPerMillimeter"/>
        /// </summary>
        public double NewtonMetersPerMillimeter => As(MomentPerLengthUnit.NewtonMeterPerMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.NewtonMillimeterPerMillimeter"/>
        /// </summary>
        public double NewtonMillimetersPerMillimeter => As(MomentPerLengthUnit.NewtonMillimeterPerMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.PoundForceFootPerFoot"/>
        /// </summary>
        public double PoundForceFeetPerFoot => As(MomentPerLengthUnit.PoundForceFootPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.PoundForceFootPerInch"/>
        /// </summary>
        public double PoundForceFeetPerInch => As(MomentPerLengthUnit.PoundForceFootPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.PoundForceFootPerYard"/>
        /// </summary>
        public double PoundForceFeetPerYard => As(MomentPerLengthUnit.PoundForceFootPerYard);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.PoundForceInchPerInch"/>
        /// </summary>
        public double PoundForceInchesPerInch => As(MomentPerLengthUnit.PoundForceInchPerInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.TonneForceCentimeterPerCentimeter"/>
        /// </summary>
        public double TonneForceCentimetersPerCentimeter => As(MomentPerLengthUnit.TonneForceCentimeterPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.TonneForceMeterPerCentimeter"/>
        /// </summary>
        public double TonneForceMetersPerCentimeter => As(MomentPerLengthUnit.TonneForceMeterPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.TonneForceMeterPerMeter"/>
        /// </summary>
        public double TonneForceMetersPerMeter => As(MomentPerLengthUnit.TonneForceMeterPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.TonneForceMeterPerMillimeter"/>
        /// </summary>
        public double TonneForceMetersPerMillimeter => As(MomentPerLengthUnit.TonneForceMeterPerMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MomentPerLengthUnit.TonneForceMillimeterPerMillimeter"/>
        /// </summary>
        public double TonneForceMillimetersPerMillimeter => As(MomentPerLengthUnit.TonneForceMillimeterPerMillimeter);

        #endregion

        #region Static Methods

        /// <summary>
        /// Registers the default conversion functions in the given <see cref="UnitConverter"/> instance.
        /// </summary>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to register the default conversion functions in.</param>
        internal static void RegisterDefaultConversions(UnitConverter unitConverter)
        {
            // Register in unit converter: MomentPerLengthUnit -> BaseUnit
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.KilogramForceMeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.KilogramForceMeterPerMeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.KilogramForceMeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.KilonewtonMeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.KilonewtonMeterPerMeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.KilonewtonMeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.KilopoundForceFootPerFoot, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.KilopoundForceFootPerInch, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.KilopoundForceInchPerInch, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.MeganewtonMeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.MeganewtonMeterPerMeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.MeganewtonMeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonCentimeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMillimeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.PoundForceFootPerFoot, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.PoundForceFootPerInch, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.PoundForceFootPerYard, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.PoundForceInchPerInch, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.TonneForceCentimeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.TonneForceMeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.TonneForceMeterPerMeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.TonneForceMeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.TonneForceMillimeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMeter));

            // Register in unit converter: BaseUnit <-> BaseUnit
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.NewtonMeterPerMeter, quantity => quantity);

            // Register in unit converter: BaseUnit -> MomentPerLengthUnit
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilogramForceMeterPerCentimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.KilogramForceMeterPerCentimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilogramForceMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.KilogramForceMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilogramForceMeterPerMillimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.KilogramForceMeterPerMillimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilonewtonMeterPerCentimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.KilonewtonMeterPerCentimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilonewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.KilonewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilonewtonMeterPerMillimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.KilonewtonMeterPerMillimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilopoundForceFootPerFoot, quantity => quantity.ToUnit(MomentPerLengthUnit.KilopoundForceFootPerFoot));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilopoundForceFootPerInch, quantity => quantity.ToUnit(MomentPerLengthUnit.KilopoundForceFootPerInch));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilopoundForceInchPerInch, quantity => quantity.ToUnit(MomentPerLengthUnit.KilopoundForceInchPerInch));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.MeganewtonMeterPerCentimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.MeganewtonMeterPerCentimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.MeganewtonMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.MeganewtonMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.MeganewtonMeterPerMillimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.MeganewtonMeterPerMillimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.NewtonCentimeterPerCentimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonCentimeterPerCentimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.NewtonMeterPerCentimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerCentimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.NewtonMeterPerMillimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMeterPerMillimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.NewtonMillimeterPerMillimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.NewtonMillimeterPerMillimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.PoundForceFootPerFoot, quantity => quantity.ToUnit(MomentPerLengthUnit.PoundForceFootPerFoot));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.PoundForceFootPerInch, quantity => quantity.ToUnit(MomentPerLengthUnit.PoundForceFootPerInch));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.PoundForceFootPerYard, quantity => quantity.ToUnit(MomentPerLengthUnit.PoundForceFootPerYard));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.PoundForceInchPerInch, quantity => quantity.ToUnit(MomentPerLengthUnit.PoundForceInchPerInch));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.TonneForceCentimeterPerCentimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.TonneForceCentimeterPerCentimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.TonneForceMeterPerCentimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.TonneForceMeterPerCentimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.TonneForceMeterPerMeter, quantity => quantity.ToUnit(MomentPerLengthUnit.TonneForceMeterPerMeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.TonneForceMeterPerMillimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.TonneForceMeterPerMillimeter));
            unitConverter.SetConversionFunction<MomentPerLength>(MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.TonneForceMillimeterPerMillimeter, quantity => quantity.ToUnit(MomentPerLengthUnit.TonneForceMillimeterPerMillimeter));
        }

        internal static void MapGeneratedLocalizations(UnitAbbreviationsCache unitAbbreviationsCache)
        {
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"kgf·cm/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.KilogramForceMeterPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"kgf·m/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.KilogramForceMeterPerMeter, new CultureInfo("en-US"), false, true, new string[]{"kgf·m/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.KilogramForceMeterPerMillimeter, new CultureInfo("en-US"), false, true, new string[]{"kgf·m/mm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter, new CultureInfo("en-US"), false, true, new string[]{"kgf·mm/mm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"kN·cm/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.KilonewtonMeterPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"kN·m/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.KilonewtonMeterPerMeter, new CultureInfo("en-US"), false, true, new string[]{"kN·m/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.KilonewtonMeterPerMillimeter, new CultureInfo("en-US"), false, true, new string[]{"kN·m/mm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter, new CultureInfo("en-US"), false, true, new string[]{"kN·mm/mm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.KilopoundForceFootPerFoot, new CultureInfo("en-US"), false, true, new string[]{"kip·ft/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.KilopoundForceFootPerInch, new CultureInfo("en-US"), false, true, new string[]{"kip·ft/in"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.KilopoundForceInchPerInch, new CultureInfo("en-US"), false, true, new string[]{"kip·in/in"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"MN·cm/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.MeganewtonMeterPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"MN·m/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.MeganewtonMeterPerMeter, new CultureInfo("en-US"), false, true, new string[]{"MN·m/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.MeganewtonMeterPerMillimeter, new CultureInfo("en-US"), false, true, new string[]{"MN·m/mm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter, new CultureInfo("en-US"), false, true, new string[]{"MN·mm/mm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.NewtonCentimeterPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"N·cm/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.NewtonMeterPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"N·m/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.NewtonMeterPerMeter, new CultureInfo("en-US"), false, true, new string[]{"N·m/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.NewtonMeterPerMillimeter, new CultureInfo("en-US"), false, true, new string[]{"N·m/mm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.NewtonMillimeterPerMillimeter, new CultureInfo("en-US"), false, true, new string[]{"N·mm/mm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.PoundForceFootPerFoot, new CultureInfo("en-US"), false, true, new string[]{"lbf·ft/ft"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.PoundForceFootPerInch, new CultureInfo("en-US"), false, true, new string[]{"lbf·ft/in"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.PoundForceFootPerYard, new CultureInfo("en-US"), false, true, new string[]{"lbf·ft/yd"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.PoundForceInchPerInch, new CultureInfo("en-US"), false, true, new string[]{"lbf·in/in"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.TonneForceCentimeterPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"tf·cm/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.TonneForceMeterPerCentimeter, new CultureInfo("en-US"), false, true, new string[]{"tf·m/cm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.TonneForceMeterPerMeter, new CultureInfo("en-US"), false, true, new string[]{"tf·m/m"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.TonneForceMeterPerMillimeter, new CultureInfo("en-US"), false, true, new string[]{"tf·m/mm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MomentPerLengthUnit.TonneForceMillimeterPerMillimeter, new CultureInfo("en-US"), false, true, new string[]{"tf·mm/mm"});
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(MomentPerLengthUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static string GetAbbreviation(MomentPerLengthUnit unit, IFormatProvider? provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromKilogramForceCentimetersPerCentimeter(QuantityValue kilogramforcecentimeterspercentimeter)
        {
            double value = (double) kilogramforcecentimeterspercentimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.KilogramForceMeterPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromKilogramForceMetersPerCentimeter(QuantityValue kilogramforcemeterspercentimeter)
        {
            double value = (double) kilogramforcemeterspercentimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.KilogramForceMeterPerCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.KilogramForceMeterPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromKilogramForceMetersPerMeter(QuantityValue kilogramforcemeterspermeter)
        {
            double value = (double) kilogramforcemeterspermeter;
            return new MomentPerLength(value, MomentPerLengthUnit.KilogramForceMeterPerMeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.KilogramForceMeterPerMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromKilogramForceMetersPerMillimeter(QuantityValue kilogramforcemeterspermillimeter)
        {
            double value = (double) kilogramforcemeterspermillimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.KilogramForceMeterPerMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromKilogramForceMillimetersPerMillimeter(QuantityValue kilogramforcemillimeterspermillimeter)
        {
            double value = (double) kilogramforcemillimeterspermillimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromKilonewtonCentimetersPerCentimeter(QuantityValue kilonewtoncentimeterspercentimeter)
        {
            double value = (double) kilonewtoncentimeterspercentimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.KilonewtonMeterPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromKilonewtonMetersPerCentimeter(QuantityValue kilonewtonmeterspercentimeter)
        {
            double value = (double) kilonewtonmeterspercentimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.KilonewtonMeterPerCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.KilonewtonMeterPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromKilonewtonMetersPerMeter(QuantityValue kilonewtonmeterspermeter)
        {
            double value = (double) kilonewtonmeterspermeter;
            return new MomentPerLength(value, MomentPerLengthUnit.KilonewtonMeterPerMeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.KilonewtonMeterPerMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromKilonewtonMetersPerMillimeter(QuantityValue kilonewtonmeterspermillimeter)
        {
            double value = (double) kilonewtonmeterspermillimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.KilonewtonMeterPerMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromKilonewtonMillimetersPerMillimeter(QuantityValue kilonewtonmillimeterspermillimeter)
        {
            double value = (double) kilonewtonmillimeterspermillimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.KilopoundForceFootPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromKilopoundForceFeetPerFoot(QuantityValue kilopoundforcefeetperfoot)
        {
            double value = (double) kilopoundforcefeetperfoot;
            return new MomentPerLength(value, MomentPerLengthUnit.KilopoundForceFootPerFoot);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.KilopoundForceFootPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromKilopoundForceFeetPerInch(QuantityValue kilopoundforcefeetperinch)
        {
            double value = (double) kilopoundforcefeetperinch;
            return new MomentPerLength(value, MomentPerLengthUnit.KilopoundForceFootPerInch);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.KilopoundForceInchPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromKilopoundForceInchesPerInch(QuantityValue kilopoundforceinchesperinch)
        {
            double value = (double) kilopoundforceinchesperinch;
            return new MomentPerLength(value, MomentPerLengthUnit.KilopoundForceInchPerInch);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromMeganewtonCentimetersPerCentimeter(QuantityValue meganewtoncentimeterspercentimeter)
        {
            double value = (double) meganewtoncentimeterspercentimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.MeganewtonMeterPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromMeganewtonMetersPerCentimeter(QuantityValue meganewtonmeterspercentimeter)
        {
            double value = (double) meganewtonmeterspercentimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.MeganewtonMeterPerCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.MeganewtonMeterPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromMeganewtonMetersPerMeter(QuantityValue meganewtonmeterspermeter)
        {
            double value = (double) meganewtonmeterspermeter;
            return new MomentPerLength(value, MomentPerLengthUnit.MeganewtonMeterPerMeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.MeganewtonMeterPerMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromMeganewtonMetersPerMillimeter(QuantityValue meganewtonmeterspermillimeter)
        {
            double value = (double) meganewtonmeterspermillimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.MeganewtonMeterPerMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromMeganewtonMillimetersPerMillimeter(QuantityValue meganewtonmillimeterspermillimeter)
        {
            double value = (double) meganewtonmillimeterspermillimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.NewtonCentimeterPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromNewtonCentimetersPerCentimeter(QuantityValue newtoncentimeterspercentimeter)
        {
            double value = (double) newtoncentimeterspercentimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.NewtonCentimeterPerCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.NewtonMeterPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromNewtonMetersPerCentimeter(QuantityValue newtonmeterspercentimeter)
        {
            double value = (double) newtonmeterspercentimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.NewtonMeterPerCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.NewtonMeterPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromNewtonMetersPerMeter(QuantityValue newtonmeterspermeter)
        {
            double value = (double) newtonmeterspermeter;
            return new MomentPerLength(value, MomentPerLengthUnit.NewtonMeterPerMeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.NewtonMeterPerMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromNewtonMetersPerMillimeter(QuantityValue newtonmeterspermillimeter)
        {
            double value = (double) newtonmeterspermillimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.NewtonMeterPerMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.NewtonMillimeterPerMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromNewtonMillimetersPerMillimeter(QuantityValue newtonmillimeterspermillimeter)
        {
            double value = (double) newtonmillimeterspermillimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.NewtonMillimeterPerMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.PoundForceFootPerFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromPoundForceFeetPerFoot(QuantityValue poundforcefeetperfoot)
        {
            double value = (double) poundforcefeetperfoot;
            return new MomentPerLength(value, MomentPerLengthUnit.PoundForceFootPerFoot);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.PoundForceFootPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromPoundForceFeetPerInch(QuantityValue poundforcefeetperinch)
        {
            double value = (double) poundforcefeetperinch;
            return new MomentPerLength(value, MomentPerLengthUnit.PoundForceFootPerInch);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.PoundForceFootPerYard"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromPoundForceFeetPerYard(QuantityValue poundforcefeetperyard)
        {
            double value = (double) poundforcefeetperyard;
            return new MomentPerLength(value, MomentPerLengthUnit.PoundForceFootPerYard);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.PoundForceInchPerInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromPoundForceInchesPerInch(QuantityValue poundforceinchesperinch)
        {
            double value = (double) poundforceinchesperinch;
            return new MomentPerLength(value, MomentPerLengthUnit.PoundForceInchPerInch);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.TonneForceCentimeterPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromTonneForceCentimetersPerCentimeter(QuantityValue tonneforcecentimeterspercentimeter)
        {
            double value = (double) tonneforcecentimeterspercentimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.TonneForceCentimeterPerCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.TonneForceMeterPerCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromTonneForceMetersPerCentimeter(QuantityValue tonneforcemeterspercentimeter)
        {
            double value = (double) tonneforcemeterspercentimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.TonneForceMeterPerCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.TonneForceMeterPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromTonneForceMetersPerMeter(QuantityValue tonneforcemeterspermeter)
        {
            double value = (double) tonneforcemeterspermeter;
            return new MomentPerLength(value, MomentPerLengthUnit.TonneForceMeterPerMeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.TonneForceMeterPerMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromTonneForceMetersPerMillimeter(QuantityValue tonneforcemeterspermillimeter)
        {
            double value = (double) tonneforcemeterspermillimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.TonneForceMeterPerMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MomentPerLength"/> from <see cref="MomentPerLengthUnit.TonneForceMillimeterPerMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MomentPerLength FromTonneForceMillimetersPerMillimeter(QuantityValue tonneforcemillimeterspermillimeter)
        {
            double value = (double) tonneforcemillimeterspermillimeter;
            return new MomentPerLength(value, MomentPerLengthUnit.TonneForceMillimeterPerMillimeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MomentPerLengthUnit" /> to <see cref="MomentPerLength" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MomentPerLength unit value.</returns>
        public static MomentPerLength From(QuantityValue value, MomentPerLengthUnit fromUnit)
        {
            return new MomentPerLength((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="OasysUnitsException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="OasysUnitsException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static MomentPerLength Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="OasysUnitsException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="OasysUnitsException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static MomentPerLength Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<MomentPerLength, MomentPerLengthUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(string? str, out MomentPerLength result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParse(string? str, IFormatProvider? provider, out MomentPerLength result)
        {
            return QuantityParser.Default.TryParse<MomentPerLength, MomentPerLengthUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="OasysUnitsException">Error parsing string.</exception>
        public static MomentPerLengthUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="OasysUnitsException">Error parsing string.</exception>
        public static MomentPerLengthUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse<MomentPerLengthUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out OasysUnits.Units.MomentPerLengthUnit)"/>
        public static bool TryParseUnit(string str, out MomentPerLengthUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider? provider, out MomentPerLengthUnit unit)
        {
            return UnitParser.Default.TryParse<MomentPerLengthUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static MomentPerLength operator -(MomentPerLength right)
        {
            return new MomentPerLength(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="MomentPerLength"/> from adding two <see cref="MomentPerLength"/>.</summary>
        public static MomentPerLength operator +(MomentPerLength left, MomentPerLength right)
        {
            return new MomentPerLength(left.Value + right.ToUnit(left.Unit).Value, left.Unit);
        }

        /// <summary>Get <see cref="MomentPerLength"/> from subtracting two <see cref="MomentPerLength"/>.</summary>
        public static MomentPerLength operator -(MomentPerLength left, MomentPerLength right)
        {
            return new MomentPerLength(left.Value - right.ToUnit(left.Unit).Value, left.Unit);
        }

        /// <summary>Get <see cref="MomentPerLength"/> from multiplying value and <see cref="MomentPerLength"/>.</summary>
        public static MomentPerLength operator *(double left, MomentPerLength right)
        {
            return new MomentPerLength(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="MomentPerLength"/> from multiplying value and <see cref="MomentPerLength"/>.</summary>
        public static MomentPerLength operator *(MomentPerLength left, double right)
        {
            return new MomentPerLength(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="MomentPerLength"/> from dividing <see cref="MomentPerLength"/> by value.</summary>
        public static MomentPerLength operator /(MomentPerLength left, double right)
        {
            return new MomentPerLength(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="MomentPerLength"/> by <see cref="MomentPerLength"/>.</summary>
        public static double operator /(MomentPerLength left, MomentPerLength right)
        {
            return left.NewtonMetersPerMeter / right.NewtonMetersPerMeter;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(MomentPerLength left, MomentPerLength right)
        {
            return left.Value <= right.ToUnit(left.Unit).Value;
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(MomentPerLength left, MomentPerLength right)
        {
            return left.Value >= right.ToUnit(left.Unit).Value;
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(MomentPerLength left, MomentPerLength right)
        {
            return left.Value < right.ToUnit(left.Unit).Value;
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(MomentPerLength left, MomentPerLength right)
        {
            return left.Value > right.ToUnit(left.Unit).Value;
        }

        // We use obsolete attribute to communicate the preferred equality members to use.
        // CS0809: Obsolete member 'memberA' overrides non-obsolete member 'memberB'.
        #pragma warning disable CS0809

        /// <summary>Indicates strict equality of two <see cref="MomentPerLength"/> quantities, where both <see cref="Value" /> and <see cref="Unit" /> are exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(MomentPerLength, double, ComparisonType)"/> to check equality across different units and to specify a floating-point number error tolerance.</remarks>
        [Obsolete("For null checks, use `x is null` syntax to not invoke overloads. For quantity comparisons, use Equals(MomentPerLength, double, ComparisonType) to check equality across different units and to specify a floating-point number error tolerance.")]
        public static bool operator ==(MomentPerLength left, MomentPerLength right)
        {
            return left.Equals(right);
        }

        /// <summary>Indicates strict inequality of two <see cref="MomentPerLength"/> quantities, where both <see cref="Value" /> and <see cref="Unit" /> are exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(MomentPerLength, double, ComparisonType)"/> to check equality across different units and to specify a floating-point number error tolerance.</remarks>
        [Obsolete("For null checks, use `x is not null` syntax to not invoke overloads. For quantity comparisons, use Equals(MomentPerLength, double, ComparisonType) to check equality across different units and to specify a floating-point number error tolerance.")]
        public static bool operator !=(MomentPerLength left, MomentPerLength right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="MomentPerLength"/> quantities, where both <see cref="Value" /> and <see cref="Unit" /> are exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(MomentPerLength, double, ComparisonType)"/> to check equality across different units and to specify a floating-point number error tolerance.</remarks>
        [Obsolete("Consider using Equals(MomentPerLength, double, ComparisonType) to check equality across different units and to specify a floating-point number error tolerance.")]
        public override bool Equals(object? obj)
        {
            if (obj is null || !(obj is MomentPerLength otherQuantity))
                return false;

            return Equals(otherQuantity);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="MomentPerLength"/> quantities, where both <see cref="Value" /> and <see cref="Unit" /> are exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(MomentPerLength, double, ComparisonType)"/> to check equality across different units and to specify a floating-point number error tolerance.</remarks>
        [Obsolete("Consider using Equals(MomentPerLength, double, ComparisonType) to check equality across different units and to specify a floating-point number error tolerance.")]
        public bool Equals(MomentPerLength other)
        {
            return new { Value, Unit }.Equals(new { other.Value, other.Unit });
        }

        #pragma warning restore CS0809

        /// <summary>Compares the current <see cref="MomentPerLength"/> with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other when converted to the same unit.</summary>
        /// <param name="obj">An object to compare with this instance.</param>
        /// <exception cref="T:System.ArgumentException">
        ///    <paramref name="obj" /> is not the same type as this instance.
        /// </exception>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="obj" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="obj" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="obj" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(object? obj)
        {
            if (obj is null) throw new ArgumentNullException(nameof(obj));
            if (!(obj is MomentPerLength otherQuantity)) throw new ArgumentException("Expected type MomentPerLength.", nameof(obj));

            return CompareTo(otherQuantity);
        }

        /// <summary>Compares the current <see cref="MomentPerLength"/> with another <see cref="MomentPerLength"/> and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other when converted to the same unit.</summary>
        /// <param name="other">A quantity to compare with this instance.</param>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(MomentPerLength other)
        {
            return _value.CompareTo(other.ToUnit(this.Unit).Value);
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another MomentPerLength within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating-point operations and using double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(MomentPerLength other, double tolerance, ComparisonType comparisonType)
        {
            if (tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return OasysUnits.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current MomentPerLength.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(MomentPerLengthUnit unit)
        {
            if (Unit == unit)
                return Value;

            return ToUnit(unit).Value;
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if (unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if (!(unit is MomentPerLengthUnit typedUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(MomentPerLengthUnit)} is supported.", nameof(unit));

            return (double)As(typedUnit);
        }

        /// <inheritdoc />
        double IValueQuantity<double>.As(Enum unit)
        {
            if (!(unit is MomentPerLengthUnit typedUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(MomentPerLengthUnit)} is supported.", nameof(unit));

            return As(typedUnit);
        }

        /// <summary>
        ///     Converts this MomentPerLength to another MomentPerLength with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <returns>A MomentPerLength with the specified unit.</returns>
        public MomentPerLength ToUnit(MomentPerLengthUnit unit)
        {
            return ToUnit(unit, DefaultConversionFunctions);
        }

        /// <summary>
        ///     Converts this <see cref="MomentPerLength"/> to another <see cref="MomentPerLength"/> using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to use for the conversion.</param>
        /// <returns>A MomentPerLength with the specified unit.</returns>
        public MomentPerLength ToUnit(MomentPerLengthUnit unit, UnitConverter unitConverter)
        {
            if (TryToUnit(unit, out var converted))
            {
                // Try to convert using the auto-generated conversion methods.
                return converted!.Value;
            }
            else if (unitConverter.TryGetConversionFunction((typeof(MomentPerLength), Unit, typeof(MomentPerLength), unit), out var conversionFunction))
            {
                // See if the unit converter has an extensibility conversion registered.
                return (MomentPerLength)conversionFunction(this);
            }
            else if (Unit != BaseUnit)
            {
                // Conversion to requested unit NOT found. Try to convert to BaseUnit, and then from BaseUnit to requested unit.
                var inBaseUnits = ToUnit(BaseUnit);
                return inBaseUnits.ToUnit(unit);
            }
            else
            {
                // No possible conversion
                throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        /// <summary>
        ///     Attempts to convert this <see cref="MomentPerLength"/> to another <see cref="MomentPerLength"/> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <param name="converted">The converted <see cref="MomentPerLength"/> in <paramref name="unit"/>, if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        private bool TryToUnit(MomentPerLengthUnit unit, [NotNullWhen(true)] out MomentPerLength? converted)
        {
            if (Unit == unit)
            {
                converted = this;
                return true;
            }

            MomentPerLength? convertedOrNull = (Unit, unit) switch
            {
                // MomentPerLengthUnit -> BaseUnit
                (MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 9.80665002864, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.KilogramForceMeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 980.665002864, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.KilogramForceMeterPerMeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 9.80665002864, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.KilogramForceMeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 9.80665002864e3, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 9.80665002864, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength((_value) * 1e3d, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.KilonewtonMeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength((_value * 1e2) * 1e3d, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.KilonewtonMeterPerMeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength((_value) * 1e3d, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.KilonewtonMeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength((_value * 1e3) * 1e3d, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength((_value) * 1e3d, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.KilopoundForceFootPerFoot, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 4448.2216152605095551842641431421, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.KilopoundForceFootPerInch, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 53378.659383126, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.KilopoundForceInchPerInch, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 4448.2216152605095551842641431421, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength((_value) * 1e6d, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.MeganewtonMeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength((_value * 1e2) * 1e6d, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.MeganewtonMeterPerMeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength((_value) * 1e6d, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.MeganewtonMeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength((_value * 1e3) * 1e6d, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength((_value) * 1e6d, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.NewtonCentimeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.NewtonMeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 1e2, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.NewtonMeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 1e3, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.NewtonMillimeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.PoundForceFootPerFoot, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 4.4482216152605095551842641431421, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.PoundForceFootPerInch, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 53.378659383126, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.PoundForceFootPerYard, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 1.48274053842017, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.PoundForceInchPerInch, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 4.4482216152605095551842641431421, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.TonneForceCentimeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 9.80665002864e3, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.TonneForceMeterPerCentimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 9.80665002864e5, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.TonneForceMeterPerMeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 9.80665002864e3, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.TonneForceMeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 9.80665002864e6, MomentPerLengthUnit.NewtonMeterPerMeter),
                (MomentPerLengthUnit.TonneForceMillimeterPerMillimeter, MomentPerLengthUnit.NewtonMeterPerMeter) => new MomentPerLength(_value * 9.80665002864e3, MomentPerLengthUnit.NewtonMeterPerMeter),

                // BaseUnit -> MomentPerLengthUnit
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter) => new MomentPerLength(_value / 9.80665002864, MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilogramForceMeterPerCentimeter) => new MomentPerLength(_value / 980.665002864, MomentPerLengthUnit.KilogramForceMeterPerCentimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilogramForceMeterPerMeter) => new MomentPerLength(_value / 9.80665002864, MomentPerLengthUnit.KilogramForceMeterPerMeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilogramForceMeterPerMillimeter) => new MomentPerLength(_value / 9.80665002864e3, MomentPerLengthUnit.KilogramForceMeterPerMillimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter) => new MomentPerLength(_value / 9.80665002864, MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter) => new MomentPerLength((_value) / 1e3d, MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilonewtonMeterPerCentimeter) => new MomentPerLength((_value / 1e2) / 1e3d, MomentPerLengthUnit.KilonewtonMeterPerCentimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilonewtonMeterPerMeter) => new MomentPerLength((_value) / 1e3d, MomentPerLengthUnit.KilonewtonMeterPerMeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilonewtonMeterPerMillimeter) => new MomentPerLength((_value / 1e3) / 1e3d, MomentPerLengthUnit.KilonewtonMeterPerMillimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter) => new MomentPerLength((_value) / 1e3d, MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilopoundForceFootPerFoot) => new MomentPerLength(_value / 4448.2216152605095551842641431421, MomentPerLengthUnit.KilopoundForceFootPerFoot),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilopoundForceFootPerInch) => new MomentPerLength(_value / 53378.659383126, MomentPerLengthUnit.KilopoundForceFootPerInch),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.KilopoundForceInchPerInch) => new MomentPerLength(_value / 4448.2216152605095551842641431421, MomentPerLengthUnit.KilopoundForceInchPerInch),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter) => new MomentPerLength((_value) / 1e6d, MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.MeganewtonMeterPerCentimeter) => new MomentPerLength((_value / 1e2) / 1e6d, MomentPerLengthUnit.MeganewtonMeterPerCentimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.MeganewtonMeterPerMeter) => new MomentPerLength((_value) / 1e6d, MomentPerLengthUnit.MeganewtonMeterPerMeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.MeganewtonMeterPerMillimeter) => new MomentPerLength((_value / 1e3) / 1e6d, MomentPerLengthUnit.MeganewtonMeterPerMillimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter) => new MomentPerLength((_value) / 1e6d, MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.NewtonCentimeterPerCentimeter) => new MomentPerLength(_value, MomentPerLengthUnit.NewtonCentimeterPerCentimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.NewtonMeterPerCentimeter) => new MomentPerLength(_value / 1e2, MomentPerLengthUnit.NewtonMeterPerCentimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.NewtonMeterPerMillimeter) => new MomentPerLength(_value / 1e3, MomentPerLengthUnit.NewtonMeterPerMillimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.NewtonMillimeterPerMillimeter) => new MomentPerLength(_value, MomentPerLengthUnit.NewtonMillimeterPerMillimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.PoundForceFootPerFoot) => new MomentPerLength(_value / 4.4482216152605095551842641431421, MomentPerLengthUnit.PoundForceFootPerFoot),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.PoundForceFootPerInch) => new MomentPerLength(_value / 53.378659383126, MomentPerLengthUnit.PoundForceFootPerInch),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.PoundForceFootPerYard) => new MomentPerLength(_value / 1.48274053842017, MomentPerLengthUnit.PoundForceFootPerYard),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.PoundForceInchPerInch) => new MomentPerLength(_value / 4.4482216152605095551842641431421, MomentPerLengthUnit.PoundForceInchPerInch),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.TonneForceCentimeterPerCentimeter) => new MomentPerLength(_value / 9.80665002864e3, MomentPerLengthUnit.TonneForceCentimeterPerCentimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.TonneForceMeterPerCentimeter) => new MomentPerLength(_value / 9.80665002864e5, MomentPerLengthUnit.TonneForceMeterPerCentimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.TonneForceMeterPerMeter) => new MomentPerLength(_value / 9.80665002864e3, MomentPerLengthUnit.TonneForceMeterPerMeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.TonneForceMeterPerMillimeter) => new MomentPerLength(_value / 9.80665002864e6, MomentPerLengthUnit.TonneForceMeterPerMillimeter),
                (MomentPerLengthUnit.NewtonMeterPerMeter, MomentPerLengthUnit.TonneForceMillimeterPerMillimeter) => new MomentPerLength(_value / 9.80665002864e3, MomentPerLengthUnit.TonneForceMillimeterPerMillimeter),

                _ => null
            };

            if (convertedOrNull is null)
            {
                converted = default;
                return false;
            }

            converted = convertedOrNull.Value;
            return true;
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if (!(unit is MomentPerLengthUnit typedUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(MomentPerLengthUnit)} is supported.", nameof(unit));

            return ToUnit(typedUnit, DefaultConversionFunctions);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public MomentPerLength ToUnit(UnitSystem unitSystem)
        {
            if (unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<MomentPerLengthUnit> IQuantity<MomentPerLengthUnit>.ToUnit(MomentPerLengthUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<MomentPerLengthUnit> IQuantity<MomentPerLengthUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IValueQuantity<double> IValueQuantity<double>.ToUnit(Enum unit)
        {
            if (unit is not MomentPerLengthUnit typedUnit)
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(MomentPerLengthUnit)} is supported.", nameof(unit));

            return ToUnit(typedUnit);
        }

        /// <inheritdoc />
        IValueQuantity<double> IValueQuantity<double>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public string ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentCulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string? format)
        {
            return ToString(format, CultureInfo.CurrentCulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentCulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string? format, IFormatProvider? provider)
        {
            return QuantityFormatter.Format<MomentPerLengthUnit>(this, format, provider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider? provider)
        {
            throw new InvalidCastException($"Converting {typeof(MomentPerLength)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider? provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider? provider)
        {
            throw new InvalidCastException($"Converting {typeof(MomentPerLength)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider? provider)
        {
            throw new InvalidCastException($"Converting {typeof(MomentPerLength)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider? provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider? provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider? provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider? provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider? provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider? provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider? provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider? provider)
        {
            if (conversionType == typeof(MomentPerLength))
                return this;
            else if (conversionType == typeof(MomentPerLengthUnit))
                return Unit;
            else if (conversionType == typeof(QuantityInfo))
                return MomentPerLength.Info;
            else if (conversionType == typeof(BaseDimensions))
                return MomentPerLength.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(MomentPerLength)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider? provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider? provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider? provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
