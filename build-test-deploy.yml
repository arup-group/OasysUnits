# https://aka.ms/yaml

trigger:
- main

variables:
  - group: s3PushInstallers
  - group: pipeline-tokens
  - name: configuration
    value: Release

pool: 'vs17_8'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  displayName: 'Restoring NuGet packages'
  inputs:
      command: 'restore'
      restoreSolution: 'OasysUnits.sln'

- task: VSBuild@1
  displayName: 'Building project in $(configuration)'
  inputs:
    solution: 'OasysUnits.sln'
    msbuildArgs: '/p:AppxBundlePlatforms="x64" /p:AppxPackageDir="$(build.artifactStagingDirectory)\AppxPackages" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /m /nr:false'
    platform: 'Any CPU'
    configuration: '$(configuration)'
    clean: true
  env:
    MSBUILDDISABLENODEREUSE: 1

- powershell: |
    dotnet test --collect:"XPlat Code Coverage" /TestAdapterPath:$env:UserProfile\.nuget\packages\coverlet.collector\3.2.0\build --results-directory .\results\unitTests --no-restore --logger trx .\Artifacts\OasysUnits.Tests\net6.0\OasysUnits.Tests.dll
    dotnet test --collect:"XPlat Code Coverage" /TestAdapterPath:$env:UserProfile\.nuget\packages\coverlet.collector\3.2.0\build --results-directory .\results\numberExtensions --no-restore --logger trx .\Artifacts\OasysUnits.NumberExtensions.Tests\net6.0\OasysUnits.NumberExtensions.Tests.dll
    dotnet test --collect:"XPlat Code Coverage" /TestAdapterPath:$env:UserProfile\.nuget\packages\coverlet.collector\3.2.0\build --results-directory .\results\serialization --no-restore --logger trx .\Artifacts\OasysUnits.Serialization.JsonNet.Tests\net6.0\OasysUnits.Serialization.JsonNet.Tests.dll
  displayName: dotnet test

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/results/**/coverage.cobertura.xml'
    pathToSources: '$(System.DefaultWorkingDirectory)'

- powershell: |
    $coverage_file = (Resolve-Path $(System.DefaultWorkingDirectory)/results/unitTests/*/coverage.cobertura.xml).Path
    echo $coverage_file
    $coverage_file_numberExtensions = (Resolve-Path $(System.DefaultWorkingDirectory)/results/numberExtensions/*/coverage.cobertura.xml).Path
    echo $coverage_file_numberExtensions
    $coverage_file_serialization = (Resolve-Path $(System.DefaultWorkingDirectory)/results/serialization/*/coverage.cobertura.xml).Path
    echo $coverage_file_serialization
    Copy-Item $coverage_file $(System.DefaultWorkingDirectory)\results\coverage.xml
    Copy-Item $coverage_file_numberExtensions $(System.DefaultWorkingDirectory)\results\coverage_numberExtensions.xml
    Copy-Item $coverage_file_serialization $(System.DefaultWorkingDirectory)\results\coverage_serialization.xml
    ls $(System.DefaultWorkingDirectory)\results\
    codecov -t $env:CODECOV_TOKEN --dir $(System.DefaultWorkingDirectory)\results --file coverage.xml -F unittests
    codecov -t $env:CODECOV_TOKEN --dir $(System.DefaultWorkingDirectory)\results --file coverage_numberExtensions.xml -F numberExtensions
    codecov -t $env:CODECOV_TOKEN --dir $(System.DefaultWorkingDirectory)\results --file coverage_serialization.xml -F serialization
  env:
    CODECOV_TOKEN: $(CODECOV_TOKEN)
  displayName: Upload Code Coverage to codecovio
  failOnStderr: true

- publish: $(System.DefaultWorkingDirectory)\results\coverage.xml
  artifact: OasysUnits.Tests.Coverage

- publish: $(System.DefaultWorkingDirectory)\results\coverage_numberExtensions.xml
  artifact: OasysUnits.NumberExtensions.Tests.Coverage

- publish: $(System.DefaultWorkingDirectory)\results\coverage_serialization.xml
  artifact: OasysUnits.Serialization.JsonNet.Tests.Coverage

- task: PowerShell@2
  displayName: Check for existing tags
  inputs:
    targetType: 'inline'
    script: |
        $versionInfo = $(Get-Item .\Artifacts\OasysUnits\net48\OasysUnits.dll).VersionInfo
        echo $versionInfo
        $fullVersion = [array]${versionInfo}.ProductVersion.split('+')[0].split('.')
        $currentTime = $(Get-Date -Format "dddd MM/dd/yyyy HH:mm")
        $majorVersion = [string]$fullVersion[0]
        $minorVersion = [string]$fullVersion[1]
        $spVersion = [string]$fullVersion[2]
        $buildNumber = [string]$fullVersion[3]

        $tag = [array]@($exeName,$majorVersion,$minorVersion,$spVersion,$buildNumber)
        $tagNumbersOnly = [array]@($majorVersion,$minorVersion,$spVersion,$buildNumber)

        $dotSeparatedTag = $majorVersion + "." + $minorVersion + "." + $spVersion
        $underscoreSeparatedTag = $majorVersion + "_" + $minorVersion + "_" + $spVersion + "_" + $buildNumber
        $tagNumbersOnlyUnderscore = $majorVersion + "_" + $minorVersion + "_" + $spVersion + "_" + $buildNumber
        $tagNumbersOnlydot = $majorVersion + "." + $minorVersion + "." + $spVersion + "." + $buildNumber

        Write-Host ("##vso[task.setvariable variable=dotSeparatedTag]$dotSeparatedTag")
        git rev-parse OasysUnits/$dotSeparatedTag
        if($lastExitCode -eq 0){Write-Host ("##vso[task.setvariable variable=TAG_EXISTS]true")}
        if($lastExitCode -eq 0){
          $tagExists = 'true'
          echo $tagExists
        }
    errorActionPreference: 'continue'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    ignoreLASTEXITCODE: true
    
- template: install-azure-sign-tool.yml
- powershell: |
      AzureSignTool sign `
        --description-url "https://oasys-software.com" `
        --azure-key-vault-url "https://oasysevkv.vault.azure.net/" `
        --azure-key-vault-tenant-id "4ae48b41-0137-4599-8661-fc641fe77bea" `
        --azure-key-vault-client-id "$(AZURE_CLIENT_ID)" `
        --azure-key-vault-client-secret "$(AZURE_CLIENT_SECRET)" `
        --azure-key-vault-certificate "OasysCodeSigning" `
        --timestamp-rfc3161 "http://timestamp.digicert.com" `
        --verbose `
        $(Build.SourcesDirectory).\Artifacts\OasysUnits\net48\OasysUnits.dll `
        $(Build.SourcesDirectory).\Artifacts\OasysUnits\net48\OasysUnits.dll `
        $(Build.SourcesDirectory).\Artifacts\OasysUnits\net6.0\OasysUnits.dll `
        $(Build.SourcesDirectory).\Artifacts\OasysUnits\netstandard2.0\OasysUnits.dll `
        $(Build.SourcesDirectory).\Artifacts\OasysUnits.NumberExtensions\netstandard2.0\OasysUnits.NumberExtensions.dll `
        $(Build.SourcesDirectory).\Artifacts\OasysUnits.Serialization.JsonNet\netstandard2.0\OasysUnits.Serialization.JsonNet.dll
  displayName: Sign files before adding to installer
  env:
   AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
   AZURE_CLIENT_SECRET : $(AZURE_CLIENT_SECRET)
   
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: '**/OasysUnits.sln'
    arguments: '--configuration Release'
 
- task: DotNetCoreCLI@2
  displayName: Pack
  inputs:
   command: 'pack'
   packagesToPack: 'OasysUnits/OasysUnits.csproj'
   configuration: 'Release'

- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'github.com_MJCramp'
    repositoryName: 'arup-group/OasysUnits'
    action: 'edit'
    target: '$(Build.SourceVersion)'
    tag: 'OasysUnits/$(dotSeparatedTag)'
    title: 'OasysUnits version $(dotSeparatedTag)'
    releaseNotesSource: 'inline'
    releaseNotesInline: |
      Created from commit https://github.com/arup-group/OasysUnits/commit/$(Build.SourceVersion)
    assets: |
      $(System.DefaultWorkingDirectory)/**/*.nupkg
      $(System.DefaultWorkingDirectory)/**/*.snupkg
    assetUploadMode: 'replace'
    isDraft: true
    isPreRelease: true
    addChangeLog: false
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables.TAG_EXISTS, 'true'))
  displayName: 'Publishing assets to Github'
