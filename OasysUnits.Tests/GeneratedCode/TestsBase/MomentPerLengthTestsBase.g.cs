//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using OasysUnits.Tests.TestsBase;
using OasysUnits.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace OasysUnits.Tests
{
    /// <summary>
    /// Test of MomentPerLength.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MomentPerLengthTestsBase : QuantityTestsBase
    {
        protected abstract double KilogramForceCentimetersPerCentimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double KilogramForceMetersPerCentimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double KilogramForceMetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double KilogramForceMetersPerMillimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double KilogramForceMillimetersPerMillimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double KilonewtonCentimetersPerCentimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double KilonewtonMetersPerCentimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double KilonewtonMetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double KilonewtonMetersPerMillimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double KilonewtonMillimetersPerMillimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double KilopoundForceFeetPerFootInOneNewtonMeterPerMeter { get; }
        protected abstract double KilopoundForceFeetPerInchInOneNewtonMeterPerMeter { get; }
        protected abstract double KilopoundForceInchesPerFootInOneNewtonMeterPerMeter { get; }
        protected abstract double KilopoundForceInchesPerInchInOneNewtonMeterPerMeter { get; }
        protected abstract double MeganewtonCentimetersPerCentimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double MeganewtonMetersPerCentimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double MeganewtonMetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double MeganewtonMetersPerMillimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double MeganewtonMillimetersPerMillimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double NewtonCentimetersPerCentimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double NewtonMetersPerCentimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double NewtonMetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double NewtonMetersPerMillimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double NewtonMillimetersPerMillimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double PoundForceFeetPerFootInOneNewtonMeterPerMeter { get; }
        protected abstract double PoundForceFeetPerInchInOneNewtonMeterPerMeter { get; }
        protected abstract double PoundForceFeetPerYardInOneNewtonMeterPerMeter { get; }
        protected abstract double PoundForceInchesPerFootInOneNewtonMeterPerMeter { get; }
        protected abstract double PoundForceInchesPerInchInOneNewtonMeterPerMeter { get; }
        protected abstract double TonneForceCentimetersPerCentimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double TonneForceMetersPerCentimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double TonneForceMetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double TonneForceMetersPerMillimeterInOneNewtonMeterPerMeter { get; }
        protected abstract double TonneForceMillimetersPerMillimeterInOneNewtonMeterPerMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KilogramForceCentimetersPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramForceMetersPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramForceMetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramForceMetersPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramForceMillimetersPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonCentimetersPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonMetersPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonMetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonMetersPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonMillimetersPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilopoundForceFeetPerFootTolerance { get { return 1e-5; } }
        protected virtual double KilopoundForceFeetPerInchTolerance { get { return 1e-5; } }
        protected virtual double KilopoundForceInchesPerFootTolerance { get { return 1e-5; } }
        protected virtual double KilopoundForceInchesPerInchTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonCentimetersPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonMetersPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonMetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonMetersPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonMillimetersPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonCentimetersPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonMetersPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonMetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonMetersPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonMillimetersPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double PoundForceFeetPerFootTolerance { get { return 1e-5; } }
        protected virtual double PoundForceFeetPerInchTolerance { get { return 1e-5; } }
        protected virtual double PoundForceFeetPerYardTolerance { get { return 1e-5; } }
        protected virtual double PoundForceInchesPerFootTolerance { get { return 1e-5; } }
        protected virtual double PoundForceInchesPerInchTolerance { get { return 1e-5; } }
        protected virtual double TonneForceCentimetersPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double TonneForceMetersPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double TonneForceMetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double TonneForceMetersPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double TonneForceMillimetersPerMillimeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(MomentPerLengthUnit unit)
        {
            return unit switch
            {
                MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter => (KilogramForceCentimetersPerCentimeterInOneNewtonMeterPerMeter, KilogramForceCentimetersPerCentimeterTolerance),
                MomentPerLengthUnit.KilogramForceMeterPerCentimeter => (KilogramForceMetersPerCentimeterInOneNewtonMeterPerMeter, KilogramForceMetersPerCentimeterTolerance),
                MomentPerLengthUnit.KilogramForceMeterPerMeter => (KilogramForceMetersPerMeterInOneNewtonMeterPerMeter, KilogramForceMetersPerMeterTolerance),
                MomentPerLengthUnit.KilogramForceMeterPerMillimeter => (KilogramForceMetersPerMillimeterInOneNewtonMeterPerMeter, KilogramForceMetersPerMillimeterTolerance),
                MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter => (KilogramForceMillimetersPerMillimeterInOneNewtonMeterPerMeter, KilogramForceMillimetersPerMillimeterTolerance),
                MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter => (KilonewtonCentimetersPerCentimeterInOneNewtonMeterPerMeter, KilonewtonCentimetersPerCentimeterTolerance),
                MomentPerLengthUnit.KilonewtonMeterPerCentimeter => (KilonewtonMetersPerCentimeterInOneNewtonMeterPerMeter, KilonewtonMetersPerCentimeterTolerance),
                MomentPerLengthUnit.KilonewtonMeterPerMeter => (KilonewtonMetersPerMeterInOneNewtonMeterPerMeter, KilonewtonMetersPerMeterTolerance),
                MomentPerLengthUnit.KilonewtonMeterPerMillimeter => (KilonewtonMetersPerMillimeterInOneNewtonMeterPerMeter, KilonewtonMetersPerMillimeterTolerance),
                MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter => (KilonewtonMillimetersPerMillimeterInOneNewtonMeterPerMeter, KilonewtonMillimetersPerMillimeterTolerance),
                MomentPerLengthUnit.KilopoundForceFootPerFoot => (KilopoundForceFeetPerFootInOneNewtonMeterPerMeter, KilopoundForceFeetPerFootTolerance),
                MomentPerLengthUnit.KilopoundForceFootPerInch => (KilopoundForceFeetPerInchInOneNewtonMeterPerMeter, KilopoundForceFeetPerInchTolerance),
                MomentPerLengthUnit.KilopoundForceInchPerFoot => (KilopoundForceInchesPerFootInOneNewtonMeterPerMeter, KilopoundForceInchesPerFootTolerance),
                MomentPerLengthUnit.KilopoundForceInchPerInch => (KilopoundForceInchesPerInchInOneNewtonMeterPerMeter, KilopoundForceInchesPerInchTolerance),
                MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter => (MeganewtonCentimetersPerCentimeterInOneNewtonMeterPerMeter, MeganewtonCentimetersPerCentimeterTolerance),
                MomentPerLengthUnit.MeganewtonMeterPerCentimeter => (MeganewtonMetersPerCentimeterInOneNewtonMeterPerMeter, MeganewtonMetersPerCentimeterTolerance),
                MomentPerLengthUnit.MeganewtonMeterPerMeter => (MeganewtonMetersPerMeterInOneNewtonMeterPerMeter, MeganewtonMetersPerMeterTolerance),
                MomentPerLengthUnit.MeganewtonMeterPerMillimeter => (MeganewtonMetersPerMillimeterInOneNewtonMeterPerMeter, MeganewtonMetersPerMillimeterTolerance),
                MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter => (MeganewtonMillimetersPerMillimeterInOneNewtonMeterPerMeter, MeganewtonMillimetersPerMillimeterTolerance),
                MomentPerLengthUnit.NewtonCentimeterPerCentimeter => (NewtonCentimetersPerCentimeterInOneNewtonMeterPerMeter, NewtonCentimetersPerCentimeterTolerance),
                MomentPerLengthUnit.NewtonMeterPerCentimeter => (NewtonMetersPerCentimeterInOneNewtonMeterPerMeter, NewtonMetersPerCentimeterTolerance),
                MomentPerLengthUnit.NewtonMeterPerMeter => (NewtonMetersPerMeterInOneNewtonMeterPerMeter, NewtonMetersPerMeterTolerance),
                MomentPerLengthUnit.NewtonMeterPerMillimeter => (NewtonMetersPerMillimeterInOneNewtonMeterPerMeter, NewtonMetersPerMillimeterTolerance),
                MomentPerLengthUnit.NewtonMillimeterPerMillimeter => (NewtonMillimetersPerMillimeterInOneNewtonMeterPerMeter, NewtonMillimetersPerMillimeterTolerance),
                MomentPerLengthUnit.PoundForceFootPerFoot => (PoundForceFeetPerFootInOneNewtonMeterPerMeter, PoundForceFeetPerFootTolerance),
                MomentPerLengthUnit.PoundForceFootPerInch => (PoundForceFeetPerInchInOneNewtonMeterPerMeter, PoundForceFeetPerInchTolerance),
                MomentPerLengthUnit.PoundForceFootPerYard => (PoundForceFeetPerYardInOneNewtonMeterPerMeter, PoundForceFeetPerYardTolerance),
                MomentPerLengthUnit.PoundForceInchPerFoot => (PoundForceInchesPerFootInOneNewtonMeterPerMeter, PoundForceInchesPerFootTolerance),
                MomentPerLengthUnit.PoundForceInchPerInch => (PoundForceInchesPerInchInOneNewtonMeterPerMeter, PoundForceInchesPerInchTolerance),
                MomentPerLengthUnit.TonneForceCentimeterPerCentimeter => (TonneForceCentimetersPerCentimeterInOneNewtonMeterPerMeter, TonneForceCentimetersPerCentimeterTolerance),
                MomentPerLengthUnit.TonneForceMeterPerCentimeter => (TonneForceMetersPerCentimeterInOneNewtonMeterPerMeter, TonneForceMetersPerCentimeterTolerance),
                MomentPerLengthUnit.TonneForceMeterPerMeter => (TonneForceMetersPerMeterInOneNewtonMeterPerMeter, TonneForceMetersPerMeterTolerance),
                MomentPerLengthUnit.TonneForceMeterPerMillimeter => (TonneForceMetersPerMillimeterInOneNewtonMeterPerMeter, TonneForceMetersPerMillimeterTolerance),
                MomentPerLengthUnit.TonneForceMillimeterPerMillimeter => (TonneForceMillimetersPerMillimeterInOneNewtonMeterPerMeter, TonneForceMillimetersPerMillimeterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter },
            new object[] { MomentPerLengthUnit.KilogramForceMeterPerCentimeter },
            new object[] { MomentPerLengthUnit.KilogramForceMeterPerMeter },
            new object[] { MomentPerLengthUnit.KilogramForceMeterPerMillimeter },
            new object[] { MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter },
            new object[] { MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter },
            new object[] { MomentPerLengthUnit.KilonewtonMeterPerCentimeter },
            new object[] { MomentPerLengthUnit.KilonewtonMeterPerMeter },
            new object[] { MomentPerLengthUnit.KilonewtonMeterPerMillimeter },
            new object[] { MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter },
            new object[] { MomentPerLengthUnit.KilopoundForceFootPerFoot },
            new object[] { MomentPerLengthUnit.KilopoundForceFootPerInch },
            new object[] { MomentPerLengthUnit.KilopoundForceInchPerFoot },
            new object[] { MomentPerLengthUnit.KilopoundForceInchPerInch },
            new object[] { MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter },
            new object[] { MomentPerLengthUnit.MeganewtonMeterPerCentimeter },
            new object[] { MomentPerLengthUnit.MeganewtonMeterPerMeter },
            new object[] { MomentPerLengthUnit.MeganewtonMeterPerMillimeter },
            new object[] { MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter },
            new object[] { MomentPerLengthUnit.NewtonCentimeterPerCentimeter },
            new object[] { MomentPerLengthUnit.NewtonMeterPerCentimeter },
            new object[] { MomentPerLengthUnit.NewtonMeterPerMeter },
            new object[] { MomentPerLengthUnit.NewtonMeterPerMillimeter },
            new object[] { MomentPerLengthUnit.NewtonMillimeterPerMillimeter },
            new object[] { MomentPerLengthUnit.PoundForceFootPerFoot },
            new object[] { MomentPerLengthUnit.PoundForceFootPerInch },
            new object[] { MomentPerLengthUnit.PoundForceFootPerYard },
            new object[] { MomentPerLengthUnit.PoundForceInchPerFoot },
            new object[] { MomentPerLengthUnit.PoundForceInchPerInch },
            new object[] { MomentPerLengthUnit.TonneForceCentimeterPerCentimeter },
            new object[] { MomentPerLengthUnit.TonneForceMeterPerCentimeter },
            new object[] { MomentPerLengthUnit.TonneForceMeterPerMeter },
            new object[] { MomentPerLengthUnit.TonneForceMeterPerMillimeter },
            new object[] { MomentPerLengthUnit.TonneForceMillimeterPerMillimeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new MomentPerLength();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MomentPerLengthUnit.NewtonMeterPerMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MomentPerLength(double.PositiveInfinity, MomentPerLengthUnit.NewtonMeterPerMeter));
            Assert.Throws<ArgumentException>(() => new MomentPerLength(double.NegativeInfinity, MomentPerLengthUnit.NewtonMeterPerMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MomentPerLength(double.NaN, MomentPerLengthUnit.NewtonMeterPerMeter));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new MomentPerLength(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new MomentPerLength(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (MomentPerLength) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void MomentPerLength_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new MomentPerLength(1, MomentPerLengthUnit.NewtonMeterPerMeter);

            QuantityInfo<MomentPerLengthUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(MomentPerLength.Zero, quantityInfo.Zero);
            Assert.Equal("MomentPerLength", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<MomentPerLengthUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void NewtonMeterPerMeterToMomentPerLengthUnits()
        {
            MomentPerLength newtonmeterpermeter = MomentPerLength.FromNewtonMetersPerMeter(1);
            AssertEx.EqualTolerance(KilogramForceCentimetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.KilogramForceCentimetersPerCentimeter, KilogramForceCentimetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramForceMetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.KilogramForceMetersPerCentimeter, KilogramForceMetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramForceMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.KilogramForceMetersPerMeter, KilogramForceMetersPerMeterTolerance);
            AssertEx.EqualTolerance(KilogramForceMetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.KilogramForceMetersPerMillimeter, KilogramForceMetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilogramForceMillimetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.KilogramForceMillimetersPerMillimeter, KilogramForceMillimetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonCentimetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.KilonewtonCentimetersPerCentimeter, KilonewtonCentimetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.KilonewtonMetersPerCentimeter, KilonewtonMetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.KilonewtonMetersPerMeter, KilonewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.KilonewtonMetersPerMillimeter, KilonewtonMetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonMillimetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.KilonewtonMillimetersPerMillimeter, KilonewtonMillimetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilopoundForceFeetPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.KilopoundForceFeetPerFoot, KilopoundForceFeetPerFootTolerance);
            AssertEx.EqualTolerance(KilopoundForceFeetPerInchInOneNewtonMeterPerMeter, newtonmeterpermeter.KilopoundForceFeetPerInch, KilopoundForceFeetPerInchTolerance);
            AssertEx.EqualTolerance(KilopoundForceInchesPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.KilopoundForceInchesPerFoot, KilopoundForceInchesPerFootTolerance);
            AssertEx.EqualTolerance(KilopoundForceInchesPerInchInOneNewtonMeterPerMeter, newtonmeterpermeter.KilopoundForceInchesPerInch, KilopoundForceInchesPerInchTolerance);
            AssertEx.EqualTolerance(MeganewtonCentimetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.MeganewtonCentimetersPerCentimeter, MeganewtonCentimetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.MeganewtonMetersPerCentimeter, MeganewtonMetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.MeganewtonMetersPerMeter, MeganewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.MeganewtonMetersPerMillimeter, MeganewtonMetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(MeganewtonMillimetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.MeganewtonMillimetersPerMillimeter, MeganewtonMillimetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(NewtonCentimetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.NewtonCentimetersPerCentimeter, NewtonCentimetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(NewtonMetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.NewtonMetersPerCentimeter, NewtonMetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(NewtonMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(NewtonMetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.NewtonMetersPerMillimeter, NewtonMetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(NewtonMillimetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.NewtonMillimetersPerMillimeter, NewtonMillimetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(PoundForceFeetPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.PoundForceFeetPerFoot, PoundForceFeetPerFootTolerance);
            AssertEx.EqualTolerance(PoundForceFeetPerInchInOneNewtonMeterPerMeter, newtonmeterpermeter.PoundForceFeetPerInch, PoundForceFeetPerInchTolerance);
            AssertEx.EqualTolerance(PoundForceFeetPerYardInOneNewtonMeterPerMeter, newtonmeterpermeter.PoundForceFeetPerYard, PoundForceFeetPerYardTolerance);
            AssertEx.EqualTolerance(PoundForceInchesPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.PoundForceInchesPerFoot, PoundForceInchesPerFootTolerance);
            AssertEx.EqualTolerance(PoundForceInchesPerInchInOneNewtonMeterPerMeter, newtonmeterpermeter.PoundForceInchesPerInch, PoundForceInchesPerInchTolerance);
            AssertEx.EqualTolerance(TonneForceCentimetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.TonneForceCentimetersPerCentimeter, TonneForceCentimetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(TonneForceMetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.TonneForceMetersPerCentimeter, TonneForceMetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(TonneForceMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.TonneForceMetersPerMeter, TonneForceMetersPerMeterTolerance);
            AssertEx.EqualTolerance(TonneForceMetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.TonneForceMetersPerMillimeter, TonneForceMetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(TonneForceMillimetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.TonneForceMillimetersPerMillimeter, TonneForceMillimetersPerMillimeterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = MomentPerLength.From(1, MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter);
            AssertEx.EqualTolerance(1, quantity00.KilogramForceCentimetersPerCentimeter, KilogramForceCentimetersPerCentimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter, quantity00.Unit);

            var quantity01 = MomentPerLength.From(1, MomentPerLengthUnit.KilogramForceMeterPerCentimeter);
            AssertEx.EqualTolerance(1, quantity01.KilogramForceMetersPerCentimeter, KilogramForceMetersPerCentimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.KilogramForceMeterPerCentimeter, quantity01.Unit);

            var quantity02 = MomentPerLength.From(1, MomentPerLengthUnit.KilogramForceMeterPerMeter);
            AssertEx.EqualTolerance(1, quantity02.KilogramForceMetersPerMeter, KilogramForceMetersPerMeterTolerance);
            Assert.Equal(MomentPerLengthUnit.KilogramForceMeterPerMeter, quantity02.Unit);

            var quantity03 = MomentPerLength.From(1, MomentPerLengthUnit.KilogramForceMeterPerMillimeter);
            AssertEx.EqualTolerance(1, quantity03.KilogramForceMetersPerMillimeter, KilogramForceMetersPerMillimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.KilogramForceMeterPerMillimeter, quantity03.Unit);

            var quantity04 = MomentPerLength.From(1, MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter);
            AssertEx.EqualTolerance(1, quantity04.KilogramForceMillimetersPerMillimeter, KilogramForceMillimetersPerMillimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter, quantity04.Unit);

            var quantity05 = MomentPerLength.From(1, MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter);
            AssertEx.EqualTolerance(1, quantity05.KilonewtonCentimetersPerCentimeter, KilonewtonCentimetersPerCentimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter, quantity05.Unit);

            var quantity06 = MomentPerLength.From(1, MomentPerLengthUnit.KilonewtonMeterPerCentimeter);
            AssertEx.EqualTolerance(1, quantity06.KilonewtonMetersPerCentimeter, KilonewtonMetersPerCentimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.KilonewtonMeterPerCentimeter, quantity06.Unit);

            var quantity07 = MomentPerLength.From(1, MomentPerLengthUnit.KilonewtonMeterPerMeter);
            AssertEx.EqualTolerance(1, quantity07.KilonewtonMetersPerMeter, KilonewtonMetersPerMeterTolerance);
            Assert.Equal(MomentPerLengthUnit.KilonewtonMeterPerMeter, quantity07.Unit);

            var quantity08 = MomentPerLength.From(1, MomentPerLengthUnit.KilonewtonMeterPerMillimeter);
            AssertEx.EqualTolerance(1, quantity08.KilonewtonMetersPerMillimeter, KilonewtonMetersPerMillimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.KilonewtonMeterPerMillimeter, quantity08.Unit);

            var quantity09 = MomentPerLength.From(1, MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter);
            AssertEx.EqualTolerance(1, quantity09.KilonewtonMillimetersPerMillimeter, KilonewtonMillimetersPerMillimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter, quantity09.Unit);

            var quantity10 = MomentPerLength.From(1, MomentPerLengthUnit.KilopoundForceFootPerFoot);
            AssertEx.EqualTolerance(1, quantity10.KilopoundForceFeetPerFoot, KilopoundForceFeetPerFootTolerance);
            Assert.Equal(MomentPerLengthUnit.KilopoundForceFootPerFoot, quantity10.Unit);

            var quantity11 = MomentPerLength.From(1, MomentPerLengthUnit.KilopoundForceFootPerInch);
            AssertEx.EqualTolerance(1, quantity11.KilopoundForceFeetPerInch, KilopoundForceFeetPerInchTolerance);
            Assert.Equal(MomentPerLengthUnit.KilopoundForceFootPerInch, quantity11.Unit);

            var quantity12 = MomentPerLength.From(1, MomentPerLengthUnit.KilopoundForceInchPerFoot);
            AssertEx.EqualTolerance(1, quantity12.KilopoundForceInchesPerFoot, KilopoundForceInchesPerFootTolerance);
            Assert.Equal(MomentPerLengthUnit.KilopoundForceInchPerFoot, quantity12.Unit);

            var quantity13 = MomentPerLength.From(1, MomentPerLengthUnit.KilopoundForceInchPerInch);
            AssertEx.EqualTolerance(1, quantity13.KilopoundForceInchesPerInch, KilopoundForceInchesPerInchTolerance);
            Assert.Equal(MomentPerLengthUnit.KilopoundForceInchPerInch, quantity13.Unit);

            var quantity14 = MomentPerLength.From(1, MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter);
            AssertEx.EqualTolerance(1, quantity14.MeganewtonCentimetersPerCentimeter, MeganewtonCentimetersPerCentimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter, quantity14.Unit);

            var quantity15 = MomentPerLength.From(1, MomentPerLengthUnit.MeganewtonMeterPerCentimeter);
            AssertEx.EqualTolerance(1, quantity15.MeganewtonMetersPerCentimeter, MeganewtonMetersPerCentimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.MeganewtonMeterPerCentimeter, quantity15.Unit);

            var quantity16 = MomentPerLength.From(1, MomentPerLengthUnit.MeganewtonMeterPerMeter);
            AssertEx.EqualTolerance(1, quantity16.MeganewtonMetersPerMeter, MeganewtonMetersPerMeterTolerance);
            Assert.Equal(MomentPerLengthUnit.MeganewtonMeterPerMeter, quantity16.Unit);

            var quantity17 = MomentPerLength.From(1, MomentPerLengthUnit.MeganewtonMeterPerMillimeter);
            AssertEx.EqualTolerance(1, quantity17.MeganewtonMetersPerMillimeter, MeganewtonMetersPerMillimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.MeganewtonMeterPerMillimeter, quantity17.Unit);

            var quantity18 = MomentPerLength.From(1, MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter);
            AssertEx.EqualTolerance(1, quantity18.MeganewtonMillimetersPerMillimeter, MeganewtonMillimetersPerMillimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter, quantity18.Unit);

            var quantity19 = MomentPerLength.From(1, MomentPerLengthUnit.NewtonCentimeterPerCentimeter);
            AssertEx.EqualTolerance(1, quantity19.NewtonCentimetersPerCentimeter, NewtonCentimetersPerCentimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.NewtonCentimeterPerCentimeter, quantity19.Unit);

            var quantity20 = MomentPerLength.From(1, MomentPerLengthUnit.NewtonMeterPerCentimeter);
            AssertEx.EqualTolerance(1, quantity20.NewtonMetersPerCentimeter, NewtonMetersPerCentimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.NewtonMeterPerCentimeter, quantity20.Unit);

            var quantity21 = MomentPerLength.From(1, MomentPerLengthUnit.NewtonMeterPerMeter);
            AssertEx.EqualTolerance(1, quantity21.NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            Assert.Equal(MomentPerLengthUnit.NewtonMeterPerMeter, quantity21.Unit);

            var quantity22 = MomentPerLength.From(1, MomentPerLengthUnit.NewtonMeterPerMillimeter);
            AssertEx.EqualTolerance(1, quantity22.NewtonMetersPerMillimeter, NewtonMetersPerMillimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.NewtonMeterPerMillimeter, quantity22.Unit);

            var quantity23 = MomentPerLength.From(1, MomentPerLengthUnit.NewtonMillimeterPerMillimeter);
            AssertEx.EqualTolerance(1, quantity23.NewtonMillimetersPerMillimeter, NewtonMillimetersPerMillimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.NewtonMillimeterPerMillimeter, quantity23.Unit);

            var quantity24 = MomentPerLength.From(1, MomentPerLengthUnit.PoundForceFootPerFoot);
            AssertEx.EqualTolerance(1, quantity24.PoundForceFeetPerFoot, PoundForceFeetPerFootTolerance);
            Assert.Equal(MomentPerLengthUnit.PoundForceFootPerFoot, quantity24.Unit);

            var quantity25 = MomentPerLength.From(1, MomentPerLengthUnit.PoundForceFootPerInch);
            AssertEx.EqualTolerance(1, quantity25.PoundForceFeetPerInch, PoundForceFeetPerInchTolerance);
            Assert.Equal(MomentPerLengthUnit.PoundForceFootPerInch, quantity25.Unit);

            var quantity26 = MomentPerLength.From(1, MomentPerLengthUnit.PoundForceFootPerYard);
            AssertEx.EqualTolerance(1, quantity26.PoundForceFeetPerYard, PoundForceFeetPerYardTolerance);
            Assert.Equal(MomentPerLengthUnit.PoundForceFootPerYard, quantity26.Unit);

            var quantity27 = MomentPerLength.From(1, MomentPerLengthUnit.PoundForceInchPerFoot);
            AssertEx.EqualTolerance(1, quantity27.PoundForceInchesPerFoot, PoundForceInchesPerFootTolerance);
            Assert.Equal(MomentPerLengthUnit.PoundForceInchPerFoot, quantity27.Unit);

            var quantity28 = MomentPerLength.From(1, MomentPerLengthUnit.PoundForceInchPerInch);
            AssertEx.EqualTolerance(1, quantity28.PoundForceInchesPerInch, PoundForceInchesPerInchTolerance);
            Assert.Equal(MomentPerLengthUnit.PoundForceInchPerInch, quantity28.Unit);

            var quantity29 = MomentPerLength.From(1, MomentPerLengthUnit.TonneForceCentimeterPerCentimeter);
            AssertEx.EqualTolerance(1, quantity29.TonneForceCentimetersPerCentimeter, TonneForceCentimetersPerCentimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.TonneForceCentimeterPerCentimeter, quantity29.Unit);

            var quantity30 = MomentPerLength.From(1, MomentPerLengthUnit.TonneForceMeterPerCentimeter);
            AssertEx.EqualTolerance(1, quantity30.TonneForceMetersPerCentimeter, TonneForceMetersPerCentimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.TonneForceMeterPerCentimeter, quantity30.Unit);

            var quantity31 = MomentPerLength.From(1, MomentPerLengthUnit.TonneForceMeterPerMeter);
            AssertEx.EqualTolerance(1, quantity31.TonneForceMetersPerMeter, TonneForceMetersPerMeterTolerance);
            Assert.Equal(MomentPerLengthUnit.TonneForceMeterPerMeter, quantity31.Unit);

            var quantity32 = MomentPerLength.From(1, MomentPerLengthUnit.TonneForceMeterPerMillimeter);
            AssertEx.EqualTolerance(1, quantity32.TonneForceMetersPerMillimeter, TonneForceMetersPerMillimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.TonneForceMeterPerMillimeter, quantity32.Unit);

            var quantity33 = MomentPerLength.From(1, MomentPerLengthUnit.TonneForceMillimeterPerMillimeter);
            AssertEx.EqualTolerance(1, quantity33.TonneForceMillimetersPerMillimeter, TonneForceMillimetersPerMillimeterTolerance);
            Assert.Equal(MomentPerLengthUnit.TonneForceMillimeterPerMillimeter, quantity33.Unit);

        }

        [Fact]
        public void FromNewtonMetersPerMeter_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => MomentPerLength.FromNewtonMetersPerMeter(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => MomentPerLength.FromNewtonMetersPerMeter(double.NegativeInfinity));
        }

        [Fact]
        public void FromNewtonMetersPerMeter_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => MomentPerLength.FromNewtonMetersPerMeter(double.NaN));
        }

        [Fact]
        public void As()
        {
            var newtonmeterpermeter = MomentPerLength.FromNewtonMetersPerMeter(1);
            AssertEx.EqualTolerance(KilogramForceCentimetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter), KilogramForceCentimetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramForceMetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.KilogramForceMeterPerCentimeter), KilogramForceMetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramForceMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.KilogramForceMeterPerMeter), KilogramForceMetersPerMeterTolerance);
            AssertEx.EqualTolerance(KilogramForceMetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.KilogramForceMeterPerMillimeter), KilogramForceMetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilogramForceMillimetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter), KilogramForceMillimetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonCentimetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter), KilonewtonCentimetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.KilonewtonMeterPerCentimeter), KilonewtonMetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.KilonewtonMeterPerMeter), KilonewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.KilonewtonMeterPerMillimeter), KilonewtonMetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonMillimetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter), KilonewtonMillimetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilopoundForceFeetPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.KilopoundForceFootPerFoot), KilopoundForceFeetPerFootTolerance);
            AssertEx.EqualTolerance(KilopoundForceFeetPerInchInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.KilopoundForceFootPerInch), KilopoundForceFeetPerInchTolerance);
            AssertEx.EqualTolerance(KilopoundForceInchesPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.KilopoundForceInchPerFoot), KilopoundForceInchesPerFootTolerance);
            AssertEx.EqualTolerance(KilopoundForceInchesPerInchInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.KilopoundForceInchPerInch), KilopoundForceInchesPerInchTolerance);
            AssertEx.EqualTolerance(MeganewtonCentimetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter), MeganewtonCentimetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.MeganewtonMeterPerCentimeter), MeganewtonMetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.MeganewtonMeterPerMeter), MeganewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.MeganewtonMeterPerMillimeter), MeganewtonMetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(MeganewtonMillimetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter), MeganewtonMillimetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(NewtonCentimetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.NewtonCentimeterPerCentimeter), NewtonCentimetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(NewtonMetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.NewtonMeterPerCentimeter), NewtonMetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(NewtonMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.NewtonMeterPerMeter), NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(NewtonMetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.NewtonMeterPerMillimeter), NewtonMetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(NewtonMillimetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.NewtonMillimeterPerMillimeter), NewtonMillimetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(PoundForceFeetPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.PoundForceFootPerFoot), PoundForceFeetPerFootTolerance);
            AssertEx.EqualTolerance(PoundForceFeetPerInchInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.PoundForceFootPerInch), PoundForceFeetPerInchTolerance);
            AssertEx.EqualTolerance(PoundForceFeetPerYardInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.PoundForceFootPerYard), PoundForceFeetPerYardTolerance);
            AssertEx.EqualTolerance(PoundForceInchesPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.PoundForceInchPerFoot), PoundForceInchesPerFootTolerance);
            AssertEx.EqualTolerance(PoundForceInchesPerInchInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.PoundForceInchPerInch), PoundForceInchesPerInchTolerance);
            AssertEx.EqualTolerance(TonneForceCentimetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.TonneForceCentimeterPerCentimeter), TonneForceCentimetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(TonneForceMetersPerCentimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.TonneForceMeterPerCentimeter), TonneForceMetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(TonneForceMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.TonneForceMeterPerMeter), TonneForceMetersPerMeterTolerance);
            AssertEx.EqualTolerance(TonneForceMetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.TonneForceMeterPerMillimeter), TonneForceMetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(TonneForceMillimetersPerMillimeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(MomentPerLengthUnit.TonneForceMillimeterPerMillimeter), TonneForceMillimetersPerMillimeterTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new MomentPerLength(value: 1, unit: MomentPerLength.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = Convert.ToDouble(AsWithSIUnitSystem());
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = MomentPerLength.Parse("1 kgf·cm/cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramForceCentimetersPerCentimeter, KilogramForceCentimetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 kgf·m/cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMetersPerCentimeter, KilogramForceMetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilogramForceMeterPerCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 kgf·m/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMetersPerMeter, KilogramForceMetersPerMeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilogramForceMeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 kgf·m/mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMetersPerMillimeter, KilogramForceMetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilogramForceMeterPerMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 kgf·mm/mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMillimetersPerMillimeter, KilogramForceMillimetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 kN·cm/cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonCentimetersPerCentimeter, KilonewtonCentimetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 kN·m/cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMetersPerCentimeter, KilonewtonMetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilonewtonMeterPerCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 kN·m/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMetersPerMeter, KilonewtonMetersPerMeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilonewtonMeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 kN·m/mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMetersPerMillimeter, KilonewtonMetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilonewtonMeterPerMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 kN·mm/mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMillimetersPerMillimeter, KilonewtonMillimetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 kip·ft/ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceFeetPerFoot, KilopoundForceFeetPerFootTolerance);
                Assert.Equal(MomentPerLengthUnit.KilopoundForceFootPerFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 kip·ft/in", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceFeetPerInch, KilopoundForceFeetPerInchTolerance);
                Assert.Equal(MomentPerLengthUnit.KilopoundForceFootPerInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 kip·in/ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceInchesPerFoot, KilopoundForceInchesPerFootTolerance);
                Assert.Equal(MomentPerLengthUnit.KilopoundForceInchPerFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 kip·in/in", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceInchesPerInch, KilopoundForceInchesPerInchTolerance);
                Assert.Equal(MomentPerLengthUnit.KilopoundForceInchPerInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 MN·cm/cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MeganewtonCentimetersPerCentimeter, MeganewtonCentimetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 MN·m/cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMetersPerCentimeter, MeganewtonMetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.MeganewtonMeterPerCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 MN·m/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMetersPerMeter, MeganewtonMetersPerMeterTolerance);
                Assert.Equal(MomentPerLengthUnit.MeganewtonMeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 MN·m/mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMetersPerMillimeter, MeganewtonMetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.MeganewtonMeterPerMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 MN·mm/mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMillimetersPerMillimeter, MeganewtonMillimetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 N·cm/cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonCentimetersPerCentimeter, NewtonCentimetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.NewtonCentimeterPerCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 N·m/cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonMetersPerCentimeter, NewtonMetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.NewtonMeterPerCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 N·m/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
                Assert.Equal(MomentPerLengthUnit.NewtonMeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 N·m/mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonMetersPerMillimeter, NewtonMetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.NewtonMeterPerMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 N·mm/mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonMillimetersPerMillimeter, NewtonMillimetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.NewtonMillimeterPerMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 lbf·ft/ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundForceFeetPerFoot, PoundForceFeetPerFootTolerance);
                Assert.Equal(MomentPerLengthUnit.PoundForceFootPerFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 lbf·ft/in", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundForceFeetPerInch, PoundForceFeetPerInchTolerance);
                Assert.Equal(MomentPerLengthUnit.PoundForceFootPerInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 lbf·ft/yd", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundForceFeetPerYard, PoundForceFeetPerYardTolerance);
                Assert.Equal(MomentPerLengthUnit.PoundForceFootPerYard, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 lbf·in/ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundForceInchesPerFoot, PoundForceInchesPerFootTolerance);
                Assert.Equal(MomentPerLengthUnit.PoundForceInchPerFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 lbf·in/in", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundForceInchesPerInch, PoundForceInchesPerInchTolerance);
                Assert.Equal(MomentPerLengthUnit.PoundForceInchPerInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 tf·cm/cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneForceCentimetersPerCentimeter, TonneForceCentimetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.TonneForceCentimeterPerCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 tf·m/cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneForceMetersPerCentimeter, TonneForceMetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.TonneForceMeterPerCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 tf·m/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneForceMetersPerMeter, TonneForceMetersPerMeterTolerance);
                Assert.Equal(MomentPerLengthUnit.TonneForceMeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 tf·m/mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneForceMetersPerMillimeter, TonneForceMetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.TonneForceMeterPerMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MomentPerLength.Parse("1 tf·mm/mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneForceMillimetersPerMillimeter, TonneForceMillimetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.TonneForceMillimeterPerMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(MomentPerLength.TryParse("1 kgf·cm/cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramForceCentimetersPerCentimeter, KilogramForceCentimetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 kgf·m/cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMetersPerCentimeter, KilogramForceMetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilogramForceMeterPerCentimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 kgf·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMetersPerMeter, KilogramForceMetersPerMeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilogramForceMeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 kgf·m/mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMetersPerMillimeter, KilogramForceMetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilogramForceMeterPerMillimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 kgf·mm/mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMillimetersPerMillimeter, KilogramForceMillimetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 kN·cm/cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonCentimetersPerCentimeter, KilonewtonCentimetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 kN·m/cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMetersPerCentimeter, KilonewtonMetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilonewtonMeterPerCentimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 kN·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMetersPerMeter, KilonewtonMetersPerMeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilonewtonMeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 kN·m/mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMetersPerMillimeter, KilonewtonMetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilonewtonMeterPerMillimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 kN·mm/mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMillimetersPerMillimeter, KilonewtonMillimetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 kip·ft/ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceFeetPerFoot, KilopoundForceFeetPerFootTolerance);
                Assert.Equal(MomentPerLengthUnit.KilopoundForceFootPerFoot, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 kip·ft/in", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceFeetPerInch, KilopoundForceFeetPerInchTolerance);
                Assert.Equal(MomentPerLengthUnit.KilopoundForceFootPerInch, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 kip·in/ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceInchesPerFoot, KilopoundForceInchesPerFootTolerance);
                Assert.Equal(MomentPerLengthUnit.KilopoundForceInchPerFoot, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 kip·in/in", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceInchesPerInch, KilopoundForceInchesPerInchTolerance);
                Assert.Equal(MomentPerLengthUnit.KilopoundForceInchPerInch, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 MN·cm/cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MeganewtonCentimetersPerCentimeter, MeganewtonCentimetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 MN·m/cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMetersPerCentimeter, MeganewtonMetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.MeganewtonMeterPerCentimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 MN·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMetersPerMeter, MeganewtonMetersPerMeterTolerance);
                Assert.Equal(MomentPerLengthUnit.MeganewtonMeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 MN·m/mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMetersPerMillimeter, MeganewtonMetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.MeganewtonMeterPerMillimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 MN·mm/mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMillimetersPerMillimeter, MeganewtonMillimetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 N·cm/cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonCentimetersPerCentimeter, NewtonCentimetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.NewtonCentimeterPerCentimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 N·m/cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonMetersPerCentimeter, NewtonMetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.NewtonMeterPerCentimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 N·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
                Assert.Equal(MomentPerLengthUnit.NewtonMeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 N·m/mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonMetersPerMillimeter, NewtonMetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.NewtonMeterPerMillimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 N·mm/mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonMillimetersPerMillimeter, NewtonMillimetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.NewtonMillimeterPerMillimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 lbf·ft/ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundForceFeetPerFoot, PoundForceFeetPerFootTolerance);
                Assert.Equal(MomentPerLengthUnit.PoundForceFootPerFoot, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 lbf·ft/in", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundForceFeetPerInch, PoundForceFeetPerInchTolerance);
                Assert.Equal(MomentPerLengthUnit.PoundForceFootPerInch, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 lbf·ft/yd", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundForceFeetPerYard, PoundForceFeetPerYardTolerance);
                Assert.Equal(MomentPerLengthUnit.PoundForceFootPerYard, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 lbf·in/ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundForceInchesPerFoot, PoundForceInchesPerFootTolerance);
                Assert.Equal(MomentPerLengthUnit.PoundForceInchPerFoot, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 lbf·in/in", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundForceInchesPerInch, PoundForceInchesPerInchTolerance);
                Assert.Equal(MomentPerLengthUnit.PoundForceInchPerInch, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 tf·cm/cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneForceCentimetersPerCentimeter, TonneForceCentimetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.TonneForceCentimeterPerCentimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 tf·m/cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneForceMetersPerCentimeter, TonneForceMetersPerCentimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.TonneForceMeterPerCentimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 tf·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneForceMetersPerMeter, TonneForceMetersPerMeterTolerance);
                Assert.Equal(MomentPerLengthUnit.TonneForceMeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 tf·m/mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneForceMetersPerMillimeter, TonneForceMetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.TonneForceMeterPerMillimeter, parsed.Unit);
            }

            {
                Assert.True(MomentPerLength.TryParse("1 tf·mm/mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneForceMillimetersPerMillimeter, TonneForceMillimetersPerMillimeterTolerance);
                Assert.Equal(MomentPerLengthUnit.TonneForceMillimeterPerMillimeter, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("kgf·cm/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("kgf·m/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.KilogramForceMeterPerCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("kgf·m/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.KilogramForceMeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("kgf·m/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.KilogramForceMeterPerMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("kgf·mm/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("kN·cm/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("kN·m/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.KilonewtonMeterPerCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("kN·m/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.KilonewtonMeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("kN·m/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.KilonewtonMeterPerMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("kN·mm/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("kip·ft/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.KilopoundForceFootPerFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("kip·ft/in", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.KilopoundForceFootPerInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("kip·in/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.KilopoundForceInchPerFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("kip·in/in", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.KilopoundForceInchPerInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("MN·cm/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("MN·m/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.MeganewtonMeterPerCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("MN·m/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.MeganewtonMeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("MN·m/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.MeganewtonMeterPerMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("MN·mm/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("N·cm/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.NewtonCentimeterPerCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("N·m/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.NewtonMeterPerCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("N·m/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.NewtonMeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("N·m/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.NewtonMeterPerMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("N·mm/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.NewtonMillimeterPerMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("lbf·ft/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.PoundForceFootPerFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("lbf·ft/in", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.PoundForceFootPerInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("lbf·ft/yd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.PoundForceFootPerYard, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("lbf·in/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.PoundForceInchPerFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("lbf·in/in", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.PoundForceInchPerInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("tf·cm/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.TonneForceCentimeterPerCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("tf·m/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.TonneForceMeterPerCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("tf·m/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.TonneForceMeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("tf·m/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.TonneForceMeterPerMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MomentPerLength.ParseUnit("tf·mm/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentPerLengthUnit.TonneForceMillimeterPerMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(MomentPerLength.TryParseUnit("kgf·cm/cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("kgf·m/cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.KilogramForceMeterPerCentimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("kgf·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.KilogramForceMeterPerMeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("kgf·m/mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.KilogramForceMeterPerMillimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("kgf·mm/mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("kN·cm/cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("kN·m/cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.KilonewtonMeterPerCentimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("kN·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.KilonewtonMeterPerMeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("kN·m/mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.KilonewtonMeterPerMillimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("kN·mm/mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("kip·ft/ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.KilopoundForceFootPerFoot, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("kip·ft/in", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.KilopoundForceFootPerInch, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("kip·in/ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.KilopoundForceInchPerFoot, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("kip·in/in", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.KilopoundForceInchPerInch, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("MN·cm/cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("MN·m/cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.MeganewtonMeterPerCentimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("MN·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.MeganewtonMeterPerMeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("MN·m/mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.MeganewtonMeterPerMillimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("MN·mm/mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("N·cm/cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.NewtonCentimeterPerCentimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("N·m/cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.NewtonMeterPerCentimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("N·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.NewtonMeterPerMeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("N·m/mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.NewtonMeterPerMillimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("N·mm/mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.NewtonMillimeterPerMillimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("lbf·ft/ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.PoundForceFootPerFoot, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("lbf·ft/in", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.PoundForceFootPerInch, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("lbf·ft/yd", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.PoundForceFootPerYard, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("lbf·in/ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.PoundForceInchPerFoot, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("lbf·in/in", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.PoundForceInchPerInch, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("tf·cm/cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.TonneForceCentimeterPerCentimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("tf·m/cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.TonneForceMeterPerCentimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("tf·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.TonneForceMeterPerMeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("tf·m/mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.TonneForceMeterPerMillimeter, parsedUnit);
            }

            {
                Assert.True(MomentPerLength.TryParseUnit("tf·mm/mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentPerLengthUnit.TonneForceMillimeterPerMillimeter, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(MomentPerLengthUnit unit)
        {
            var inBaseUnits = MomentPerLength.From(1.0, MomentPerLength.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(MomentPerLengthUnit unit)
        {
            var quantity = MomentPerLength.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(MomentPerLengthUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = MomentPerLength.Units.First(u => u != MomentPerLength.BaseUnit);

            var quantity = MomentPerLength.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(MomentPerLengthUnit unit)
        {
            var quantity = default(MomentPerLength);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            MomentPerLength newtonmeterpermeter = MomentPerLength.FromNewtonMetersPerMeter(1);
            AssertEx.EqualTolerance(1, MomentPerLength.FromKilogramForceCentimetersPerCentimeter(newtonmeterpermeter.KilogramForceCentimetersPerCentimeter).NewtonMetersPerMeter, KilogramForceCentimetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromKilogramForceMetersPerCentimeter(newtonmeterpermeter.KilogramForceMetersPerCentimeter).NewtonMetersPerMeter, KilogramForceMetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromKilogramForceMetersPerMeter(newtonmeterpermeter.KilogramForceMetersPerMeter).NewtonMetersPerMeter, KilogramForceMetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromKilogramForceMetersPerMillimeter(newtonmeterpermeter.KilogramForceMetersPerMillimeter).NewtonMetersPerMeter, KilogramForceMetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromKilogramForceMillimetersPerMillimeter(newtonmeterpermeter.KilogramForceMillimetersPerMillimeter).NewtonMetersPerMeter, KilogramForceMillimetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromKilonewtonCentimetersPerCentimeter(newtonmeterpermeter.KilonewtonCentimetersPerCentimeter).NewtonMetersPerMeter, KilonewtonCentimetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromKilonewtonMetersPerCentimeter(newtonmeterpermeter.KilonewtonMetersPerCentimeter).NewtonMetersPerMeter, KilonewtonMetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromKilonewtonMetersPerMeter(newtonmeterpermeter.KilonewtonMetersPerMeter).NewtonMetersPerMeter, KilonewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromKilonewtonMetersPerMillimeter(newtonmeterpermeter.KilonewtonMetersPerMillimeter).NewtonMetersPerMeter, KilonewtonMetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromKilonewtonMillimetersPerMillimeter(newtonmeterpermeter.KilonewtonMillimetersPerMillimeter).NewtonMetersPerMeter, KilonewtonMillimetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromKilopoundForceFeetPerFoot(newtonmeterpermeter.KilopoundForceFeetPerFoot).NewtonMetersPerMeter, KilopoundForceFeetPerFootTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromKilopoundForceFeetPerInch(newtonmeterpermeter.KilopoundForceFeetPerInch).NewtonMetersPerMeter, KilopoundForceFeetPerInchTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromKilopoundForceInchesPerFoot(newtonmeterpermeter.KilopoundForceInchesPerFoot).NewtonMetersPerMeter, KilopoundForceInchesPerFootTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromKilopoundForceInchesPerInch(newtonmeterpermeter.KilopoundForceInchesPerInch).NewtonMetersPerMeter, KilopoundForceInchesPerInchTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromMeganewtonCentimetersPerCentimeter(newtonmeterpermeter.MeganewtonCentimetersPerCentimeter).NewtonMetersPerMeter, MeganewtonCentimetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromMeganewtonMetersPerCentimeter(newtonmeterpermeter.MeganewtonMetersPerCentimeter).NewtonMetersPerMeter, MeganewtonMetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromMeganewtonMetersPerMeter(newtonmeterpermeter.MeganewtonMetersPerMeter).NewtonMetersPerMeter, MeganewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromMeganewtonMetersPerMillimeter(newtonmeterpermeter.MeganewtonMetersPerMillimeter).NewtonMetersPerMeter, MeganewtonMetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromMeganewtonMillimetersPerMillimeter(newtonmeterpermeter.MeganewtonMillimetersPerMillimeter).NewtonMetersPerMeter, MeganewtonMillimetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromNewtonCentimetersPerCentimeter(newtonmeterpermeter.NewtonCentimetersPerCentimeter).NewtonMetersPerMeter, NewtonCentimetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromNewtonMetersPerCentimeter(newtonmeterpermeter.NewtonMetersPerCentimeter).NewtonMetersPerMeter, NewtonMetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromNewtonMetersPerMeter(newtonmeterpermeter.NewtonMetersPerMeter).NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromNewtonMetersPerMillimeter(newtonmeterpermeter.NewtonMetersPerMillimeter).NewtonMetersPerMeter, NewtonMetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromNewtonMillimetersPerMillimeter(newtonmeterpermeter.NewtonMillimetersPerMillimeter).NewtonMetersPerMeter, NewtonMillimetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromPoundForceFeetPerFoot(newtonmeterpermeter.PoundForceFeetPerFoot).NewtonMetersPerMeter, PoundForceFeetPerFootTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromPoundForceFeetPerInch(newtonmeterpermeter.PoundForceFeetPerInch).NewtonMetersPerMeter, PoundForceFeetPerInchTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromPoundForceFeetPerYard(newtonmeterpermeter.PoundForceFeetPerYard).NewtonMetersPerMeter, PoundForceFeetPerYardTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromPoundForceInchesPerFoot(newtonmeterpermeter.PoundForceInchesPerFoot).NewtonMetersPerMeter, PoundForceInchesPerFootTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromPoundForceInchesPerInch(newtonmeterpermeter.PoundForceInchesPerInch).NewtonMetersPerMeter, PoundForceInchesPerInchTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromTonneForceCentimetersPerCentimeter(newtonmeterpermeter.TonneForceCentimetersPerCentimeter).NewtonMetersPerMeter, TonneForceCentimetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromTonneForceMetersPerCentimeter(newtonmeterpermeter.TonneForceMetersPerCentimeter).NewtonMetersPerMeter, TonneForceMetersPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromTonneForceMetersPerMeter(newtonmeterpermeter.TonneForceMetersPerMeter).NewtonMetersPerMeter, TonneForceMetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromTonneForceMetersPerMillimeter(newtonmeterpermeter.TonneForceMetersPerMillimeter).NewtonMetersPerMeter, TonneForceMetersPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, MomentPerLength.FromTonneForceMillimetersPerMillimeter(newtonmeterpermeter.TonneForceMillimetersPerMillimeter).NewtonMetersPerMeter, TonneForceMillimetersPerMillimeterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            MomentPerLength v = MomentPerLength.FromNewtonMetersPerMeter(1);
            AssertEx.EqualTolerance(-1, -v.NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(2, (MomentPerLength.FromNewtonMetersPerMeter(3)-v).NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(2, (MomentPerLength.FromNewtonMetersPerMeter(10)/5).NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(2, MomentPerLength.FromNewtonMetersPerMeter(10)/MomentPerLength.FromNewtonMetersPerMeter(5), NewtonMetersPerMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            MomentPerLength oneNewtonMeterPerMeter = MomentPerLength.FromNewtonMetersPerMeter(1);
            MomentPerLength twoNewtonMetersPerMeter = MomentPerLength.FromNewtonMetersPerMeter(2);

            Assert.True(oneNewtonMeterPerMeter < twoNewtonMetersPerMeter);
            Assert.True(oneNewtonMeterPerMeter <= twoNewtonMetersPerMeter);
            Assert.True(twoNewtonMetersPerMeter > oneNewtonMeterPerMeter);
            Assert.True(twoNewtonMetersPerMeter >= oneNewtonMeterPerMeter);

            Assert.False(oneNewtonMeterPerMeter > twoNewtonMetersPerMeter);
            Assert.False(oneNewtonMeterPerMeter >= twoNewtonMetersPerMeter);
            Assert.False(twoNewtonMetersPerMeter < oneNewtonMeterPerMeter);
            Assert.False(twoNewtonMetersPerMeter <= oneNewtonMeterPerMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            MomentPerLength newtonmeterpermeter = MomentPerLength.FromNewtonMetersPerMeter(1);
            Assert.Equal(0, newtonmeterpermeter.CompareTo(newtonmeterpermeter));
            Assert.True(newtonmeterpermeter.CompareTo(MomentPerLength.Zero) > 0);
            Assert.True(MomentPerLength.Zero.CompareTo(newtonmeterpermeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            MomentPerLength newtonmeterpermeter = MomentPerLength.FromNewtonMetersPerMeter(1);
            Assert.Throws<ArgumentException>(() => newtonmeterpermeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            MomentPerLength newtonmeterpermeter = MomentPerLength.FromNewtonMetersPerMeter(1);
            Assert.Throws<ArgumentNullException>(() => newtonmeterpermeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, MomentPerLengthUnit.NewtonMeterPerMeter, 1, MomentPerLengthUnit.NewtonMeterPerMeter, true)]  // Same value and unit.
        [InlineData(1, MomentPerLengthUnit.NewtonMeterPerMeter, 2, MomentPerLengthUnit.NewtonMeterPerMeter, false)] // Different value.
        [InlineData(2, MomentPerLengthUnit.NewtonMeterPerMeter, 1, MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter, false)] // Different value and unit.
        [InlineData(1, MomentPerLengthUnit.NewtonMeterPerMeter, 1, MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, MomentPerLengthUnit unitA, double valueB, MomentPerLengthUnit unitB, bool expectEqual)
        {
            var a = new MomentPerLength(valueA, unitA);
            var b = new MomentPerLength(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = MomentPerLength.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = MomentPerLength.FromNewtonMetersPerMeter(1);
            Assert.True(v.Equals(MomentPerLength.FromNewtonMetersPerMeter(1), NewtonMetersPerMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(MomentPerLength.Zero, NewtonMetersPerMeterTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = MomentPerLength.FromNewtonMetersPerMeter(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(MomentPerLength.FromNewtonMetersPerMeter(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            MomentPerLength newtonmeterpermeter = MomentPerLength.FromNewtonMetersPerMeter(1);
            Assert.False(newtonmeterpermeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            MomentPerLength newtonmeterpermeter = MomentPerLength.FromNewtonMetersPerMeter(1);
            Assert.False(newtonmeterpermeter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(MomentPerLengthUnit)).Cast<MomentPerLengthUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(MomentPerLength.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 kgf·cm/cm", new MomentPerLength(1, MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter).ToString());
                Assert.Equal("1 kgf·m/cm", new MomentPerLength(1, MomentPerLengthUnit.KilogramForceMeterPerCentimeter).ToString());
                Assert.Equal("1 kgf·m/m", new MomentPerLength(1, MomentPerLengthUnit.KilogramForceMeterPerMeter).ToString());
                Assert.Equal("1 kgf·m/mm", new MomentPerLength(1, MomentPerLengthUnit.KilogramForceMeterPerMillimeter).ToString());
                Assert.Equal("1 kgf·mm/mm", new MomentPerLength(1, MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter).ToString());
                Assert.Equal("1 kN·cm/cm", new MomentPerLength(1, MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter).ToString());
                Assert.Equal("1 kN·m/cm", new MomentPerLength(1, MomentPerLengthUnit.KilonewtonMeterPerCentimeter).ToString());
                Assert.Equal("1 kN·m/m", new MomentPerLength(1, MomentPerLengthUnit.KilonewtonMeterPerMeter).ToString());
                Assert.Equal("1 kN·m/mm", new MomentPerLength(1, MomentPerLengthUnit.KilonewtonMeterPerMillimeter).ToString());
                Assert.Equal("1 kN·mm/mm", new MomentPerLength(1, MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter).ToString());
                Assert.Equal("1 kip·ft/ft", new MomentPerLength(1, MomentPerLengthUnit.KilopoundForceFootPerFoot).ToString());
                Assert.Equal("1 kip·ft/in", new MomentPerLength(1, MomentPerLengthUnit.KilopoundForceFootPerInch).ToString());
                Assert.Equal("1 kip·in/ft", new MomentPerLength(1, MomentPerLengthUnit.KilopoundForceInchPerFoot).ToString());
                Assert.Equal("1 kip·in/in", new MomentPerLength(1, MomentPerLengthUnit.KilopoundForceInchPerInch).ToString());
                Assert.Equal("1 MN·cm/cm", new MomentPerLength(1, MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter).ToString());
                Assert.Equal("1 MN·m/cm", new MomentPerLength(1, MomentPerLengthUnit.MeganewtonMeterPerCentimeter).ToString());
                Assert.Equal("1 MN·m/m", new MomentPerLength(1, MomentPerLengthUnit.MeganewtonMeterPerMeter).ToString());
                Assert.Equal("1 MN·m/mm", new MomentPerLength(1, MomentPerLengthUnit.MeganewtonMeterPerMillimeter).ToString());
                Assert.Equal("1 MN·mm/mm", new MomentPerLength(1, MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter).ToString());
                Assert.Equal("1 N·cm/cm", new MomentPerLength(1, MomentPerLengthUnit.NewtonCentimeterPerCentimeter).ToString());
                Assert.Equal("1 N·m/cm", new MomentPerLength(1, MomentPerLengthUnit.NewtonMeterPerCentimeter).ToString());
                Assert.Equal("1 N·m/m", new MomentPerLength(1, MomentPerLengthUnit.NewtonMeterPerMeter).ToString());
                Assert.Equal("1 N·m/mm", new MomentPerLength(1, MomentPerLengthUnit.NewtonMeterPerMillimeter).ToString());
                Assert.Equal("1 N·mm/mm", new MomentPerLength(1, MomentPerLengthUnit.NewtonMillimeterPerMillimeter).ToString());
                Assert.Equal("1 lbf·ft/ft", new MomentPerLength(1, MomentPerLengthUnit.PoundForceFootPerFoot).ToString());
                Assert.Equal("1 lbf·ft/in", new MomentPerLength(1, MomentPerLengthUnit.PoundForceFootPerInch).ToString());
                Assert.Equal("1 lbf·ft/yd", new MomentPerLength(1, MomentPerLengthUnit.PoundForceFootPerYard).ToString());
                Assert.Equal("1 lbf·in/ft", new MomentPerLength(1, MomentPerLengthUnit.PoundForceInchPerFoot).ToString());
                Assert.Equal("1 lbf·in/in", new MomentPerLength(1, MomentPerLengthUnit.PoundForceInchPerInch).ToString());
                Assert.Equal("1 tf·cm/cm", new MomentPerLength(1, MomentPerLengthUnit.TonneForceCentimeterPerCentimeter).ToString());
                Assert.Equal("1 tf·m/cm", new MomentPerLength(1, MomentPerLengthUnit.TonneForceMeterPerCentimeter).ToString());
                Assert.Equal("1 tf·m/m", new MomentPerLength(1, MomentPerLengthUnit.TonneForceMeterPerMeter).ToString());
                Assert.Equal("1 tf·m/mm", new MomentPerLength(1, MomentPerLengthUnit.TonneForceMeterPerMillimeter).ToString());
                Assert.Equal("1 tf·mm/mm", new MomentPerLength(1, MomentPerLengthUnit.TonneForceMillimeterPerMillimeter).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 kgf·cm/cm", new MomentPerLength(1, MomentPerLengthUnit.KilogramForceCentimeterPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kgf·m/cm", new MomentPerLength(1, MomentPerLengthUnit.KilogramForceMeterPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kgf·m/m", new MomentPerLength(1, MomentPerLengthUnit.KilogramForceMeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 kgf·m/mm", new MomentPerLength(1, MomentPerLengthUnit.KilogramForceMeterPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kgf·mm/mm", new MomentPerLength(1, MomentPerLengthUnit.KilogramForceMillimeterPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kN·cm/cm", new MomentPerLength(1, MomentPerLengthUnit.KilonewtonCentimeterPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kN·m/cm", new MomentPerLength(1, MomentPerLengthUnit.KilonewtonMeterPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kN·m/m", new MomentPerLength(1, MomentPerLengthUnit.KilonewtonMeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 kN·m/mm", new MomentPerLength(1, MomentPerLengthUnit.KilonewtonMeterPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kN·mm/mm", new MomentPerLength(1, MomentPerLengthUnit.KilonewtonMillimeterPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kip·ft/ft", new MomentPerLength(1, MomentPerLengthUnit.KilopoundForceFootPerFoot).ToString(swedishCulture));
            Assert.Equal("1 kip·ft/in", new MomentPerLength(1, MomentPerLengthUnit.KilopoundForceFootPerInch).ToString(swedishCulture));
            Assert.Equal("1 kip·in/ft", new MomentPerLength(1, MomentPerLengthUnit.KilopoundForceInchPerFoot).ToString(swedishCulture));
            Assert.Equal("1 kip·in/in", new MomentPerLength(1, MomentPerLengthUnit.KilopoundForceInchPerInch).ToString(swedishCulture));
            Assert.Equal("1 MN·cm/cm", new MomentPerLength(1, MomentPerLengthUnit.MeganewtonCentimeterPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 MN·m/cm", new MomentPerLength(1, MomentPerLengthUnit.MeganewtonMeterPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 MN·m/m", new MomentPerLength(1, MomentPerLengthUnit.MeganewtonMeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 MN·m/mm", new MomentPerLength(1, MomentPerLengthUnit.MeganewtonMeterPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 MN·mm/mm", new MomentPerLength(1, MomentPerLengthUnit.MeganewtonMillimeterPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 N·cm/cm", new MomentPerLength(1, MomentPerLengthUnit.NewtonCentimeterPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 N·m/cm", new MomentPerLength(1, MomentPerLengthUnit.NewtonMeterPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 N·m/m", new MomentPerLength(1, MomentPerLengthUnit.NewtonMeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 N·m/mm", new MomentPerLength(1, MomentPerLengthUnit.NewtonMeterPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 N·mm/mm", new MomentPerLength(1, MomentPerLengthUnit.NewtonMillimeterPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 lbf·ft/ft", new MomentPerLength(1, MomentPerLengthUnit.PoundForceFootPerFoot).ToString(swedishCulture));
            Assert.Equal("1 lbf·ft/in", new MomentPerLength(1, MomentPerLengthUnit.PoundForceFootPerInch).ToString(swedishCulture));
            Assert.Equal("1 lbf·ft/yd", new MomentPerLength(1, MomentPerLengthUnit.PoundForceFootPerYard).ToString(swedishCulture));
            Assert.Equal("1 lbf·in/ft", new MomentPerLength(1, MomentPerLengthUnit.PoundForceInchPerFoot).ToString(swedishCulture));
            Assert.Equal("1 lbf·in/in", new MomentPerLength(1, MomentPerLengthUnit.PoundForceInchPerInch).ToString(swedishCulture));
            Assert.Equal("1 tf·cm/cm", new MomentPerLength(1, MomentPerLengthUnit.TonneForceCentimeterPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 tf·m/cm", new MomentPerLength(1, MomentPerLengthUnit.TonneForceMeterPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 tf·m/m", new MomentPerLength(1, MomentPerLengthUnit.TonneForceMeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 tf·m/mm", new MomentPerLength(1, MomentPerLengthUnit.TonneForceMeterPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 tf·mm/mm", new MomentPerLength(1, MomentPerLengthUnit.TonneForceMillimeterPerMillimeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 N·m/m", new MomentPerLength(0.123456, MomentPerLengthUnit.NewtonMeterPerMeter).ToString("s1"));
                Assert.Equal("0.12 N·m/m", new MomentPerLength(0.123456, MomentPerLengthUnit.NewtonMeterPerMeter).ToString("s2"));
                Assert.Equal("0.123 N·m/m", new MomentPerLength(0.123456, MomentPerLengthUnit.NewtonMeterPerMeter).ToString("s3"));
                Assert.Equal("0.1235 N·m/m", new MomentPerLength(0.123456, MomentPerLengthUnit.NewtonMeterPerMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 N·m/m", new MomentPerLength(0.123456, MomentPerLengthUnit.NewtonMeterPerMeter).ToString("s1", culture));
            Assert.Equal("0.12 N·m/m", new MomentPerLength(0.123456, MomentPerLengthUnit.NewtonMeterPerMeter).ToString("s2", culture));
            Assert.Equal("0.123 N·m/m", new MomentPerLength(0.123456, MomentPerLengthUnit.NewtonMeterPerMeter).ToString("s3", culture));
            Assert.Equal("0.1235 N·m/m", new MomentPerLength(0.123456, MomentPerLengthUnit.NewtonMeterPerMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(MomentPerLength)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(MomentPerLengthUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal(MomentPerLength.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal(MomentPerLength.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal(new {MomentPerLength.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = MomentPerLength.FromNewtonMetersPerMeter(value);
            Assert.Equal(MomentPerLength.FromNewtonMetersPerMeter(-value), -quantity);
        }
    }
}
