//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace OasysUnits.NumberExtensions.NumberToMomentPerLength
{
    /// <summary>
    /// A number to MomentPerLength Extensions
    /// </summary>
    public static class NumberToMomentPerLengthExtensions
    {
        /// <inheritdoc cref="MomentPerLength.FromKilogramForceCentimetersPerCentimeter(double)" />
        public static MomentPerLength KilogramForceCentimetersPerCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromKilogramForceCentimetersPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromKilogramForceMetersPerCentimeter(double)" />
        public static MomentPerLength KilogramForceMetersPerCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromKilogramForceMetersPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromKilogramForceMetersPerMeter(double)" />
        public static MomentPerLength KilogramForceMetersPerMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromKilogramForceMetersPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromKilogramForceMetersPerMillimeter(double)" />
        public static MomentPerLength KilogramForceMetersPerMillimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromKilogramForceMetersPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromKilogramForceMillimetersPerMillimeter(double)" />
        public static MomentPerLength KilogramForceMillimetersPerMillimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromKilogramForceMillimetersPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromKilonewtonCentimetersPerCentimeter(double)" />
        public static MomentPerLength KilonewtonCentimetersPerCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromKilonewtonCentimetersPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromKilonewtonMetersPerCentimeter(double)" />
        public static MomentPerLength KilonewtonMetersPerCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromKilonewtonMetersPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromKilonewtonMetersPerMeter(double)" />
        public static MomentPerLength KilonewtonMetersPerMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromKilonewtonMetersPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromKilonewtonMetersPerMillimeter(double)" />
        public static MomentPerLength KilonewtonMetersPerMillimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromKilonewtonMetersPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromKilonewtonMillimetersPerMillimeter(double)" />
        public static MomentPerLength KilonewtonMillimetersPerMillimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromKilonewtonMillimetersPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromKilopoundForceFeetPerFoot(double)" />
        public static MomentPerLength KilopoundForceFeetPerFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromKilopoundForceFeetPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromKilopoundForceFeetPerInch(double)" />
        public static MomentPerLength KilopoundForceFeetPerInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromKilopoundForceFeetPerInch(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromKilopoundForceInchesPerInch(double)" />
        public static MomentPerLength KilopoundForceInchesPerInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromKilopoundForceInchesPerInch(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromMeganewtonCentimetersPerCentimeter(double)" />
        public static MomentPerLength MeganewtonCentimetersPerCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromMeganewtonCentimetersPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromMeganewtonMetersPerCentimeter(double)" />
        public static MomentPerLength MeganewtonMetersPerCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromMeganewtonMetersPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromMeganewtonMetersPerMeter(double)" />
        public static MomentPerLength MeganewtonMetersPerMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromMeganewtonMetersPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromMeganewtonMetersPerMillimeter(double)" />
        public static MomentPerLength MeganewtonMetersPerMillimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromMeganewtonMetersPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromMeganewtonMillimetersPerMillimeter(double)" />
        public static MomentPerLength MeganewtonMillimetersPerMillimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromMeganewtonMillimetersPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromNewtonCentimetersPerCentimeter(double)" />
        public static MomentPerLength NewtonCentimetersPerCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromNewtonCentimetersPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromNewtonMetersPerCentimeter(double)" />
        public static MomentPerLength NewtonMetersPerCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromNewtonMetersPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromNewtonMetersPerMeter(double)" />
        public static MomentPerLength NewtonMetersPerMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromNewtonMetersPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromNewtonMetersPerMillimeter(double)" />
        public static MomentPerLength NewtonMetersPerMillimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromNewtonMetersPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromNewtonMillimetersPerMillimeter(double)" />
        public static MomentPerLength NewtonMillimetersPerMillimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromNewtonMillimetersPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromPoundForceFeetPerFoot(double)" />
        public static MomentPerLength PoundForceFeetPerFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromPoundForceFeetPerFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromPoundForceFeetPerInch(double)" />
        public static MomentPerLength PoundForceFeetPerInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromPoundForceFeetPerInch(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromPoundForceFeetPerYard(double)" />
        public static MomentPerLength PoundForceFeetPerYard<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromPoundForceFeetPerYard(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromPoundForceInchesPerInch(double)" />
        public static MomentPerLength PoundForceInchesPerInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromPoundForceInchesPerInch(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromTonneForceCentimetersPerCentimeter(double)" />
        public static MomentPerLength TonneForceCentimetersPerCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromTonneForceCentimetersPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromTonneForceMetersPerCentimeter(double)" />
        public static MomentPerLength TonneForceMetersPerCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromTonneForceMetersPerCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromTonneForceMetersPerMeter(double)" />
        public static MomentPerLength TonneForceMetersPerMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromTonneForceMetersPerMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromTonneForceMetersPerMillimeter(double)" />
        public static MomentPerLength TonneForceMetersPerMillimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromTonneForceMetersPerMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="MomentPerLength.FromTonneForceMillimetersPerMillimeter(double)" />
        public static MomentPerLength TonneForceMillimetersPerMillimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => MomentPerLength.FromTonneForceMillimetersPerMillimeter(Convert.ToDouble(value));

    }
}
