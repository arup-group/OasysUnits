//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using OasysUnits.Units;

namespace OasysUnits
{
    /// <inheritdoc />
    /// <summary>
    ///     Section modulus is a geometric property for a given cross-section used in the design of beams or flexural members.
    /// </summary>
    public struct  SectionModulus
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly SectionModulusUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public SectionModulusUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public SectionModulus(double value, SectionModulusUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static SectionModulusUnit BaseUnit { get; } = SectionModulusUnit.CubicMeter;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static SectionModulus MaxValue { get; } = new SectionModulus(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static SectionModulus MinValue { get; } = new SectionModulus(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static SectionModulus Zero { get; } = new SectionModulus(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SectionModulusUnit.CubicCentimeter"/>
        /// </summary>
        public double CubicCentimeters => As(SectionModulusUnit.CubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SectionModulusUnit.CubicFoot"/>
        /// </summary>
        public double CubicFeet => As(SectionModulusUnit.CubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SectionModulusUnit.CubicInch"/>
        /// </summary>
        public double CubicInches => As(SectionModulusUnit.CubicInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SectionModulusUnit.CubicMeter"/>
        /// </summary>
        public double CubicMeters => As(SectionModulusUnit.CubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SectionModulusUnit.CubicMillimeter"/>
        /// </summary>
        public double CubicMillimeters => As(SectionModulusUnit.CubicMillimeter);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="SectionModulus"/> from <see cref="SectionModulusUnit.CubicCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SectionModulus FromCubicCentimeters(double cubiccentimeters) => new SectionModulus(cubiccentimeters, SectionModulusUnit.CubicCentimeter);

        /// <summary>
        ///     Creates a <see cref="SectionModulus"/> from <see cref="SectionModulusUnit.CubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SectionModulus FromCubicFeet(double cubicfeet) => new SectionModulus(cubicfeet, SectionModulusUnit.CubicFoot);

        /// <summary>
        ///     Creates a <see cref="SectionModulus"/> from <see cref="SectionModulusUnit.CubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SectionModulus FromCubicInches(double cubicinches) => new SectionModulus(cubicinches, SectionModulusUnit.CubicInch);

        /// <summary>
        ///     Creates a <see cref="SectionModulus"/> from <see cref="SectionModulusUnit.CubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SectionModulus FromCubicMeters(double cubicmeters) => new SectionModulus(cubicmeters, SectionModulusUnit.CubicMeter);

        /// <summary>
        ///     Creates a <see cref="SectionModulus"/> from <see cref="SectionModulusUnit.CubicMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SectionModulus FromCubicMillimeters(double cubicmillimeters) => new SectionModulus(cubicmillimeters, SectionModulusUnit.CubicMillimeter);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SectionModulusUnit" /> to <see cref="SectionModulus" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>SectionModulus unit value.</returns>
        public static SectionModulus From(double value, SectionModulusUnit fromUnit)
        {
            return new SectionModulus(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(SectionModulusUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public SectionModulus ToUnit(SectionModulusUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new SectionModulus(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            return Unit switch
            {
                SectionModulusUnit.CubicCentimeter => _value/1e6,
                SectionModulusUnit.CubicFoot => _value*0.0283168,
                SectionModulusUnit.CubicInch => _value*1.6387*1e-5,
                SectionModulusUnit.CubicMeter => _value,
                SectionModulusUnit.CubicMillimeter => _value/1e9,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private double GetValueAs(SectionModulusUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                SectionModulusUnit.CubicCentimeter => baseUnitValue*1e6,
                SectionModulusUnit.CubicFoot => baseUnitValue/0.0283168,
                SectionModulusUnit.CubicInch => baseUnitValue/(1.6387*1e-5),
                SectionModulusUnit.CubicMeter => baseUnitValue,
                SectionModulusUnit.CubicMillimeter => baseUnitValue*1e9,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion
    }
}

