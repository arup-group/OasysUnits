//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/OasysUnits/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/OasysUnits.

using OasysUnits.NumberExtensions.NumberToMoment;
using Xunit;

namespace OasysUnits.Tests
{
    public class NumberToMomentExtensionsTests
    {
        [Fact]
        public void NumberToKilogramForceCentimetersTest() =>
            Assert.Equal(Moment.FromKilogramForceCentimeters(2), 2.KilogramForceCentimeters());

        [Fact]
        public void NumberToKilogramForceMetersTest() =>
            Assert.Equal(Moment.FromKilogramForceMeters(2), 2.KilogramForceMeters());

        [Fact]
        public void NumberToKilogramForceMillimetersTest() =>
            Assert.Equal(Moment.FromKilogramForceMillimeters(2), 2.KilogramForceMillimeters());

        [Fact]
        public void NumberToKilonewtonCentimetersTest() =>
            Assert.Equal(Moment.FromKilonewtonCentimeters(2), 2.KilonewtonCentimeters());

        [Fact]
        public void NumberToKilonewtonMetersTest() =>
            Assert.Equal(Moment.FromKilonewtonMeters(2), 2.KilonewtonMeters());

        [Fact]
        public void NumberToKilonewtonMillimetersTest() =>
            Assert.Equal(Moment.FromKilonewtonMillimeters(2), 2.KilonewtonMillimeters());

        [Fact]
        public void NumberToKilopoundForceFeetTest() =>
            Assert.Equal(Moment.FromKilopoundForceFeet(2), 2.KilopoundForceFeet());

        [Fact]
        public void NumberToKilopoundForceInchesTest() =>
            Assert.Equal(Moment.FromKilopoundForceInches(2), 2.KilopoundForceInches());

        [Fact]
        public void NumberToMeganewtonCentimetersTest() =>
            Assert.Equal(Moment.FromMeganewtonCentimeters(2), 2.MeganewtonCentimeters());

        [Fact]
        public void NumberToMeganewtonMetersTest() =>
            Assert.Equal(Moment.FromMeganewtonMeters(2), 2.MeganewtonMeters());

        [Fact]
        public void NumberToMeganewtonMillimetersTest() =>
            Assert.Equal(Moment.FromMeganewtonMillimeters(2), 2.MeganewtonMillimeters());

        [Fact]
        public void NumberToMegapoundForceFeetTest() =>
            Assert.Equal(Moment.FromMegapoundForceFeet(2), 2.MegapoundForceFeet());

        [Fact]
        public void NumberToMegapoundForceInchesTest() =>
            Assert.Equal(Moment.FromMegapoundForceInches(2), 2.MegapoundForceInches());

        [Fact]
        public void NumberToNewtonCentimetersTest() =>
            Assert.Equal(Moment.FromNewtonCentimeters(2), 2.NewtonCentimeters());

        [Fact]
        public void NumberToNewtonMetersTest() =>
            Assert.Equal(Moment.FromNewtonMeters(2), 2.NewtonMeters());

        [Fact]
        public void NumberToNewtonMillimetersTest() =>
            Assert.Equal(Moment.FromNewtonMillimeters(2), 2.NewtonMillimeters());

        [Fact]
        public void NumberToPoundalFeetTest() =>
            Assert.Equal(Moment.FromPoundalFeet(2), 2.PoundalFeet());

        [Fact]
        public void NumberToPoundForceFeetTest() =>
            Assert.Equal(Moment.FromPoundForceFeet(2), 2.PoundForceFeet());

        [Fact]
        public void NumberToPoundForceInchesTest() =>
            Assert.Equal(Moment.FromPoundForceInches(2), 2.PoundForceInches());

        [Fact]
        public void NumberToTonneForceCentimetersTest() =>
            Assert.Equal(Moment.FromTonneForceCentimeters(2), 2.TonneForceCentimeters());

        [Fact]
        public void NumberToTonneForceMetersTest() =>
            Assert.Equal(Moment.FromTonneForceMeters(2), 2.TonneForceMeters());

        [Fact]
        public void NumberToTonneForceMillimetersTest() =>
            Assert.Equal(Moment.FromTonneForceMillimeters(2), 2.TonneForceMillimeters());

    }
}
