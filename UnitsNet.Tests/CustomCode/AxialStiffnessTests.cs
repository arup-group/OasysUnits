//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using Xunit;

namespace OasysUnits.Tests.CustomCode
{
    public class AxialStiffnessTests : AxialStiffnessTestsBase
    {
        protected override bool SupportsSIUnitSystem => true;

        protected override double DecanewtonsInOneNewton => 1E-1;
        protected override double DyneInOneNewton => 1E5;

        protected override double KilogramsForceInOneNewton => 0.101972;

        protected override double KilopoundsForceInOneNewton => 0.22481e-3;
        protected override double MeganewtonsInOneNewton => 1E-6;
        protected override double KilonewtonsInOneNewton => 1E-3;

        protected override double KiloPondsInOneNewton => 0.101972;

        protected override double NewtonsInOneNewton => 1;

        protected override double PoundalsInOneNewton => 7.23301;

        protected override double PoundsForceInOneNewton => 0.22481;

        protected override double TonnesForceInOneNewton => 1.019716212977928e-4;

        protected override double MillinewtonsInOneNewton => 1.0e3;

        protected override double MicronewtonsInOneNewton => 1.0e6;

        protected override double OunceForceInOneNewton => 3.596943089595368;

        protected override double ShortTonsForceInOneNewton => 1.12404471549816e-4;

        [Fact]
        public void AxialStiffnessTimesStrainEqualsForce()
        {
            Force force = AxialStiffness.FromNewtons(5) * Strain.FromRatio(2);
            Assert.Equal(force, Force.FromNewtons(10));
        }

        [Fact]
        public void ForceDividedByAxialStiffnessEqualsStrain()
        {
            Strain strain = Force.FromNewtons(5) / AxialStiffness.FromNewtons(5);
            Assert.Equal(strain, Strain.FromRatio(1));
        }

        [Fact]
        public void ForceDividedByStrainEqualsAxialStiffness()
        {
            AxialStiffness axialStiffness = Force.FromNewtons(10) / Strain.FromRatio(2);
            Assert.Equal(axialStiffness, AxialStiffness.FromNewtons(5));
        }
    }
}
