//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/OasysUnits/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/OasysUnits.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace OasysUnits.NumberExtensions.NumberToRotationalSpeed
{
    /// <summary>
    /// A number to RotationalSpeed Extensions
    /// </summary>
    public static class NumberToRotationalSpeedExtensions
    {
        /// <inheritdoc cref="RotationalSpeed.FromCentiradiansPerSecond(double)" />
        public static RotationalSpeed CentiradiansPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RotationalSpeed.FromCentiradiansPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed.FromDeciradiansPerSecond(double)" />
        public static RotationalSpeed DeciradiansPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RotationalSpeed.FromDeciradiansPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed.FromDegreesPerMinute(double)" />
        public static RotationalSpeed DegreesPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RotationalSpeed.FromDegreesPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed.FromDegreesPerSecond(double)" />
        public static RotationalSpeed DegreesPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RotationalSpeed.FromDegreesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed.FromMicrodegreesPerSecond(double)" />
        public static RotationalSpeed MicrodegreesPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RotationalSpeed.FromMicrodegreesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed.FromMicroradiansPerSecond(double)" />
        public static RotationalSpeed MicroradiansPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RotationalSpeed.FromMicroradiansPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed.FromMillidegreesPerSecond(double)" />
        public static RotationalSpeed MillidegreesPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RotationalSpeed.FromMillidegreesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed.FromMilliradiansPerSecond(double)" />
        public static RotationalSpeed MilliradiansPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RotationalSpeed.FromMilliradiansPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed.FromNanodegreesPerSecond(double)" />
        public static RotationalSpeed NanodegreesPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RotationalSpeed.FromNanodegreesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed.FromNanoradiansPerSecond(double)" />
        public static RotationalSpeed NanoradiansPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RotationalSpeed.FromNanoradiansPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed.FromRadiansPerSecond(double)" />
        public static RotationalSpeed RadiansPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RotationalSpeed.FromRadiansPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed.FromRevolutionsPerMinute(double)" />
        public static RotationalSpeed RevolutionsPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RotationalSpeed.FromRevolutionsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="RotationalSpeed.FromRevolutionsPerSecond(double)" />
        public static RotationalSpeed RevolutionsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RotationalSpeed.FromRevolutionsPerSecond(Convert.ToDouble(value));

    }
}
