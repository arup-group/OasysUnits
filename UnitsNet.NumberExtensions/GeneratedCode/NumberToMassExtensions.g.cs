//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace OasysUnits.NumberExtensions.NumberToMass
{
    /// <summary>
    /// A number to Mass Extensions
    /// </summary>
    public static class NumberToMassExtensions
    {
        /// <inheritdoc cref="Mass.FromCentigrams(OasysUnits.QuantityValue)" />
        public static Mass Centigrams<T>(this T value) =>
            Mass.FromCentigrams(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromDecagrams(OasysUnits.QuantityValue)" />
        public static Mass Decagrams<T>(this T value) =>
            Mass.FromDecagrams(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromDecigrams(OasysUnits.QuantityValue)" />
        public static Mass Decigrams<T>(this T value) =>
            Mass.FromDecigrams(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromEarthMasses(OasysUnits.QuantityValue)" />
        public static Mass EarthMasses<T>(this T value) =>
            Mass.FromEarthMasses(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromGrains(OasysUnits.QuantityValue)" />
        public static Mass Grains<T>(this T value) =>
            Mass.FromGrains(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromGrams(OasysUnits.QuantityValue)" />
        public static Mass Grams<T>(this T value) =>
            Mass.FromGrams(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromHectograms(OasysUnits.QuantityValue)" />
        public static Mass Hectograms<T>(this T value) =>
            Mass.FromHectograms(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromKilograms(OasysUnits.QuantityValue)" />
        public static Mass Kilograms<T>(this T value) =>
            Mass.FromKilograms(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromKilopounds(OasysUnits.QuantityValue)" />
        public static Mass Kilopounds<T>(this T value) =>
            Mass.FromKilopounds(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromKilotonnes(OasysUnits.QuantityValue)" />
        public static Mass Kilotonnes<T>(this T value) =>
            Mass.FromKilotonnes(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromLongHundredweight(OasysUnits.QuantityValue)" />
        public static Mass LongHundredweight<T>(this T value) =>
            Mass.FromLongHundredweight(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromLongTons(OasysUnits.QuantityValue)" />
        public static Mass LongTons<T>(this T value) =>
            Mass.FromLongTons(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromMegapounds(OasysUnits.QuantityValue)" />
        public static Mass Megapounds<T>(this T value) =>
            Mass.FromMegapounds(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromMegatonnes(OasysUnits.QuantityValue)" />
        public static Mass Megatonnes<T>(this T value) =>
            Mass.FromMegatonnes(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromMicrograms(OasysUnits.QuantityValue)" />
        public static Mass Micrograms<T>(this T value) =>
            Mass.FromMicrograms(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromMilligrams(OasysUnits.QuantityValue)" />
        public static Mass Milligrams<T>(this T value) =>
            Mass.FromMilligrams(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromNanograms(OasysUnits.QuantityValue)" />
        public static Mass Nanograms<T>(this T value) =>
            Mass.FromNanograms(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromOunces(OasysUnits.QuantityValue)" />
        public static Mass Ounces<T>(this T value) =>
            Mass.FromOunces(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromPounds(OasysUnits.QuantityValue)" />
        public static Mass Pounds<T>(this T value) =>
            Mass.FromPounds(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromShortHundredweight(OasysUnits.QuantityValue)" />
        public static Mass ShortHundredweight<T>(this T value) =>
            Mass.FromShortHundredweight(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromShortTons(OasysUnits.QuantityValue)" />
        public static Mass ShortTons<T>(this T value) =>
            Mass.FromShortTons(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromSlugs(OasysUnits.QuantityValue)" />
        public static Mass Slugs<T>(this T value) =>
            Mass.FromSlugs(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromSolarMasses(OasysUnits.QuantityValue)" />
        public static Mass SolarMasses<T>(this T value) =>
            Mass.FromSolarMasses(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromStone(OasysUnits.QuantityValue)" />
        public static Mass Stone<T>(this T value) =>
            Mass.FromStone(Convert.ToDouble(value));

        /// <inheritdoc cref="Mass.FromTonnes(OasysUnits.QuantityValue)" />
        public static Mass Tonnes<T>(this T value) =>
            Mass.FromTonnes(Convert.ToDouble(value));

    }
}
