//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using OasysUnits.NumberExtensions.NumberToMomentPerLength;
using Xunit;

namespace OasysUnits.Tests
{
    public class NumberToMomentPerLengthExtensionsTests
    {
        [Fact]
        public void NumberToKilogramForceCentimetersPerCentimeterTest() =>
            Assert.Equal(MomentPerLength.FromKilogramForceCentimetersPerCentimeter(2), 2.KilogramForceCentimetersPerCentimeter());

        [Fact]
        public void NumberToKilogramForceMetersPerCentimeterTest() =>
            Assert.Equal(MomentPerLength.FromKilogramForceMetersPerCentimeter(2), 2.KilogramForceMetersPerCentimeter());

        [Fact]
        public void NumberToKilogramForceMetersPerMeterTest() =>
            Assert.Equal(MomentPerLength.FromKilogramForceMetersPerMeter(2), 2.KilogramForceMetersPerMeter());

        [Fact]
        public void NumberToKilogramForceMetersPerMillimeterTest() =>
            Assert.Equal(MomentPerLength.FromKilogramForceMetersPerMillimeter(2), 2.KilogramForceMetersPerMillimeter());

        [Fact]
        public void NumberToKilogramForceMillimetersPerMillimeterTest() =>
            Assert.Equal(MomentPerLength.FromKilogramForceMillimetersPerMillimeter(2), 2.KilogramForceMillimetersPerMillimeter());

        [Fact]
        public void NumberToKilonewtonCentimetersPerCentimeterTest() =>
            Assert.Equal(MomentPerLength.FromKilonewtonCentimetersPerCentimeter(2), 2.KilonewtonCentimetersPerCentimeter());

        [Fact]
        public void NumberToKilonewtonMetersPerCentimeterTest() =>
            Assert.Equal(MomentPerLength.FromKilonewtonMetersPerCentimeter(2), 2.KilonewtonMetersPerCentimeter());

        [Fact]
        public void NumberToKilonewtonMetersPerMeterTest() =>
            Assert.Equal(MomentPerLength.FromKilonewtonMetersPerMeter(2), 2.KilonewtonMetersPerMeter());

        [Fact]
        public void NumberToKilonewtonMetersPerMillimeterTest() =>
            Assert.Equal(MomentPerLength.FromKilonewtonMetersPerMillimeter(2), 2.KilonewtonMetersPerMillimeter());

        [Fact]
        public void NumberToKilonewtonMillimetersPerMillimeterTest() =>
            Assert.Equal(MomentPerLength.FromKilonewtonMillimetersPerMillimeter(2), 2.KilonewtonMillimetersPerMillimeter());

        [Fact]
        public void NumberToKilopoundForceFeetPerFootTest() =>
            Assert.Equal(MomentPerLength.FromKilopoundForceFeetPerFoot(2), 2.KilopoundForceFeetPerFoot());

        [Fact]
        public void NumberToKilopoundForceFeetPerInchTest() =>
            Assert.Equal(MomentPerLength.FromKilopoundForceFeetPerInch(2), 2.KilopoundForceFeetPerInch());

        [Fact]
        public void NumberToKilopoundForceInchesPerFootTest() =>
            Assert.Equal(MomentPerLength.FromKilopoundForceInchesPerFoot(2), 2.KilopoundForceInchesPerFoot());

        [Fact]
        public void NumberToKilopoundForceInchesPerInchTest() =>
            Assert.Equal(MomentPerLength.FromKilopoundForceInchesPerInch(2), 2.KilopoundForceInchesPerInch());

        [Fact]
        public void NumberToMeganewtonCentimetersPerCentimeterTest() =>
            Assert.Equal(MomentPerLength.FromMeganewtonCentimetersPerCentimeter(2), 2.MeganewtonCentimetersPerCentimeter());

        [Fact]
        public void NumberToMeganewtonMetersPerCentimeterTest() =>
            Assert.Equal(MomentPerLength.FromMeganewtonMetersPerCentimeter(2), 2.MeganewtonMetersPerCentimeter());

        [Fact]
        public void NumberToMeganewtonMetersPerMeterTest() =>
            Assert.Equal(MomentPerLength.FromMeganewtonMetersPerMeter(2), 2.MeganewtonMetersPerMeter());

        [Fact]
        public void NumberToMeganewtonMetersPerMillimeterTest() =>
            Assert.Equal(MomentPerLength.FromMeganewtonMetersPerMillimeter(2), 2.MeganewtonMetersPerMillimeter());

        [Fact]
        public void NumberToMeganewtonMillimetersPerMillimeterTest() =>
            Assert.Equal(MomentPerLength.FromMeganewtonMillimetersPerMillimeter(2), 2.MeganewtonMillimetersPerMillimeter());

        [Fact]
        public void NumberToNewtonCentimetersPerCentimeterTest() =>
            Assert.Equal(MomentPerLength.FromNewtonCentimetersPerCentimeter(2), 2.NewtonCentimetersPerCentimeter());

        [Fact]
        public void NumberToNewtonMetersPerCentimeterTest() =>
            Assert.Equal(MomentPerLength.FromNewtonMetersPerCentimeter(2), 2.NewtonMetersPerCentimeter());

        [Fact]
        public void NumberToNewtonMetersPerMeterTest() =>
            Assert.Equal(MomentPerLength.FromNewtonMetersPerMeter(2), 2.NewtonMetersPerMeter());

        [Fact]
        public void NumberToNewtonMetersPerMillimeterTest() =>
            Assert.Equal(MomentPerLength.FromNewtonMetersPerMillimeter(2), 2.NewtonMetersPerMillimeter());

        [Fact]
        public void NumberToNewtonMillimetersPerMillimeterTest() =>
            Assert.Equal(MomentPerLength.FromNewtonMillimetersPerMillimeter(2), 2.NewtonMillimetersPerMillimeter());

        [Fact]
        public void NumberToPoundForceFeetPerFootTest() =>
            Assert.Equal(MomentPerLength.FromPoundForceFeetPerFoot(2), 2.PoundForceFeetPerFoot());

        [Fact]
        public void NumberToPoundForceFeetPerInchTest() =>
            Assert.Equal(MomentPerLength.FromPoundForceFeetPerInch(2), 2.PoundForceFeetPerInch());

        [Fact]
        public void NumberToPoundForceFeetPerYardTest() =>
            Assert.Equal(MomentPerLength.FromPoundForceFeetPerYard(2), 2.PoundForceFeetPerYard());

        [Fact]
        public void NumberToPoundForceInchesPerFootTest() =>
            Assert.Equal(MomentPerLength.FromPoundForceInchesPerFoot(2), 2.PoundForceInchesPerFoot());

        [Fact]
        public void NumberToPoundForceInchesPerInchTest() =>
            Assert.Equal(MomentPerLength.FromPoundForceInchesPerInch(2), 2.PoundForceInchesPerInch());

        [Fact]
        public void NumberToTonneForceCentimetersPerCentimeterTest() =>
            Assert.Equal(MomentPerLength.FromTonneForceCentimetersPerCentimeter(2), 2.TonneForceCentimetersPerCentimeter());

        [Fact]
        public void NumberToTonneForceMetersPerCentimeterTest() =>
            Assert.Equal(MomentPerLength.FromTonneForceMetersPerCentimeter(2), 2.TonneForceMetersPerCentimeter());

        [Fact]
        public void NumberToTonneForceMetersPerMeterTest() =>
            Assert.Equal(MomentPerLength.FromTonneForceMetersPerMeter(2), 2.TonneForceMetersPerMeter());

        [Fact]
        public void NumberToTonneForceMetersPerMillimeterTest() =>
            Assert.Equal(MomentPerLength.FromTonneForceMetersPerMillimeter(2), 2.TonneForceMetersPerMillimeter());

        [Fact]
        public void NumberToTonneForceMillimetersPerMillimeterTest() =>
            Assert.Equal(MomentPerLength.FromTonneForceMillimetersPerMillimeter(2), 2.TonneForceMillimetersPerMillimeter());

    }
}
