//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace OasysUnits.NumberExtensions.NumberToElectricResistivity
{
    /// <summary>
    /// A number to ElectricResistivity Extensions
    /// </summary>
    public static class NumberToElectricResistivityExtensions
    {
        /// <inheritdoc cref="ElectricResistivity.FromKiloohmsCentimeter(OasysUnits.QuantityValue)" />
        public static ElectricResistivity KiloohmsCentimeter<T>(this T value) =>
            ElectricResistivity.FromKiloohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromKiloohmMeters(OasysUnits.QuantityValue)" />
        public static ElectricResistivity KiloohmMeters<T>(this T value) =>
            ElectricResistivity.FromKiloohmMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmsCentimeter(OasysUnits.QuantityValue)" />
        public static ElectricResistivity MegaohmsCentimeter<T>(this T value) =>
            ElectricResistivity.FromMegaohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromMegaohmMeters(OasysUnits.QuantityValue)" />
        public static ElectricResistivity MegaohmMeters<T>(this T value) =>
            ElectricResistivity.FromMegaohmMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmsCentimeter(OasysUnits.QuantityValue)" />
        public static ElectricResistivity MicroohmsCentimeter<T>(this T value) =>
            ElectricResistivity.FromMicroohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromMicroohmMeters(OasysUnits.QuantityValue)" />
        public static ElectricResistivity MicroohmMeters<T>(this T value) =>
            ElectricResistivity.FromMicroohmMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmsCentimeter(OasysUnits.QuantityValue)" />
        public static ElectricResistivity MilliohmsCentimeter<T>(this T value) =>
            ElectricResistivity.FromMilliohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromMilliohmMeters(OasysUnits.QuantityValue)" />
        public static ElectricResistivity MilliohmMeters<T>(this T value) =>
            ElectricResistivity.FromMilliohmMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmsCentimeter(OasysUnits.QuantityValue)" />
        public static ElectricResistivity NanoohmsCentimeter<T>(this T value) =>
            ElectricResistivity.FromNanoohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromNanoohmMeters(OasysUnits.QuantityValue)" />
        public static ElectricResistivity NanoohmMeters<T>(this T value) =>
            ElectricResistivity.FromNanoohmMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromOhmsCentimeter(OasysUnits.QuantityValue)" />
        public static ElectricResistivity OhmsCentimeter<T>(this T value) =>
            ElectricResistivity.FromOhmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromOhmMeters(OasysUnits.QuantityValue)" />
        public static ElectricResistivity OhmMeters<T>(this T value) =>
            ElectricResistivity.FromOhmMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmsCentimeter(OasysUnits.QuantityValue)" />
        public static ElectricResistivity PicoohmsCentimeter<T>(this T value) =>
            ElectricResistivity.FromPicoohmsCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="ElectricResistivity.FromPicoohmMeters(OasysUnits.QuantityValue)" />
        public static ElectricResistivity PicoohmMeters<T>(this T value) =>
            ElectricResistivity.FromPicoohmMeters(Convert.ToDouble(value));

    }
}
