//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using OasysUnits.Tests.TestsBase;
using OasysUnits.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace OasysUnits.Tests
{
    /// <summary>
    /// Test of BendingStiffness.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class BendingStiffnessTestsBase : QuantityTestsBase
    {
        protected abstract double KilonewtonSquareMetersInOneNewtonSquareMeter { get; }
        protected abstract double KilonewtonSquareMillimetersInOneNewtonSquareMeter { get; }
        protected abstract double NewtonSquareMetersInOneNewtonSquareMeter { get; }
        protected abstract double NewtonSquareMillimetersInOneNewtonSquareMeter { get; }
        protected abstract double PoundsForceSquareFeetInOneNewtonSquareMeter { get; }
        protected abstract double PoundsForceSquareInchesInOneNewtonSquareMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KilonewtonSquareMetersTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonSquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double NewtonSquareMetersTolerance { get { return 1e-5; } }
        protected virtual double NewtonSquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double PoundsForceSquareFeetTolerance { get { return 1e-5; } }
        protected virtual double PoundsForceSquareInchesTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(BendingStiffnessUnit unit)
        {
            return unit switch
            {
                BendingStiffnessUnit.KilonewtonSquareMeter => (KilonewtonSquareMetersInOneNewtonSquareMeter, KilonewtonSquareMetersTolerance),
                BendingStiffnessUnit.KilonewtonSquareMillimeter => (KilonewtonSquareMillimetersInOneNewtonSquareMeter, KilonewtonSquareMillimetersTolerance),
                BendingStiffnessUnit.NewtonSquareMeter => (NewtonSquareMetersInOneNewtonSquareMeter, NewtonSquareMetersTolerance),
                BendingStiffnessUnit.NewtonSquareMillimeter => (NewtonSquareMillimetersInOneNewtonSquareMeter, NewtonSquareMillimetersTolerance),
                BendingStiffnessUnit.PoundForceSquareFoot => (PoundsForceSquareFeetInOneNewtonSquareMeter, PoundsForceSquareFeetTolerance),
                BendingStiffnessUnit.PoundForceSquareInch => (PoundsForceSquareInchesInOneNewtonSquareMeter, PoundsForceSquareInchesTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { BendingStiffnessUnit.KilonewtonSquareMeter },
            new object[] { BendingStiffnessUnit.KilonewtonSquareMillimeter },
            new object[] { BendingStiffnessUnit.NewtonSquareMeter },
            new object[] { BendingStiffnessUnit.NewtonSquareMillimeter },
            new object[] { BendingStiffnessUnit.PoundForceSquareFoot },
            new object[] { BendingStiffnessUnit.PoundForceSquareInch },
        };

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new BendingStiffness((double)0.0, BendingStiffnessUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new BendingStiffness();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(BendingStiffnessUnit.NewtonSquareMeter, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new BendingStiffness(double.PositiveInfinity, BendingStiffnessUnit.NewtonSquareMeter));
            Assert.Throws<ArgumentException>(() => new BendingStiffness(double.NegativeInfinity, BendingStiffnessUnit.NewtonSquareMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new BendingStiffness(double.NaN, BendingStiffnessUnit.NewtonSquareMeter));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new BendingStiffness(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new BendingStiffness(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (BendingStiffness) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void BendingStiffness_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new BendingStiffness(1, BendingStiffnessUnit.NewtonSquareMeter);

            QuantityInfo<BendingStiffnessUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(BendingStiffness.Zero, quantityInfo.Zero);
            Assert.Equal("BendingStiffness", quantityInfo.Name);
            Assert.Equal(QuantityType.BendingStiffness, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<BendingStiffnessUnit>().Except(new[] {BendingStiffnessUnit.Undefined}).OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void NewtonSquareMeterToBendingStiffnessUnits()
        {
            BendingStiffness newtonsquaremeter = BendingStiffness.FromNewtonSquareMeters(1);
            AssertEx.EqualTolerance(KilonewtonSquareMetersInOneNewtonSquareMeter, newtonsquaremeter.KilonewtonSquareMeters, KilonewtonSquareMetersTolerance);
            AssertEx.EqualTolerance(KilonewtonSquareMillimetersInOneNewtonSquareMeter, newtonsquaremeter.KilonewtonSquareMillimeters, KilonewtonSquareMillimetersTolerance);
            AssertEx.EqualTolerance(NewtonSquareMetersInOneNewtonSquareMeter, newtonsquaremeter.NewtonSquareMeters, NewtonSquareMetersTolerance);
            AssertEx.EqualTolerance(NewtonSquareMillimetersInOneNewtonSquareMeter, newtonsquaremeter.NewtonSquareMillimeters, NewtonSquareMillimetersTolerance);
            AssertEx.EqualTolerance(PoundsForceSquareFeetInOneNewtonSquareMeter, newtonsquaremeter.PoundsForceSquareFeet, PoundsForceSquareFeetTolerance);
            AssertEx.EqualTolerance(PoundsForceSquareInchesInOneNewtonSquareMeter, newtonsquaremeter.PoundsForceSquareInches, PoundsForceSquareInchesTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = BendingStiffness.From(1, BendingStiffnessUnit.KilonewtonSquareMeter);
            AssertEx.EqualTolerance(1, quantity00.KilonewtonSquareMeters, KilonewtonSquareMetersTolerance);
            Assert.Equal(BendingStiffnessUnit.KilonewtonSquareMeter, quantity00.Unit);

            var quantity01 = BendingStiffness.From(1, BendingStiffnessUnit.KilonewtonSquareMillimeter);
            AssertEx.EqualTolerance(1, quantity01.KilonewtonSquareMillimeters, KilonewtonSquareMillimetersTolerance);
            Assert.Equal(BendingStiffnessUnit.KilonewtonSquareMillimeter, quantity01.Unit);

            var quantity02 = BendingStiffness.From(1, BendingStiffnessUnit.NewtonSquareMeter);
            AssertEx.EqualTolerance(1, quantity02.NewtonSquareMeters, NewtonSquareMetersTolerance);
            Assert.Equal(BendingStiffnessUnit.NewtonSquareMeter, quantity02.Unit);

            var quantity03 = BendingStiffness.From(1, BendingStiffnessUnit.NewtonSquareMillimeter);
            AssertEx.EqualTolerance(1, quantity03.NewtonSquareMillimeters, NewtonSquareMillimetersTolerance);
            Assert.Equal(BendingStiffnessUnit.NewtonSquareMillimeter, quantity03.Unit);

            var quantity04 = BendingStiffness.From(1, BendingStiffnessUnit.PoundForceSquareFoot);
            AssertEx.EqualTolerance(1, quantity04.PoundsForceSquareFeet, PoundsForceSquareFeetTolerance);
            Assert.Equal(BendingStiffnessUnit.PoundForceSquareFoot, quantity04.Unit);

            var quantity05 = BendingStiffness.From(1, BendingStiffnessUnit.PoundForceSquareInch);
            AssertEx.EqualTolerance(1, quantity05.PoundsForceSquareInches, PoundsForceSquareInchesTolerance);
            Assert.Equal(BendingStiffnessUnit.PoundForceSquareInch, quantity05.Unit);

        }

        [Fact]
        public void FromNewtonSquareMeters_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => BendingStiffness.FromNewtonSquareMeters(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => BendingStiffness.FromNewtonSquareMeters(double.NegativeInfinity));
        }

        [Fact]
        public void FromNewtonSquareMeters_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => BendingStiffness.FromNewtonSquareMeters(double.NaN));
        }

        [Fact]
        public void As()
        {
            var newtonsquaremeter = BendingStiffness.FromNewtonSquareMeters(1);
            AssertEx.EqualTolerance(KilonewtonSquareMetersInOneNewtonSquareMeter, newtonsquaremeter.As(BendingStiffnessUnit.KilonewtonSquareMeter), KilonewtonSquareMetersTolerance);
            AssertEx.EqualTolerance(KilonewtonSquareMillimetersInOneNewtonSquareMeter, newtonsquaremeter.As(BendingStiffnessUnit.KilonewtonSquareMillimeter), KilonewtonSquareMillimetersTolerance);
            AssertEx.EqualTolerance(NewtonSquareMetersInOneNewtonSquareMeter, newtonsquaremeter.As(BendingStiffnessUnit.NewtonSquareMeter), NewtonSquareMetersTolerance);
            AssertEx.EqualTolerance(NewtonSquareMillimetersInOneNewtonSquareMeter, newtonsquaremeter.As(BendingStiffnessUnit.NewtonSquareMillimeter), NewtonSquareMillimetersTolerance);
            AssertEx.EqualTolerance(PoundsForceSquareFeetInOneNewtonSquareMeter, newtonsquaremeter.As(BendingStiffnessUnit.PoundForceSquareFoot), PoundsForceSquareFeetTolerance);
            AssertEx.EqualTolerance(PoundsForceSquareInchesInOneNewtonSquareMeter, newtonsquaremeter.As(BendingStiffnessUnit.PoundForceSquareInch), PoundsForceSquareInchesTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new BendingStiffness(value: 1, unit: BendingStiffness.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = BendingStiffness.Parse("1 kN·m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonSquareMeters, KilonewtonSquareMetersTolerance);
                Assert.Equal(BendingStiffnessUnit.KilonewtonSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = BendingStiffness.Parse("1 kN·mm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonSquareMillimeters, KilonewtonSquareMillimetersTolerance);
                Assert.Equal(BendingStiffnessUnit.KilonewtonSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = BendingStiffness.Parse("1 N·m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonSquareMeters, NewtonSquareMetersTolerance);
                Assert.Equal(BendingStiffnessUnit.NewtonSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = BendingStiffness.Parse("1 N·mm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonSquareMillimeters, NewtonSquareMillimetersTolerance);
                Assert.Equal(BendingStiffnessUnit.NewtonSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = BendingStiffness.Parse("1 lbf·ft²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundsForceSquareFeet, PoundsForceSquareFeetTolerance);
                Assert.Equal(BendingStiffnessUnit.PoundForceSquareFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = BendingStiffness.Parse("1 lbf·in²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundsForceSquareInches, PoundsForceSquareInchesTolerance);
                Assert.Equal(BendingStiffnessUnit.PoundForceSquareInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(BendingStiffness.TryParse("1 kN·m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonSquareMeters, KilonewtonSquareMetersTolerance);
                Assert.Equal(BendingStiffnessUnit.KilonewtonSquareMeter, parsed.Unit);
            }

            {
                Assert.True(BendingStiffness.TryParse("1 kN·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonSquareMillimeters, KilonewtonSquareMillimetersTolerance);
                Assert.Equal(BendingStiffnessUnit.KilonewtonSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(BendingStiffness.TryParse("1 N·m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonSquareMeters, NewtonSquareMetersTolerance);
                Assert.Equal(BendingStiffnessUnit.NewtonSquareMeter, parsed.Unit);
            }

            {
                Assert.True(BendingStiffness.TryParse("1 N·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonSquareMillimeters, NewtonSquareMillimetersTolerance);
                Assert.Equal(BendingStiffnessUnit.NewtonSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(BendingStiffness.TryParse("1 lbf·ft²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundsForceSquareFeet, PoundsForceSquareFeetTolerance);
                Assert.Equal(BendingStiffnessUnit.PoundForceSquareFoot, parsed.Unit);
            }

            {
                Assert.True(BendingStiffness.TryParse("1 lbf·in²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundsForceSquareInches, PoundsForceSquareInchesTolerance);
                Assert.Equal(BendingStiffnessUnit.PoundForceSquareInch, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = BendingStiffness.ParseUnit("kN·m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(BendingStiffnessUnit.KilonewtonSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = BendingStiffness.ParseUnit("kN·mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(BendingStiffnessUnit.KilonewtonSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = BendingStiffness.ParseUnit("N·m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(BendingStiffnessUnit.NewtonSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = BendingStiffness.ParseUnit("N·mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(BendingStiffnessUnit.NewtonSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = BendingStiffness.ParseUnit("lbf·ft²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(BendingStiffnessUnit.PoundForceSquareFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = BendingStiffness.ParseUnit("lbf·in²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(BendingStiffnessUnit.PoundForceSquareInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(BendingStiffness.TryParseUnit("kN·m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(BendingStiffnessUnit.KilonewtonSquareMeter, parsedUnit);
            }

            {
                Assert.True(BendingStiffness.TryParseUnit("kN·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(BendingStiffnessUnit.KilonewtonSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(BendingStiffness.TryParseUnit("N·m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(BendingStiffnessUnit.NewtonSquareMeter, parsedUnit);
            }

            {
                Assert.True(BendingStiffness.TryParseUnit("N·mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(BendingStiffnessUnit.NewtonSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(BendingStiffness.TryParseUnit("lbf·ft²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(BendingStiffnessUnit.PoundForceSquareFoot, parsedUnit);
            }

            {
                Assert.True(BendingStiffness.TryParseUnit("lbf·in²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(BendingStiffnessUnit.PoundForceSquareInch, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(BendingStiffnessUnit unit)
        {
            var inBaseUnits = BendingStiffness.From(1.0, BendingStiffness.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, (double)converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(BendingStiffnessUnit unit)
        {
            var quantity = BendingStiffness.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(BendingStiffnessUnit unit)
        {
            // See if there is a unit available that is not the base unit.
            var fromUnit = BendingStiffness.Units.FirstOrDefault(u => u != BendingStiffness.BaseUnit && u != BendingStiffnessUnit.Undefined);

            // If there is only one unit for the quantity, we must use the base unit.
            if (fromUnit == BendingStiffnessUnit.Undefined)
                fromUnit = BendingStiffness.BaseUnit;

            var quantity = BendingStiffness.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(BendingStiffnessUnit unit)
        {
            var quantity = default(BendingStiffness);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            BendingStiffness newtonsquaremeter = BendingStiffness.FromNewtonSquareMeters(1);
            AssertEx.EqualTolerance(1, BendingStiffness.FromKilonewtonSquareMeters(newtonsquaremeter.KilonewtonSquareMeters).NewtonSquareMeters, KilonewtonSquareMetersTolerance);
            AssertEx.EqualTolerance(1, BendingStiffness.FromKilonewtonSquareMillimeters(newtonsquaremeter.KilonewtonSquareMillimeters).NewtonSquareMeters, KilonewtonSquareMillimetersTolerance);
            AssertEx.EqualTolerance(1, BendingStiffness.FromNewtonSquareMeters(newtonsquaremeter.NewtonSquareMeters).NewtonSquareMeters, NewtonSquareMetersTolerance);
            AssertEx.EqualTolerance(1, BendingStiffness.FromNewtonSquareMillimeters(newtonsquaremeter.NewtonSquareMillimeters).NewtonSquareMeters, NewtonSquareMillimetersTolerance);
            AssertEx.EqualTolerance(1, BendingStiffness.FromPoundsForceSquareFeet(newtonsquaremeter.PoundsForceSquareFeet).NewtonSquareMeters, PoundsForceSquareFeetTolerance);
            AssertEx.EqualTolerance(1, BendingStiffness.FromPoundsForceSquareInches(newtonsquaremeter.PoundsForceSquareInches).NewtonSquareMeters, PoundsForceSquareInchesTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            BendingStiffness v = BendingStiffness.FromNewtonSquareMeters(1);
            AssertEx.EqualTolerance(-1, -v.NewtonSquareMeters, NewtonSquareMetersTolerance);
            AssertEx.EqualTolerance(2, (BendingStiffness.FromNewtonSquareMeters(3)-v).NewtonSquareMeters, NewtonSquareMetersTolerance);
            AssertEx.EqualTolerance(2, (v + v).NewtonSquareMeters, NewtonSquareMetersTolerance);
            AssertEx.EqualTolerance(10, (v*10).NewtonSquareMeters, NewtonSquareMetersTolerance);
            AssertEx.EqualTolerance(10, (10*v).NewtonSquareMeters, NewtonSquareMetersTolerance);
            AssertEx.EqualTolerance(2, (BendingStiffness.FromNewtonSquareMeters(10)/5).NewtonSquareMeters, NewtonSquareMetersTolerance);
            AssertEx.EqualTolerance(2, BendingStiffness.FromNewtonSquareMeters(10)/BendingStiffness.FromNewtonSquareMeters(5), NewtonSquareMetersTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            BendingStiffness oneNewtonSquareMeter = BendingStiffness.FromNewtonSquareMeters(1);
            BendingStiffness twoNewtonSquareMeters = BendingStiffness.FromNewtonSquareMeters(2);

            Assert.True(oneNewtonSquareMeter < twoNewtonSquareMeters);
            Assert.True(oneNewtonSquareMeter <= twoNewtonSquareMeters);
            Assert.True(twoNewtonSquareMeters > oneNewtonSquareMeter);
            Assert.True(twoNewtonSquareMeters >= oneNewtonSquareMeter);

            Assert.False(oneNewtonSquareMeter > twoNewtonSquareMeters);
            Assert.False(oneNewtonSquareMeter >= twoNewtonSquareMeters);
            Assert.False(twoNewtonSquareMeters < oneNewtonSquareMeter);
            Assert.False(twoNewtonSquareMeters <= oneNewtonSquareMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            BendingStiffness newtonsquaremeter = BendingStiffness.FromNewtonSquareMeters(1);
            Assert.Equal(0, newtonsquaremeter.CompareTo(newtonsquaremeter));
            Assert.True(newtonsquaremeter.CompareTo(BendingStiffness.Zero) > 0);
            Assert.True(BendingStiffness.Zero.CompareTo(newtonsquaremeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            BendingStiffness newtonsquaremeter = BendingStiffness.FromNewtonSquareMeters(1);
            Assert.Throws<ArgumentException>(() => newtonsquaremeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            BendingStiffness newtonsquaremeter = BendingStiffness.FromNewtonSquareMeters(1);
            Assert.Throws<ArgumentNullException>(() => newtonsquaremeter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = BendingStiffness.FromNewtonSquareMeters(1);
            var b = BendingStiffness.FromNewtonSquareMeters(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = BendingStiffness.FromNewtonSquareMeters(1);
            var b = BendingStiffness.FromNewtonSquareMeters(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = BendingStiffness.FromNewtonSquareMeters(1);
            object b = BendingStiffness.FromNewtonSquareMeters(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = BendingStiffness.FromNewtonSquareMeters(1);
            Assert.True(v.Equals(BendingStiffness.FromNewtonSquareMeters(1), NewtonSquareMetersTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(BendingStiffness.Zero, NewtonSquareMetersTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = BendingStiffness.FromNewtonSquareMeters(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(BendingStiffness.FromNewtonSquareMeters(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            BendingStiffness newtonsquaremeter = BendingStiffness.FromNewtonSquareMeters(1);
            Assert.False(newtonsquaremeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            BendingStiffness newtonsquaremeter = BendingStiffness.FromNewtonSquareMeters(1);
            Assert.False(newtonsquaremeter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(BendingStiffnessUnit.Undefined, BendingStiffness.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(BendingStiffnessUnit)).Cast<BendingStiffnessUnit>();
            foreach(var unit in units)
            {
                if (unit == BendingStiffnessUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(BendingStiffness.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 kN·m²", new BendingStiffness(1, BendingStiffnessUnit.KilonewtonSquareMeter).ToString());
                Assert.Equal("1 kN·mm²", new BendingStiffness(1, BendingStiffnessUnit.KilonewtonSquareMillimeter).ToString());
                Assert.Equal("1 N·m²", new BendingStiffness(1, BendingStiffnessUnit.NewtonSquareMeter).ToString());
                Assert.Equal("1 N·mm²", new BendingStiffness(1, BendingStiffnessUnit.NewtonSquareMillimeter).ToString());
                Assert.Equal("1 lbf·ft²", new BendingStiffness(1, BendingStiffnessUnit.PoundForceSquareFoot).ToString());
                Assert.Equal("1 lbf·in²", new BendingStiffness(1, BendingStiffnessUnit.PoundForceSquareInch).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 kN·m²", new BendingStiffness(1, BendingStiffnessUnit.KilonewtonSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 kN·mm²", new BendingStiffness(1, BendingStiffnessUnit.KilonewtonSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 N·m²", new BendingStiffness(1, BendingStiffnessUnit.NewtonSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 N·mm²", new BendingStiffness(1, BendingStiffnessUnit.NewtonSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 lbf·ft²", new BendingStiffness(1, BendingStiffnessUnit.PoundForceSquareFoot).ToString(swedishCulture));
            Assert.Equal("1 lbf·in²", new BendingStiffness(1, BendingStiffnessUnit.PoundForceSquareInch).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 N·m²", new BendingStiffness(0.123456, BendingStiffnessUnit.NewtonSquareMeter).ToString("s1"));
                Assert.Equal("0.12 N·m²", new BendingStiffness(0.123456, BendingStiffnessUnit.NewtonSquareMeter).ToString("s2"));
                Assert.Equal("0.123 N·m²", new BendingStiffness(0.123456, BendingStiffnessUnit.NewtonSquareMeter).ToString("s3"));
                Assert.Equal("0.1235 N·m²", new BendingStiffness(0.123456, BendingStiffnessUnit.NewtonSquareMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 N·m²", new BendingStiffness(0.123456, BendingStiffnessUnit.NewtonSquareMeter).ToString("s1", culture));
            Assert.Equal("0.12 N·m²", new BendingStiffness(0.123456, BendingStiffnessUnit.NewtonSquareMeter).ToString("s2", culture));
            Assert.Equal("0.123 N·m²", new BendingStiffness(0.123456, BendingStiffnessUnit.NewtonSquareMeter).ToString("s3", culture));
            Assert.Equal("0.1235 N·m²", new BendingStiffness(0.123456, BendingStiffnessUnit.NewtonSquareMeter).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(BendingStiffness)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(BendingStiffnessUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal(QuantityType.BendingStiffness, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal(BendingStiffness.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal(BendingStiffness.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(1.0);
            Assert.Equal(new {BendingStiffness.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = BendingStiffness.FromNewtonSquareMeters(value);
            Assert.Equal(BendingStiffness.FromNewtonSquareMeters(-value), -quantity);
        }
    }
}
