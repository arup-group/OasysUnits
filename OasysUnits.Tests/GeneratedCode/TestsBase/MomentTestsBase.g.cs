//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using OasysUnits.Tests.TestsBase;
using OasysUnits.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace OasysUnits.Tests
{
    /// <summary>
    /// Test of Moment.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MomentTestsBase : QuantityTestsBase
    {
        protected abstract double KilogramForceCentimetersInOneNewtonMeter { get; }
        protected abstract double KilogramForceMetersInOneNewtonMeter { get; }
        protected abstract double KilogramForceMillimetersInOneNewtonMeter { get; }
        protected abstract double KilonewtonCentimetersInOneNewtonMeter { get; }
        protected abstract double KilonewtonMetersInOneNewtonMeter { get; }
        protected abstract double KilonewtonMillimetersInOneNewtonMeter { get; }
        protected abstract double KilopoundForceFeetInOneNewtonMeter { get; }
        protected abstract double KilopoundForceInchesInOneNewtonMeter { get; }
        protected abstract double MeganewtonCentimetersInOneNewtonMeter { get; }
        protected abstract double MeganewtonMetersInOneNewtonMeter { get; }
        protected abstract double MeganewtonMillimetersInOneNewtonMeter { get; }
        protected abstract double MegapoundForceFeetInOneNewtonMeter { get; }
        protected abstract double MegapoundForceInchesInOneNewtonMeter { get; }
        protected abstract double NewtonCentimetersInOneNewtonMeter { get; }
        protected abstract double NewtonMetersInOneNewtonMeter { get; }
        protected abstract double NewtonMillimetersInOneNewtonMeter { get; }
        protected abstract double PoundalFeetInOneNewtonMeter { get; }
        protected abstract double PoundForceFeetInOneNewtonMeter { get; }
        protected abstract double PoundForceInchesInOneNewtonMeter { get; }
        protected abstract double TonneForceCentimetersInOneNewtonMeter { get; }
        protected abstract double TonneForceMetersInOneNewtonMeter { get; }
        protected abstract double TonneForceMillimetersInOneNewtonMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KilogramForceCentimetersTolerance { get { return 1e-5; } }
        protected virtual double KilogramForceMetersTolerance { get { return 1e-5; } }
        protected virtual double KilogramForceMillimetersTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonCentimetersTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonMetersTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonMillimetersTolerance { get { return 1e-5; } }
        protected virtual double KilopoundForceFeetTolerance { get { return 1e-5; } }
        protected virtual double KilopoundForceInchesTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonCentimetersTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonMetersTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonMillimetersTolerance { get { return 1e-5; } }
        protected virtual double MegapoundForceFeetTolerance { get { return 1e-5; } }
        protected virtual double MegapoundForceInchesTolerance { get { return 1e-5; } }
        protected virtual double NewtonCentimetersTolerance { get { return 1e-5; } }
        protected virtual double NewtonMetersTolerance { get { return 1e-5; } }
        protected virtual double NewtonMillimetersTolerance { get { return 1e-5; } }
        protected virtual double PoundalFeetTolerance { get { return 1e-5; } }
        protected virtual double PoundForceFeetTolerance { get { return 1e-5; } }
        protected virtual double PoundForceInchesTolerance { get { return 1e-5; } }
        protected virtual double TonneForceCentimetersTolerance { get { return 1e-5; } }
        protected virtual double TonneForceMetersTolerance { get { return 1e-5; } }
        protected virtual double TonneForceMillimetersTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(MomentUnit unit)
        {
            return unit switch
            {
                MomentUnit.KilogramForceCentimeter => (KilogramForceCentimetersInOneNewtonMeter, KilogramForceCentimetersTolerance),
                MomentUnit.KilogramForceMeter => (KilogramForceMetersInOneNewtonMeter, KilogramForceMetersTolerance),
                MomentUnit.KilogramForceMillimeter => (KilogramForceMillimetersInOneNewtonMeter, KilogramForceMillimetersTolerance),
                MomentUnit.KilonewtonCentimeter => (KilonewtonCentimetersInOneNewtonMeter, KilonewtonCentimetersTolerance),
                MomentUnit.KilonewtonMeter => (KilonewtonMetersInOneNewtonMeter, KilonewtonMetersTolerance),
                MomentUnit.KilonewtonMillimeter => (KilonewtonMillimetersInOneNewtonMeter, KilonewtonMillimetersTolerance),
                MomentUnit.KilopoundForceFoot => (KilopoundForceFeetInOneNewtonMeter, KilopoundForceFeetTolerance),
                MomentUnit.KilopoundForceInch => (KilopoundForceInchesInOneNewtonMeter, KilopoundForceInchesTolerance),
                MomentUnit.MeganewtonCentimeter => (MeganewtonCentimetersInOneNewtonMeter, MeganewtonCentimetersTolerance),
                MomentUnit.MeganewtonMeter => (MeganewtonMetersInOneNewtonMeter, MeganewtonMetersTolerance),
                MomentUnit.MeganewtonMillimeter => (MeganewtonMillimetersInOneNewtonMeter, MeganewtonMillimetersTolerance),
                MomentUnit.MegapoundForceFoot => (MegapoundForceFeetInOneNewtonMeter, MegapoundForceFeetTolerance),
                MomentUnit.MegapoundForceInch => (MegapoundForceInchesInOneNewtonMeter, MegapoundForceInchesTolerance),
                MomentUnit.NewtonCentimeter => (NewtonCentimetersInOneNewtonMeter, NewtonCentimetersTolerance),
                MomentUnit.NewtonMeter => (NewtonMetersInOneNewtonMeter, NewtonMetersTolerance),
                MomentUnit.NewtonMillimeter => (NewtonMillimetersInOneNewtonMeter, NewtonMillimetersTolerance),
                MomentUnit.PoundalFoot => (PoundalFeetInOneNewtonMeter, PoundalFeetTolerance),
                MomentUnit.PoundForceFoot => (PoundForceFeetInOneNewtonMeter, PoundForceFeetTolerance),
                MomentUnit.PoundForceInch => (PoundForceInchesInOneNewtonMeter, PoundForceInchesTolerance),
                MomentUnit.TonneForceCentimeter => (TonneForceCentimetersInOneNewtonMeter, TonneForceCentimetersTolerance),
                MomentUnit.TonneForceMeter => (TonneForceMetersInOneNewtonMeter, TonneForceMetersTolerance),
                MomentUnit.TonneForceMillimeter => (TonneForceMillimetersInOneNewtonMeter, TonneForceMillimetersTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { MomentUnit.KilogramForceCentimeter },
            new object[] { MomentUnit.KilogramForceMeter },
            new object[] { MomentUnit.KilogramForceMillimeter },
            new object[] { MomentUnit.KilonewtonCentimeter },
            new object[] { MomentUnit.KilonewtonMeter },
            new object[] { MomentUnit.KilonewtonMillimeter },
            new object[] { MomentUnit.KilopoundForceFoot },
            new object[] { MomentUnit.KilopoundForceInch },
            new object[] { MomentUnit.MeganewtonCentimeter },
            new object[] { MomentUnit.MeganewtonMeter },
            new object[] { MomentUnit.MeganewtonMillimeter },
            new object[] { MomentUnit.MegapoundForceFoot },
            new object[] { MomentUnit.MegapoundForceInch },
            new object[] { MomentUnit.NewtonCentimeter },
            new object[] { MomentUnit.NewtonMeter },
            new object[] { MomentUnit.NewtonMillimeter },
            new object[] { MomentUnit.PoundalFoot },
            new object[] { MomentUnit.PoundForceFoot },
            new object[] { MomentUnit.PoundForceInch },
            new object[] { MomentUnit.TonneForceCentimeter },
            new object[] { MomentUnit.TonneForceMeter },
            new object[] { MomentUnit.TonneForceMillimeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Moment();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MomentUnit.NewtonMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Moment(double.PositiveInfinity, MomentUnit.NewtonMeter));
            var exception2 = Record.Exception(() => new Moment(double.NegativeInfinity, MomentUnit.NewtonMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Moment(double.NaN, MomentUnit.NewtonMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Moment(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new Moment(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (Moment) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void Moment_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Moment(1, MomentUnit.NewtonMeter);

            QuantityInfo<MomentUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Moment.Zero, quantityInfo.Zero);
            Assert.Equal("Moment", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<MomentUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void NewtonMeterToMomentUnits()
        {
            Moment newtonmeter = Moment.FromNewtonMeters(1);
            AssertEx.EqualTolerance(KilogramForceCentimetersInOneNewtonMeter, newtonmeter.KilogramForceCentimeters, KilogramForceCentimetersTolerance);
            AssertEx.EqualTolerance(KilogramForceMetersInOneNewtonMeter, newtonmeter.KilogramForceMeters, KilogramForceMetersTolerance);
            AssertEx.EqualTolerance(KilogramForceMillimetersInOneNewtonMeter, newtonmeter.KilogramForceMillimeters, KilogramForceMillimetersTolerance);
            AssertEx.EqualTolerance(KilonewtonCentimetersInOneNewtonMeter, newtonmeter.KilonewtonCentimeters, KilonewtonCentimetersTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersInOneNewtonMeter, newtonmeter.KilonewtonMeters, KilonewtonMetersTolerance);
            AssertEx.EqualTolerance(KilonewtonMillimetersInOneNewtonMeter, newtonmeter.KilonewtonMillimeters, KilonewtonMillimetersTolerance);
            AssertEx.EqualTolerance(KilopoundForceFeetInOneNewtonMeter, newtonmeter.KilopoundForceFeet, KilopoundForceFeetTolerance);
            AssertEx.EqualTolerance(KilopoundForceInchesInOneNewtonMeter, newtonmeter.KilopoundForceInches, KilopoundForceInchesTolerance);
            AssertEx.EqualTolerance(MeganewtonCentimetersInOneNewtonMeter, newtonmeter.MeganewtonCentimeters, MeganewtonCentimetersTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersInOneNewtonMeter, newtonmeter.MeganewtonMeters, MeganewtonMetersTolerance);
            AssertEx.EqualTolerance(MeganewtonMillimetersInOneNewtonMeter, newtonmeter.MeganewtonMillimeters, MeganewtonMillimetersTolerance);
            AssertEx.EqualTolerance(MegapoundForceFeetInOneNewtonMeter, newtonmeter.MegapoundForceFeet, MegapoundForceFeetTolerance);
            AssertEx.EqualTolerance(MegapoundForceInchesInOneNewtonMeter, newtonmeter.MegapoundForceInches, MegapoundForceInchesTolerance);
            AssertEx.EqualTolerance(NewtonCentimetersInOneNewtonMeter, newtonmeter.NewtonCentimeters, NewtonCentimetersTolerance);
            AssertEx.EqualTolerance(NewtonMetersInOneNewtonMeter, newtonmeter.NewtonMeters, NewtonMetersTolerance);
            AssertEx.EqualTolerance(NewtonMillimetersInOneNewtonMeter, newtonmeter.NewtonMillimeters, NewtonMillimetersTolerance);
            AssertEx.EqualTolerance(PoundalFeetInOneNewtonMeter, newtonmeter.PoundalFeet, PoundalFeetTolerance);
            AssertEx.EqualTolerance(PoundForceFeetInOneNewtonMeter, newtonmeter.PoundForceFeet, PoundForceFeetTolerance);
            AssertEx.EqualTolerance(PoundForceInchesInOneNewtonMeter, newtonmeter.PoundForceInches, PoundForceInchesTolerance);
            AssertEx.EqualTolerance(TonneForceCentimetersInOneNewtonMeter, newtonmeter.TonneForceCentimeters, TonneForceCentimetersTolerance);
            AssertEx.EqualTolerance(TonneForceMetersInOneNewtonMeter, newtonmeter.TonneForceMeters, TonneForceMetersTolerance);
            AssertEx.EqualTolerance(TonneForceMillimetersInOneNewtonMeter, newtonmeter.TonneForceMillimeters, TonneForceMillimetersTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Moment.From(1, MomentUnit.KilogramForceCentimeter);
            AssertEx.EqualTolerance(1, quantity00.KilogramForceCentimeters, KilogramForceCentimetersTolerance);
            Assert.Equal(MomentUnit.KilogramForceCentimeter, quantity00.Unit);

            var quantity01 = Moment.From(1, MomentUnit.KilogramForceMeter);
            AssertEx.EqualTolerance(1, quantity01.KilogramForceMeters, KilogramForceMetersTolerance);
            Assert.Equal(MomentUnit.KilogramForceMeter, quantity01.Unit);

            var quantity02 = Moment.From(1, MomentUnit.KilogramForceMillimeter);
            AssertEx.EqualTolerance(1, quantity02.KilogramForceMillimeters, KilogramForceMillimetersTolerance);
            Assert.Equal(MomentUnit.KilogramForceMillimeter, quantity02.Unit);

            var quantity03 = Moment.From(1, MomentUnit.KilonewtonCentimeter);
            AssertEx.EqualTolerance(1, quantity03.KilonewtonCentimeters, KilonewtonCentimetersTolerance);
            Assert.Equal(MomentUnit.KilonewtonCentimeter, quantity03.Unit);

            var quantity04 = Moment.From(1, MomentUnit.KilonewtonMeter);
            AssertEx.EqualTolerance(1, quantity04.KilonewtonMeters, KilonewtonMetersTolerance);
            Assert.Equal(MomentUnit.KilonewtonMeter, quantity04.Unit);

            var quantity05 = Moment.From(1, MomentUnit.KilonewtonMillimeter);
            AssertEx.EqualTolerance(1, quantity05.KilonewtonMillimeters, KilonewtonMillimetersTolerance);
            Assert.Equal(MomentUnit.KilonewtonMillimeter, quantity05.Unit);

            var quantity06 = Moment.From(1, MomentUnit.KilopoundForceFoot);
            AssertEx.EqualTolerance(1, quantity06.KilopoundForceFeet, KilopoundForceFeetTolerance);
            Assert.Equal(MomentUnit.KilopoundForceFoot, quantity06.Unit);

            var quantity07 = Moment.From(1, MomentUnit.KilopoundForceInch);
            AssertEx.EqualTolerance(1, quantity07.KilopoundForceInches, KilopoundForceInchesTolerance);
            Assert.Equal(MomentUnit.KilopoundForceInch, quantity07.Unit);

            var quantity08 = Moment.From(1, MomentUnit.MeganewtonCentimeter);
            AssertEx.EqualTolerance(1, quantity08.MeganewtonCentimeters, MeganewtonCentimetersTolerance);
            Assert.Equal(MomentUnit.MeganewtonCentimeter, quantity08.Unit);

            var quantity09 = Moment.From(1, MomentUnit.MeganewtonMeter);
            AssertEx.EqualTolerance(1, quantity09.MeganewtonMeters, MeganewtonMetersTolerance);
            Assert.Equal(MomentUnit.MeganewtonMeter, quantity09.Unit);

            var quantity10 = Moment.From(1, MomentUnit.MeganewtonMillimeter);
            AssertEx.EqualTolerance(1, quantity10.MeganewtonMillimeters, MeganewtonMillimetersTolerance);
            Assert.Equal(MomentUnit.MeganewtonMillimeter, quantity10.Unit);

            var quantity11 = Moment.From(1, MomentUnit.MegapoundForceFoot);
            AssertEx.EqualTolerance(1, quantity11.MegapoundForceFeet, MegapoundForceFeetTolerance);
            Assert.Equal(MomentUnit.MegapoundForceFoot, quantity11.Unit);

            var quantity12 = Moment.From(1, MomentUnit.MegapoundForceInch);
            AssertEx.EqualTolerance(1, quantity12.MegapoundForceInches, MegapoundForceInchesTolerance);
            Assert.Equal(MomentUnit.MegapoundForceInch, quantity12.Unit);

            var quantity13 = Moment.From(1, MomentUnit.NewtonCentimeter);
            AssertEx.EqualTolerance(1, quantity13.NewtonCentimeters, NewtonCentimetersTolerance);
            Assert.Equal(MomentUnit.NewtonCentimeter, quantity13.Unit);

            var quantity14 = Moment.From(1, MomentUnit.NewtonMeter);
            AssertEx.EqualTolerance(1, quantity14.NewtonMeters, NewtonMetersTolerance);
            Assert.Equal(MomentUnit.NewtonMeter, quantity14.Unit);

            var quantity15 = Moment.From(1, MomentUnit.NewtonMillimeter);
            AssertEx.EqualTolerance(1, quantity15.NewtonMillimeters, NewtonMillimetersTolerance);
            Assert.Equal(MomentUnit.NewtonMillimeter, quantity15.Unit);

            var quantity16 = Moment.From(1, MomentUnit.PoundalFoot);
            AssertEx.EqualTolerance(1, quantity16.PoundalFeet, PoundalFeetTolerance);
            Assert.Equal(MomentUnit.PoundalFoot, quantity16.Unit);

            var quantity17 = Moment.From(1, MomentUnit.PoundForceFoot);
            AssertEx.EqualTolerance(1, quantity17.PoundForceFeet, PoundForceFeetTolerance);
            Assert.Equal(MomentUnit.PoundForceFoot, quantity17.Unit);

            var quantity18 = Moment.From(1, MomentUnit.PoundForceInch);
            AssertEx.EqualTolerance(1, quantity18.PoundForceInches, PoundForceInchesTolerance);
            Assert.Equal(MomentUnit.PoundForceInch, quantity18.Unit);

            var quantity19 = Moment.From(1, MomentUnit.TonneForceCentimeter);
            AssertEx.EqualTolerance(1, quantity19.TonneForceCentimeters, TonneForceCentimetersTolerance);
            Assert.Equal(MomentUnit.TonneForceCentimeter, quantity19.Unit);

            var quantity20 = Moment.From(1, MomentUnit.TonneForceMeter);
            AssertEx.EqualTolerance(1, quantity20.TonneForceMeters, TonneForceMetersTolerance);
            Assert.Equal(MomentUnit.TonneForceMeter, quantity20.Unit);

            var quantity21 = Moment.From(1, MomentUnit.TonneForceMillimeter);
            AssertEx.EqualTolerance(1, quantity21.TonneForceMillimeters, TonneForceMillimetersTolerance);
            Assert.Equal(MomentUnit.TonneForceMillimeter, quantity21.Unit);

        }

        [Fact]
        public void FromNewtonMeters_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Moment.FromNewtonMeters(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Moment.FromNewtonMeters(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromNewtonMeters_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Moment.FromNewtonMeters(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var newtonmeter = Moment.FromNewtonMeters(1);
            AssertEx.EqualTolerance(KilogramForceCentimetersInOneNewtonMeter, newtonmeter.As(MomentUnit.KilogramForceCentimeter), KilogramForceCentimetersTolerance);
            AssertEx.EqualTolerance(KilogramForceMetersInOneNewtonMeter, newtonmeter.As(MomentUnit.KilogramForceMeter), KilogramForceMetersTolerance);
            AssertEx.EqualTolerance(KilogramForceMillimetersInOneNewtonMeter, newtonmeter.As(MomentUnit.KilogramForceMillimeter), KilogramForceMillimetersTolerance);
            AssertEx.EqualTolerance(KilonewtonCentimetersInOneNewtonMeter, newtonmeter.As(MomentUnit.KilonewtonCentimeter), KilonewtonCentimetersTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersInOneNewtonMeter, newtonmeter.As(MomentUnit.KilonewtonMeter), KilonewtonMetersTolerance);
            AssertEx.EqualTolerance(KilonewtonMillimetersInOneNewtonMeter, newtonmeter.As(MomentUnit.KilonewtonMillimeter), KilonewtonMillimetersTolerance);
            AssertEx.EqualTolerance(KilopoundForceFeetInOneNewtonMeter, newtonmeter.As(MomentUnit.KilopoundForceFoot), KilopoundForceFeetTolerance);
            AssertEx.EqualTolerance(KilopoundForceInchesInOneNewtonMeter, newtonmeter.As(MomentUnit.KilopoundForceInch), KilopoundForceInchesTolerance);
            AssertEx.EqualTolerance(MeganewtonCentimetersInOneNewtonMeter, newtonmeter.As(MomentUnit.MeganewtonCentimeter), MeganewtonCentimetersTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersInOneNewtonMeter, newtonmeter.As(MomentUnit.MeganewtonMeter), MeganewtonMetersTolerance);
            AssertEx.EqualTolerance(MeganewtonMillimetersInOneNewtonMeter, newtonmeter.As(MomentUnit.MeganewtonMillimeter), MeganewtonMillimetersTolerance);
            AssertEx.EqualTolerance(MegapoundForceFeetInOneNewtonMeter, newtonmeter.As(MomentUnit.MegapoundForceFoot), MegapoundForceFeetTolerance);
            AssertEx.EqualTolerance(MegapoundForceInchesInOneNewtonMeter, newtonmeter.As(MomentUnit.MegapoundForceInch), MegapoundForceInchesTolerance);
            AssertEx.EqualTolerance(NewtonCentimetersInOneNewtonMeter, newtonmeter.As(MomentUnit.NewtonCentimeter), NewtonCentimetersTolerance);
            AssertEx.EqualTolerance(NewtonMetersInOneNewtonMeter, newtonmeter.As(MomentUnit.NewtonMeter), NewtonMetersTolerance);
            AssertEx.EqualTolerance(NewtonMillimetersInOneNewtonMeter, newtonmeter.As(MomentUnit.NewtonMillimeter), NewtonMillimetersTolerance);
            AssertEx.EqualTolerance(PoundalFeetInOneNewtonMeter, newtonmeter.As(MomentUnit.PoundalFoot), PoundalFeetTolerance);
            AssertEx.EqualTolerance(PoundForceFeetInOneNewtonMeter, newtonmeter.As(MomentUnit.PoundForceFoot), PoundForceFeetTolerance);
            AssertEx.EqualTolerance(PoundForceInchesInOneNewtonMeter, newtonmeter.As(MomentUnit.PoundForceInch), PoundForceInchesTolerance);
            AssertEx.EqualTolerance(TonneForceCentimetersInOneNewtonMeter, newtonmeter.As(MomentUnit.TonneForceCentimeter), TonneForceCentimetersTolerance);
            AssertEx.EqualTolerance(TonneForceMetersInOneNewtonMeter, newtonmeter.As(MomentUnit.TonneForceMeter), TonneForceMetersTolerance);
            AssertEx.EqualTolerance(TonneForceMillimetersInOneNewtonMeter, newtonmeter.As(MomentUnit.TonneForceMillimeter), TonneForceMillimetersTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Moment(value: 1, unit: Moment.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = Convert.ToDouble(AsWithSIUnitSystem());
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Moment.Parse("1 kgf·cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramForceCentimeters, KilogramForceCentimetersTolerance);
                Assert.Equal(MomentUnit.KilogramForceCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 kgf·m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMeters, KilogramForceMetersTolerance);
                Assert.Equal(MomentUnit.KilogramForceMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 kgf·mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMillimeters, KilogramForceMillimetersTolerance);
                Assert.Equal(MomentUnit.KilogramForceMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 kN·cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonCentimeters, KilonewtonCentimetersTolerance);
                Assert.Equal(MomentUnit.KilonewtonCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 kN·m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMeters, KilonewtonMetersTolerance);
                Assert.Equal(MomentUnit.KilonewtonMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 kN·mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMillimeters, KilonewtonMillimetersTolerance);
                Assert.Equal(MomentUnit.KilonewtonMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 kipf·ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceFeet, KilopoundForceFeetTolerance);
                Assert.Equal(MomentUnit.KilopoundForceFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 kipf·in", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceInches, KilopoundForceInchesTolerance);
                Assert.Equal(MomentUnit.KilopoundForceInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 MN·cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MeganewtonCentimeters, MeganewtonCentimetersTolerance);
                Assert.Equal(MomentUnit.MeganewtonCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 MN·m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMeters, MeganewtonMetersTolerance);
                Assert.Equal(MomentUnit.MeganewtonMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 MN·mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMillimeters, MeganewtonMillimetersTolerance);
                Assert.Equal(MomentUnit.MeganewtonMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 Mlbf·ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegapoundForceFeet, MegapoundForceFeetTolerance);
                Assert.Equal(MomentUnit.MegapoundForceFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 Mlbf·in", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegapoundForceInches, MegapoundForceInchesTolerance);
                Assert.Equal(MomentUnit.MegapoundForceInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 N·cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonCentimeters, NewtonCentimetersTolerance);
                Assert.Equal(MomentUnit.NewtonCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 N·m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonMeters, NewtonMetersTolerance);
                Assert.Equal(MomentUnit.NewtonMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 N·mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonMillimeters, NewtonMillimetersTolerance);
                Assert.Equal(MomentUnit.NewtonMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 pdl·ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundalFeet, PoundalFeetTolerance);
                Assert.Equal(MomentUnit.PoundalFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 lbf·ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundForceFeet, PoundForceFeetTolerance);
                Assert.Equal(MomentUnit.PoundForceFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 lbf·in", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundForceInches, PoundForceInchesTolerance);
                Assert.Equal(MomentUnit.PoundForceInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 tf·cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneForceCentimeters, TonneForceCentimetersTolerance);
                Assert.Equal(MomentUnit.TonneForceCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 tf·m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneForceMeters, TonneForceMetersTolerance);
                Assert.Equal(MomentUnit.TonneForceMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Moment.Parse("1 tf·mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneForceMillimeters, TonneForceMillimetersTolerance);
                Assert.Equal(MomentUnit.TonneForceMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Moment.TryParse("1 kgf·cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramForceCentimeters, KilogramForceCentimetersTolerance);
                Assert.Equal(MomentUnit.KilogramForceCentimeter, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 kgf·m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMeters, KilogramForceMetersTolerance);
                Assert.Equal(MomentUnit.KilogramForceMeter, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 kgf·mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMillimeters, KilogramForceMillimetersTolerance);
                Assert.Equal(MomentUnit.KilogramForceMillimeter, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 kN·cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonCentimeters, KilonewtonCentimetersTolerance);
                Assert.Equal(MomentUnit.KilonewtonCentimeter, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 kN·m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMeters, KilonewtonMetersTolerance);
                Assert.Equal(MomentUnit.KilonewtonMeter, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 kN·mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMillimeters, KilonewtonMillimetersTolerance);
                Assert.Equal(MomentUnit.KilonewtonMillimeter, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 kipf·ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceFeet, KilopoundForceFeetTolerance);
                Assert.Equal(MomentUnit.KilopoundForceFoot, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 kipf·in", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceInches, KilopoundForceInchesTolerance);
                Assert.Equal(MomentUnit.KilopoundForceInch, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 MN·cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MeganewtonCentimeters, MeganewtonCentimetersTolerance);
                Assert.Equal(MomentUnit.MeganewtonCentimeter, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 MN·m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMeters, MeganewtonMetersTolerance);
                Assert.Equal(MomentUnit.MeganewtonMeter, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 MN·mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMillimeters, MeganewtonMillimetersTolerance);
                Assert.Equal(MomentUnit.MeganewtonMillimeter, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 Mlbf·ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegapoundForceFeet, MegapoundForceFeetTolerance);
                Assert.Equal(MomentUnit.MegapoundForceFoot, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 Mlbf·in", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegapoundForceInches, MegapoundForceInchesTolerance);
                Assert.Equal(MomentUnit.MegapoundForceInch, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 N·cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonCentimeters, NewtonCentimetersTolerance);
                Assert.Equal(MomentUnit.NewtonCentimeter, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 N·m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonMeters, NewtonMetersTolerance);
                Assert.Equal(MomentUnit.NewtonMeter, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 N·mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonMillimeters, NewtonMillimetersTolerance);
                Assert.Equal(MomentUnit.NewtonMillimeter, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 pdl·ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundalFeet, PoundalFeetTolerance);
                Assert.Equal(MomentUnit.PoundalFoot, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 lbf·ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundForceFeet, PoundForceFeetTolerance);
                Assert.Equal(MomentUnit.PoundForceFoot, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 lbf·in", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundForceInches, PoundForceInchesTolerance);
                Assert.Equal(MomentUnit.PoundForceInch, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 tf·cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneForceCentimeters, TonneForceCentimetersTolerance);
                Assert.Equal(MomentUnit.TonneForceCentimeter, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 tf·m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneForceMeters, TonneForceMetersTolerance);
                Assert.Equal(MomentUnit.TonneForceMeter, parsed.Unit);
            }

            {
                Assert.True(Moment.TryParse("1 tf·mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneForceMillimeters, TonneForceMillimetersTolerance);
                Assert.Equal(MomentUnit.TonneForceMillimeter, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = Moment.ParseUnit("kgf·cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.KilogramForceCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("kgf·m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.KilogramForceMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("kgf·mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.KilogramForceMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("kN·cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.KilonewtonCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("kN·m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.KilonewtonMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("kN·mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.KilonewtonMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("kipf·ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.KilopoundForceFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("kipf·in", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.KilopoundForceInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("MN·cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.MeganewtonCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("MN·m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.MeganewtonMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("MN·mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.MeganewtonMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("Mlbf·ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.MegapoundForceFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("Mlbf·in", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.MegapoundForceInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("N·cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.NewtonCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("N·m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.NewtonMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("N·mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.NewtonMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("pdl·ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.PoundalFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("lbf·ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.PoundForceFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("lbf·in", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.PoundForceInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("tf·cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.TonneForceCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("tf·m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.TonneForceMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Moment.ParseUnit("tf·mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MomentUnit.TonneForceMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(Moment.TryParseUnit("kgf·cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.KilogramForceCentimeter, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("kgf·m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.KilogramForceMeter, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("kgf·mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.KilogramForceMillimeter, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("kN·cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.KilonewtonCentimeter, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("kN·m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.KilonewtonMeter, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("kN·mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.KilonewtonMillimeter, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("kipf·ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.KilopoundForceFoot, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("kipf·in", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.KilopoundForceInch, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("MN·cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.MeganewtonCentimeter, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("MN·m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.MeganewtonMeter, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("MN·mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.MeganewtonMillimeter, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("Mlbf·ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.MegapoundForceFoot, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("Mlbf·in", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.MegapoundForceInch, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("N·cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.NewtonCentimeter, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("N·m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.NewtonMeter, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("N·mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.NewtonMillimeter, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("pdl·ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.PoundalFoot, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("lbf·ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.PoundForceFoot, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("lbf·in", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.PoundForceInch, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("tf·cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.TonneForceCentimeter, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("tf·m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.TonneForceMeter, parsedUnit);
            }

            {
                Assert.True(Moment.TryParseUnit("tf·mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MomentUnit.TonneForceMillimeter, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(MomentUnit unit)
        {
            var inBaseUnits = Moment.From(1.0, Moment.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(MomentUnit unit)
        {
            var quantity = Moment.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(MomentUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = Moment.Units.First(u => u != Moment.BaseUnit);

            var quantity = Moment.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(MomentUnit unit)
        {
            var quantity = default(Moment);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Moment newtonmeter = Moment.FromNewtonMeters(1);
            AssertEx.EqualTolerance(1, Moment.FromKilogramForceCentimeters(newtonmeter.KilogramForceCentimeters).NewtonMeters, KilogramForceCentimetersTolerance);
            AssertEx.EqualTolerance(1, Moment.FromKilogramForceMeters(newtonmeter.KilogramForceMeters).NewtonMeters, KilogramForceMetersTolerance);
            AssertEx.EqualTolerance(1, Moment.FromKilogramForceMillimeters(newtonmeter.KilogramForceMillimeters).NewtonMeters, KilogramForceMillimetersTolerance);
            AssertEx.EqualTolerance(1, Moment.FromKilonewtonCentimeters(newtonmeter.KilonewtonCentimeters).NewtonMeters, KilonewtonCentimetersTolerance);
            AssertEx.EqualTolerance(1, Moment.FromKilonewtonMeters(newtonmeter.KilonewtonMeters).NewtonMeters, KilonewtonMetersTolerance);
            AssertEx.EqualTolerance(1, Moment.FromKilonewtonMillimeters(newtonmeter.KilonewtonMillimeters).NewtonMeters, KilonewtonMillimetersTolerance);
            AssertEx.EqualTolerance(1, Moment.FromKilopoundForceFeet(newtonmeter.KilopoundForceFeet).NewtonMeters, KilopoundForceFeetTolerance);
            AssertEx.EqualTolerance(1, Moment.FromKilopoundForceInches(newtonmeter.KilopoundForceInches).NewtonMeters, KilopoundForceInchesTolerance);
            AssertEx.EqualTolerance(1, Moment.FromMeganewtonCentimeters(newtonmeter.MeganewtonCentimeters).NewtonMeters, MeganewtonCentimetersTolerance);
            AssertEx.EqualTolerance(1, Moment.FromMeganewtonMeters(newtonmeter.MeganewtonMeters).NewtonMeters, MeganewtonMetersTolerance);
            AssertEx.EqualTolerance(1, Moment.FromMeganewtonMillimeters(newtonmeter.MeganewtonMillimeters).NewtonMeters, MeganewtonMillimetersTolerance);
            AssertEx.EqualTolerance(1, Moment.FromMegapoundForceFeet(newtonmeter.MegapoundForceFeet).NewtonMeters, MegapoundForceFeetTolerance);
            AssertEx.EqualTolerance(1, Moment.FromMegapoundForceInches(newtonmeter.MegapoundForceInches).NewtonMeters, MegapoundForceInchesTolerance);
            AssertEx.EqualTolerance(1, Moment.FromNewtonCentimeters(newtonmeter.NewtonCentimeters).NewtonMeters, NewtonCentimetersTolerance);
            AssertEx.EqualTolerance(1, Moment.FromNewtonMeters(newtonmeter.NewtonMeters).NewtonMeters, NewtonMetersTolerance);
            AssertEx.EqualTolerance(1, Moment.FromNewtonMillimeters(newtonmeter.NewtonMillimeters).NewtonMeters, NewtonMillimetersTolerance);
            AssertEx.EqualTolerance(1, Moment.FromPoundalFeet(newtonmeter.PoundalFeet).NewtonMeters, PoundalFeetTolerance);
            AssertEx.EqualTolerance(1, Moment.FromPoundForceFeet(newtonmeter.PoundForceFeet).NewtonMeters, PoundForceFeetTolerance);
            AssertEx.EqualTolerance(1, Moment.FromPoundForceInches(newtonmeter.PoundForceInches).NewtonMeters, PoundForceInchesTolerance);
            AssertEx.EqualTolerance(1, Moment.FromTonneForceCentimeters(newtonmeter.TonneForceCentimeters).NewtonMeters, TonneForceCentimetersTolerance);
            AssertEx.EqualTolerance(1, Moment.FromTonneForceMeters(newtonmeter.TonneForceMeters).NewtonMeters, TonneForceMetersTolerance);
            AssertEx.EqualTolerance(1, Moment.FromTonneForceMillimeters(newtonmeter.TonneForceMillimeters).NewtonMeters, TonneForceMillimetersTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Moment v = Moment.FromNewtonMeters(1);
            AssertEx.EqualTolerance(-1, -v.NewtonMeters, NewtonMetersTolerance);
            AssertEx.EqualTolerance(2, (Moment.FromNewtonMeters(3)-v).NewtonMeters, NewtonMetersTolerance);
            AssertEx.EqualTolerance(2, (v + v).NewtonMeters, NewtonMetersTolerance);
            AssertEx.EqualTolerance(10, (v*10).NewtonMeters, NewtonMetersTolerance);
            AssertEx.EqualTolerance(10, (10*v).NewtonMeters, NewtonMetersTolerance);
            AssertEx.EqualTolerance(2, (Moment.FromNewtonMeters(10)/5).NewtonMeters, NewtonMetersTolerance);
            AssertEx.EqualTolerance(2, Moment.FromNewtonMeters(10)/Moment.FromNewtonMeters(5), NewtonMetersTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Moment oneNewtonMeter = Moment.FromNewtonMeters(1);
            Moment twoNewtonMeters = Moment.FromNewtonMeters(2);

            Assert.True(oneNewtonMeter < twoNewtonMeters);
            Assert.True(oneNewtonMeter <= twoNewtonMeters);
            Assert.True(twoNewtonMeters > oneNewtonMeter);
            Assert.True(twoNewtonMeters >= oneNewtonMeter);

            Assert.False(oneNewtonMeter > twoNewtonMeters);
            Assert.False(oneNewtonMeter >= twoNewtonMeters);
            Assert.False(twoNewtonMeters < oneNewtonMeter);
            Assert.False(twoNewtonMeters <= oneNewtonMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Moment newtonmeter = Moment.FromNewtonMeters(1);
            Assert.Equal(0, newtonmeter.CompareTo(newtonmeter));
            Assert.True(newtonmeter.CompareTo(Moment.Zero) > 0);
            Assert.True(Moment.Zero.CompareTo(newtonmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Moment newtonmeter = Moment.FromNewtonMeters(1);
            Assert.Throws<ArgumentException>(() => newtonmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Moment newtonmeter = Moment.FromNewtonMeters(1);
            Assert.Throws<ArgumentNullException>(() => newtonmeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, MomentUnit.NewtonMeter, 1, MomentUnit.NewtonMeter, true)]  // Same value and unit.
        [InlineData(1, MomentUnit.NewtonMeter, 2, MomentUnit.NewtonMeter, false)] // Different value.
        [InlineData(2, MomentUnit.NewtonMeter, 1, MomentUnit.KilogramForceCentimeter, false)] // Different value and unit.
        [InlineData(1, MomentUnit.NewtonMeter, 1, MomentUnit.KilogramForceCentimeter, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, MomentUnit unitA, double valueB, MomentUnit unitB, bool expectEqual)
        {
            var a = new Moment(valueA, unitA);
            var b = new Moment(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Moment.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Moment.FromNewtonMeters(1);
            Assert.True(v.Equals(Moment.FromNewtonMeters(1), NewtonMetersTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Moment.Zero, NewtonMetersTolerance, ComparisonType.Relative));
            Assert.True(Moment.FromNewtonMeters(100).Equals(Moment.FromNewtonMeters(120), 0.3, ComparisonType.Relative));
            Assert.False(Moment.FromNewtonMeters(100).Equals(Moment.FromNewtonMeters(120), 0.1, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Moment.FromNewtonMeters(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Moment.FromNewtonMeters(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Moment newtonmeter = Moment.FromNewtonMeters(1);
            Assert.False(newtonmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Moment newtonmeter = Moment.FromNewtonMeters(1);
            Assert.False(newtonmeter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(MomentUnit)).Cast<MomentUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Moment.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 kgf·cm", new Moment(1, MomentUnit.KilogramForceCentimeter).ToString());
                Assert.Equal("1 kgf·m", new Moment(1, MomentUnit.KilogramForceMeter).ToString());
                Assert.Equal("1 kgf·mm", new Moment(1, MomentUnit.KilogramForceMillimeter).ToString());
                Assert.Equal("1 kN·cm", new Moment(1, MomentUnit.KilonewtonCentimeter).ToString());
                Assert.Equal("1 kN·m", new Moment(1, MomentUnit.KilonewtonMeter).ToString());
                Assert.Equal("1 kN·mm", new Moment(1, MomentUnit.KilonewtonMillimeter).ToString());
                Assert.Equal("1 kipf·ft", new Moment(1, MomentUnit.KilopoundForceFoot).ToString());
                Assert.Equal("1 kipf·in", new Moment(1, MomentUnit.KilopoundForceInch).ToString());
                Assert.Equal("1 MN·cm", new Moment(1, MomentUnit.MeganewtonCentimeter).ToString());
                Assert.Equal("1 MN·m", new Moment(1, MomentUnit.MeganewtonMeter).ToString());
                Assert.Equal("1 MN·mm", new Moment(1, MomentUnit.MeganewtonMillimeter).ToString());
                Assert.Equal("1 Mlbf·ft", new Moment(1, MomentUnit.MegapoundForceFoot).ToString());
                Assert.Equal("1 Mlbf·in", new Moment(1, MomentUnit.MegapoundForceInch).ToString());
                Assert.Equal("1 N·cm", new Moment(1, MomentUnit.NewtonCentimeter).ToString());
                Assert.Equal("1 N·m", new Moment(1, MomentUnit.NewtonMeter).ToString());
                Assert.Equal("1 N·mm", new Moment(1, MomentUnit.NewtonMillimeter).ToString());
                Assert.Equal("1 pdl·ft", new Moment(1, MomentUnit.PoundalFoot).ToString());
                Assert.Equal("1 lbf·ft", new Moment(1, MomentUnit.PoundForceFoot).ToString());
                Assert.Equal("1 lbf·in", new Moment(1, MomentUnit.PoundForceInch).ToString());
                Assert.Equal("1 tf·cm", new Moment(1, MomentUnit.TonneForceCentimeter).ToString());
                Assert.Equal("1 tf·m", new Moment(1, MomentUnit.TonneForceMeter).ToString());
                Assert.Equal("1 tf·mm", new Moment(1, MomentUnit.TonneForceMillimeter).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 kgf·cm", new Moment(1, MomentUnit.KilogramForceCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kgf·m", new Moment(1, MomentUnit.KilogramForceMeter).ToString(swedishCulture));
            Assert.Equal("1 kgf·mm", new Moment(1, MomentUnit.KilogramForceMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kN·cm", new Moment(1, MomentUnit.KilonewtonCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kN·m", new Moment(1, MomentUnit.KilonewtonMeter).ToString(swedishCulture));
            Assert.Equal("1 kN·mm", new Moment(1, MomentUnit.KilonewtonMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kipf·ft", new Moment(1, MomentUnit.KilopoundForceFoot).ToString(swedishCulture));
            Assert.Equal("1 kipf·in", new Moment(1, MomentUnit.KilopoundForceInch).ToString(swedishCulture));
            Assert.Equal("1 MN·cm", new Moment(1, MomentUnit.MeganewtonCentimeter).ToString(swedishCulture));
            Assert.Equal("1 MN·m", new Moment(1, MomentUnit.MeganewtonMeter).ToString(swedishCulture));
            Assert.Equal("1 MN·mm", new Moment(1, MomentUnit.MeganewtonMillimeter).ToString(swedishCulture));
            Assert.Equal("1 Mlbf·ft", new Moment(1, MomentUnit.MegapoundForceFoot).ToString(swedishCulture));
            Assert.Equal("1 Mlbf·in", new Moment(1, MomentUnit.MegapoundForceInch).ToString(swedishCulture));
            Assert.Equal("1 N·cm", new Moment(1, MomentUnit.NewtonCentimeter).ToString(swedishCulture));
            Assert.Equal("1 N·m", new Moment(1, MomentUnit.NewtonMeter).ToString(swedishCulture));
            Assert.Equal("1 N·mm", new Moment(1, MomentUnit.NewtonMillimeter).ToString(swedishCulture));
            Assert.Equal("1 pdl·ft", new Moment(1, MomentUnit.PoundalFoot).ToString(swedishCulture));
            Assert.Equal("1 lbf·ft", new Moment(1, MomentUnit.PoundForceFoot).ToString(swedishCulture));
            Assert.Equal("1 lbf·in", new Moment(1, MomentUnit.PoundForceInch).ToString(swedishCulture));
            Assert.Equal("1 tf·cm", new Moment(1, MomentUnit.TonneForceCentimeter).ToString(swedishCulture));
            Assert.Equal("1 tf·m", new Moment(1, MomentUnit.TonneForceMeter).ToString(swedishCulture));
            Assert.Equal("1 tf·mm", new Moment(1, MomentUnit.TonneForceMillimeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 N·m", new Moment(0.123456, MomentUnit.NewtonMeter).ToString("s1"));
                Assert.Equal("0.12 N·m", new Moment(0.123456, MomentUnit.NewtonMeter).ToString("s2"));
                Assert.Equal("0.123 N·m", new Moment(0.123456, MomentUnit.NewtonMeter).ToString("s3"));
                Assert.Equal("0.1235 N·m", new Moment(0.123456, MomentUnit.NewtonMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 N·m", new Moment(0.123456, MomentUnit.NewtonMeter).ToString("s1", culture));
            Assert.Equal("0.12 N·m", new Moment(0.123456, MomentUnit.NewtonMeter).ToString("s2", culture));
            Assert.Equal("0.123 N·m", new Moment(0.123456, MomentUnit.NewtonMeter).ToString("s3", culture));
            Assert.Equal("0.1235 N·m", new Moment(0.123456, MomentUnit.NewtonMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Moment)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(MomentUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal(Moment.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal(Moment.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Moment.FromNewtonMeters(1.0);
            Assert.Equal(new {Moment.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Moment.FromNewtonMeters(value);
            Assert.Equal(Moment.FromNewtonMeters(-value), -quantity);
        }
    }
}
