//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace OasysUnits.NumberExtensions.NumberToSpeed
{
    /// <summary>
    /// A number to Speed Extensions
    /// </summary>
    public static class NumberToSpeedExtensions
    {
        /// <inheritdoc cref="Speed.FromCentimetersPerHour(double)" />
        public static Speed CentimetersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromCentimetersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromCentimetersPerMinute(double)" />
        public static Speed CentimetersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromCentimetersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromCentimetersPerSecond(double)" />
        public static Speed CentimetersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromCentimetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromDecimetersPerMinute(double)" />
        public static Speed DecimetersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromDecimetersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromDecimetersPerSecond(double)" />
        public static Speed DecimetersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromDecimetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromFeetPerHour(double)" />
        public static Speed FeetPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromFeetPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromFeetPerMinute(double)" />
        public static Speed FeetPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromFeetPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromFeetPerSecond(double)" />
        public static Speed FeetPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromFeetPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromInchesPerHour(double)" />
        public static Speed InchesPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromInchesPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromInchesPerMinute(double)" />
        public static Speed InchesPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromInchesPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromInchesPerSecond(double)" />
        public static Speed InchesPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromInchesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromKilometersPerHour(double)" />
        public static Speed KilometersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromKilometersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromKilometersPerMinute(double)" />
        public static Speed KilometersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromKilometersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromKilometersPerSecond(double)" />
        public static Speed KilometersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromKilometersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromKnots(double)" />
        public static Speed Knots<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromKnots(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMach(double)" />
        public static Speed Mach<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromMach(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMetersPerHour(double)" />
        public static Speed MetersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromMetersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMetersPerMinute(double)" />
        public static Speed MetersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromMetersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMetersPerSecond(double)" />
        public static Speed MetersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromMetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMicrometersPerMinute(double)" />
        public static Speed MicrometersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromMicrometersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMicrometersPerSecond(double)" />
        public static Speed MicrometersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromMicrometersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMilesPerHour(double)" />
        public static Speed MilesPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromMilesPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMillimetersPerHour(double)" />
        public static Speed MillimetersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromMillimetersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMillimetersPerMinute(double)" />
        public static Speed MillimetersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromMillimetersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMillimetersPerSecond(double)" />
        public static Speed MillimetersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromMillimetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromNanometersPerMinute(double)" />
        public static Speed NanometersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromNanometersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromNanometersPerSecond(double)" />
        public static Speed NanometersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromNanometersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerHour(double)" />
        public static Speed UsSurveyFeetPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromUsSurveyFeetPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerMinute(double)" />
        public static Speed UsSurveyFeetPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromUsSurveyFeetPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerSecond(double)" />
        public static Speed UsSurveyFeetPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromUsSurveyFeetPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromYardsPerHour(double)" />
        public static Speed YardsPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromYardsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromYardsPerMinute(double)" />
        public static Speed YardsPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromYardsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromYardsPerSecond(double)" />
        public static Speed YardsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Speed.FromYardsPerSecond(Convert.ToDouble(value));

    }
}
