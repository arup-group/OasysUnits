//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using OasysUnits.Units;

namespace OasysUnits
{
    /// <inheritdoc />
    /// <summary>
    ///     .
    /// </summary>
    public struct  BendingStiffness
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly BendingStiffnessUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public BendingStiffnessUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public BendingStiffness(double value, BendingStiffnessUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static BendingStiffnessUnit BaseUnit { get; } = BendingStiffnessUnit.NewtonSquareMeter;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static BendingStiffness MaxValue { get; } = new BendingStiffness(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static BendingStiffness MinValue { get; } = new BendingStiffness(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static BendingStiffness Zero { get; } = new BendingStiffness(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="BendingStiffnessUnit.KilonewtonSquareMeter"/>
        /// </summary>
        public double KilonewtonSquareMeters => As(BendingStiffnessUnit.KilonewtonSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="BendingStiffnessUnit.KilonewtonSquareMillimeter"/>
        /// </summary>
        public double KilonewtonSquareMillimeters => As(BendingStiffnessUnit.KilonewtonSquareMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="BendingStiffnessUnit.NewtonSquareMeter"/>
        /// </summary>
        public double NewtonSquareMeters => As(BendingStiffnessUnit.NewtonSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="BendingStiffnessUnit.NewtonSquareMillimeter"/>
        /// </summary>
        public double NewtonSquareMillimeters => As(BendingStiffnessUnit.NewtonSquareMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="BendingStiffnessUnit.PoundForceSquareFoot"/>
        /// </summary>
        public double PoundsForceSquareFeet => As(BendingStiffnessUnit.PoundForceSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="BendingStiffnessUnit.PoundForceSquareInch"/>
        /// </summary>
        public double PoundsForceSquareInches => As(BendingStiffnessUnit.PoundForceSquareInch);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="BendingStiffness"/> from <see cref="BendingStiffnessUnit.KilonewtonSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static BendingStiffness FromKilonewtonSquareMeters(double kilonewtonsquaremeters) => new BendingStiffness(kilonewtonsquaremeters, BendingStiffnessUnit.KilonewtonSquareMeter);

        /// <summary>
        ///     Creates a <see cref="BendingStiffness"/> from <see cref="BendingStiffnessUnit.KilonewtonSquareMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static BendingStiffness FromKilonewtonSquareMillimeters(double kilonewtonsquaremillimeters) => new BendingStiffness(kilonewtonsquaremillimeters, BendingStiffnessUnit.KilonewtonSquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="BendingStiffness"/> from <see cref="BendingStiffnessUnit.NewtonSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static BendingStiffness FromNewtonSquareMeters(double newtonsquaremeters) => new BendingStiffness(newtonsquaremeters, BendingStiffnessUnit.NewtonSquareMeter);

        /// <summary>
        ///     Creates a <see cref="BendingStiffness"/> from <see cref="BendingStiffnessUnit.NewtonSquareMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static BendingStiffness FromNewtonSquareMillimeters(double newtonsquaremillimeters) => new BendingStiffness(newtonsquaremillimeters, BendingStiffnessUnit.NewtonSquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="BendingStiffness"/> from <see cref="BendingStiffnessUnit.PoundForceSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static BendingStiffness FromPoundsForceSquareFeet(double poundsforcesquarefeet) => new BendingStiffness(poundsforcesquarefeet, BendingStiffnessUnit.PoundForceSquareFoot);

        /// <summary>
        ///     Creates a <see cref="BendingStiffness"/> from <see cref="BendingStiffnessUnit.PoundForceSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static BendingStiffness FromPoundsForceSquareInches(double poundsforcesquareinches) => new BendingStiffness(poundsforcesquareinches, BendingStiffnessUnit.PoundForceSquareInch);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="BendingStiffnessUnit" /> to <see cref="BendingStiffness" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>BendingStiffness unit value.</returns>
        public static BendingStiffness From(double value, BendingStiffnessUnit fromUnit)
        {
            return new BendingStiffness(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(BendingStiffnessUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public BendingStiffness ToUnit(BendingStiffnessUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new BendingStiffness(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            return Unit switch
            {
                BendingStiffnessUnit.KilonewtonSquareMeter => (_value) * 1e3d,
                BendingStiffnessUnit.KilonewtonSquareMillimeter => (_value*1e-3*1e-3) * 1e3d,
                BendingStiffnessUnit.NewtonSquareMeter => _value,
                BendingStiffnessUnit.NewtonSquareMillimeter => _value*1e-3*1e-3,
                BendingStiffnessUnit.PoundForceSquareFoot => _value*4.4482216152605095551842641431421*0.3048*0.3048,
                BendingStiffnessUnit.PoundForceSquareInch => _value*4.4482216152605095551842641431421*2.54e-2*2.54e-2,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private double GetValueAs(BendingStiffnessUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                BendingStiffnessUnit.KilonewtonSquareMeter => (baseUnitValue) / 1e3d,
                BendingStiffnessUnit.KilonewtonSquareMillimeter => (baseUnitValue*1e3*1e3) / 1e3d,
                BendingStiffnessUnit.NewtonSquareMeter => baseUnitValue,
                BendingStiffnessUnit.NewtonSquareMillimeter => baseUnitValue*1e3*1e3,
                BendingStiffnessUnit.PoundForceSquareFoot => baseUnitValue/(4.4482216152605095551842641431421*0.3048*0.3048),
                BendingStiffnessUnit.PoundForceSquareInch => baseUnitValue/(4.4482216152605095551842641431421*2.54e-2*2.54e-2),
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion
    }
}

